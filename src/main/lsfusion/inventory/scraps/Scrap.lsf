MODULE Scrap;

REQUIRE InventorySettings, Product, Location, InvLedger, BarCode, Doc;

NAMESPACE Inventory;

CLASS Scrap 'Списание';

dateTime 'Дата' = DATA DATETIME (Scrap) NONULL;
WHEN LOCAL SET(Scrap s IS Scrap) AND NOT CHANGED(dateTime(s)) DO dateTime(s) <- currentDateTime();

@defineNumber(scrap, 'Списания', 'СП');

locationFrom 'Место хранения' = DATA Location (Scrap) NONULL;
nameLocationFrom 'Место хранения' (Scrap s) = name(locationFrom(s));

// lines
CLASS ScrapLine 'Строка списания';

scrap 'Списание' = DATA Scrap (ScrapLine) NONULL DELETE;

index 'Индекс' = PARTITION SUM 1 ORDER ScrapLine l BY scrap(l) IN id MATERIALIZED;

product 'Продукт' = DATA Product(ScrapLine);
nameProduct 'Продукт' (ScrapLine l) = name(product(l));
idBarCodeProduct 'Штрихкод' (ScrapLine l) = idBarCode(product(l));
idProduct 'Код' (ScrapLine l) = id(product(l));

uom = DATA Uom (ScrapLine);
nameUom 'Ед. изм.' (ScrapLine l) = name(uom(l));
WHEN LOCAL CHANGED(product(ScrapLine l)) DO uom(l) <- uom(product(l)); 

quantity 'Кол-во' = DATA NUMERIC[16,3] (ScrapLine);

readonly = ABSTRACT CASE BOOLEAN (Scrap);

FORM scrap 'Списание'
    OBJECTS s = Scrap PANEL 
    PROPERTIES(s) READONLYIF readonly(s) dateTime, number, nameLocationFrom
    
    OBJECTS l = ScrapLine
    PROPERTIES(l) READONLYIF readonly(s) index, nameProduct, nameUom, idBarCodeProduct, idProduct, quantity, NEW, DELETE
    FILTERS scrap(l) = s
    
    EDIT Scrap OBJECT s
;

DESIGN scrap {
    OBJECTS {
        NEW details {
            fill = 1;
            type = TABBED;
            NEW lines {
                caption = 'Строки';
                MOVE BOX(l);
            }
        }
    }
}

FORM scraps 'Списания'
    OBJECTS s = Scrap 
    PROPERTIES(s)  READONLY dateTime, number, nameLocationFrom
    PROPERTIES (s) NEWSESSION NEW, EDIT, DELETE READONLYIF readonly(s)
    
    LIST Scrap OBJECT s
;

NAVIGATOR {
    operations {
        NEW scraps;
    }
}

// status
@defineStatus(scrap, 'списания', s);

// history
@defineDocHistory(scrap, s, product, quantity);

// search
@defineDocSearch(scrap, product, quantity, s);

// copy
copy 'Копировать' (Scrap s) {
    NEWSESSION {
        NEW ns = Scrap {
            dateTime(ns) <- dateTime(s);
            locationFrom(ns) <- locationFrom(s);
            FOR scrap(ScrapLine l) = s INLINE NEW nl = ScrapLine DO {
                scrap(nl) <- ns;
                product(nl) <- product(l);
                quantity(nl) <- quantity(l);
            }
            SHOW scrap OBJECTS s = ns DOCKED;
        }
    }
}

EXTEND FORM scrap
    PROPERTIES(s) copy
;

DESIGN scrap {
    secondaryActions {
        MOVE PROPERTY(copy(s));
    }
}