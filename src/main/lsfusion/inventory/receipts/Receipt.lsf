MODULE Receipt;

REQUIRE System, Time,
        InventorySettings, Location, Partner, Product,
        ReceiptType, ItemPurchase, PartnerPurchase, BarCode;

NAMESPACE Inventory;

CLASS Receipt 'Поступление';

immediateTransfer 'Незапланированное поступление' = DATA BOOLEAN (Receipt);

// Операция
type 'Тип' = DATA ReceiptType (Receipt) NONULL;
nameType 'Тип' (Receipt r) = name(type(r));

WHEN LOCAL SET(Receipt r IS Receipt) AND countTypes() = 1 DO type(r) <- lastType(); 

scheduledDate 'Дата приемки' = DATA DATETIME (Receipt) NONULL IN id;
scheduledDate (Receipt r) <- currentDateTime() WHEN SET(r IS Receipt);
executionDate 'Дата проведения' = DATA DATETIME (Receipt);

// Номер
series 'Серия' = DATA STRING[2] (Receipt);
number 'Номер' = DATA STRING[28] (Receipt) NONULL;
receipt (STRING[28] number) = GROUP LAST Receipt r BY number(r);

seriesNumber 'Серия/Номер' (Receipt r) = CONCAT '/', series(r), number(r); 

WHEN SETCHANGED(type(Receipt o)) AND NOT CHANGED(number(o)) AND NOT CHANGED(series(o)) DO {
    number(o) <- curStringValue(numerator(type(o)));
    series(o) <- series(numerator(type(o)));
    incrementValueSession(numerator(type(o)));
}

// Места хранения
location 'Место хранения' = DATA Location (Receipt) NONULL INDEXED;
nameLocation 'Место хранения' (Receipt r) = name(location(r));
WHEN LOCAL CHANGED(type(Receipt r)) AND defaultLocation(type(r)) DO location(r) <- defaultLocation(type(r));

partner 'Партнер' = DATA Partner (Receipt);
namePartner 'Партнер' (Receipt r) = name(partner(r));
notes 'Примечания' = DATA ISTRING[50] (Receipt);

CONSTRAINT partner(Receipt r) AND NOT isVendor(partner(r)) 
                CHECKED BY partner[Receipt]
                MESSAGE 'Партнер должен быть вендором';
                
sourceDocument 'Исходный документ' = DATA STRING[10] (Receipt);

CLASS ReceiptLine 'Строка поступления';

receipt 'Документ' = DATA Receipt (ReceiptLine) NONULL DELETE INDEXED;

product 'Продукт' = DATA Product (ReceiptLine) NONULL INDEXED;
nameProduct 'Продукт' (ReceiptLine l) = dataName(product(l)) IN id;

initialDemand 'Планируемое количество' = DATA NUMERIC[16,3] (ReceiptLine);

CONSTRAINT initialDemand(ReceiptLine l) < 0 OR initialDemand(l) > maxQuantity(type(receipt(l))) 
    AND maxQuantity(type(receipt(l))) MESSAGE 'Планируемое количество должно быть от 0 до максимально разрешенного';
    
CONSTRAINT ReceiptLine l IS ReceiptLine AND NOT(initialDemand(l)) AND NOT immediateTransfer(receipt(l))     
            MESSAGE 'Необходимо заполнить планируемое кол-во';

// при редактировании строки открываем редактирование документа
edit (ReceiptLine l) + { edit(receipt(l)); } 

index 'Индекс' = PARTITION SUM 1 ORDER ReceiptLine l BY receipt(l) IN id MATERIALIZED;

readonly = ABSTRACT CASE BOOLEAN (ReceiptLine); 
readonly = ABSTRACT CASE BOOLEAN (Receipt);
readonlyHeader = ABSTRACT CASE BOOLEAN (Receipt);

CONSTRAINT product(ReceiptLine l) AND NOT canBePurchased(product(l))
            CHECKED BY product 
            MESSAGE 'Номенклатура не предназначена для закупки';

partner (ReceiptLine l) = partner(receipt(l));            
namePartner 'Партнер' (ReceiptLine l) = namePartner(receipt(l));
nameLocation 'Место хранения' (ReceiptLine l) = nameLocation(receipt(l));
executionDate 'Дата проведения' (ReceiptLine l) = executionDate(receipt(l));
           
FORM receipt 'Поступление'
    OBJECTS r = Receipt PANEL
    PROPERTIES(r) READONLYIF readonly(r) series, number, nameType, nameLocation, notes, sourceDocument
    PROPERTIES(r) READONLYIF readonlyHeader(r) scheduledDate BEFORE series(r), namePartner BEFORE notes(r)

    OBJECTS l = ReceiptLine
    PROPERTIES(l) index READONLY
    PROPERTIES(l) READONLYIF readonly(l) nameProduct, 
            initialDemand SHOWIF NOT immediateTransfer(r) BACKGROUND IF NOT readonly(l) THEN RGB(198,230,247)
    PROPERTIES(l) READONLYIF readonly(l) NEW, DELETE        
    FILTERS receipt(l) = r
   
    EDIT Receipt OBJECT r
;

FORM receipts 'Поступления'
    OBJECTS r = Receipt
    PROPERTIES(r) READONLY scheduledDate, executionDate, series, number, nameType, nameLocation, namePartner, notes
    PROPERTIES(r) NEWSESSION NEW, EDIT
    PROPERTIES(r) NEWSESSION READONLYIF readonly(r) DELETE
;

copyReceipt 'Копировать' (Receipt r) { 
    NEWSESSION {
        NEW nr = Receipt {
            type(nr) <- type(r);
            location(nr) <- location(r);
            partner(nr) <- partner(r);
            notes(nr) <- notes(r);
            immediateTransfer(nr) <- immediateTransfer(r);
            FOR receipt(ReceiptLine l) = r INLINE NEW nl = ReceiptLine DO {
                receipt(nl) <- nr;
                product(nl) <- product(l);
                initialDemand(nl) <- initialDemand(l);
            }
            SHOW receipt OBJECTS r = nr DOCKED;
        }
    }
}

EXTEND FORM receipt
    PROPERTIES(r) copyReceipt 
;

DESIGN receipt {
    OBJECTS {
        NEW statusPane FIRST {
            caption = 'Статусы';
            type = CONTAINERH;
            alignment = STRETCH;                          
            NEW statusActions {
                type = CONTAINERH;                    
                flex = 1; 
                NEW primary {
                    type = CONTAINERH;
                }
                NEW  secondary {
                    type = CONTAINERH;
                    MOVE PROPERTY(copyReceipt(r));  
                }           
            }
        }        
        NEW pane {
            fill = 1;                         
            NEW pane1 {
                type = CONTAINERV;
                NEW box1 {
                    type = CONTAINERH; 
                    alignment = STRETCH;                          
                    MOVE PROPERTY(scheduledDate(r));
                    MOVE PROPERTY(series(r));
                    MOVE PROPERTY(number(r));
                }
                NEW box2 {
                    type = CONTAINERH;
                    MOVE PROPERTY(nameType(r)) { notNull = TRUE; }
                    MOVE PROPERTY(nameLocation(r)) { notNull = TRUE; }
                    MOVE PROPERTY(namePartner(r));
                }
                NEW box3 {
                    type = CONTAINERH;
                    alignment = STRETCH; 
                    MOVE PROPERTY(sourceDocument(r));
                    MOVE PROPERTY(notes(r));
                }
            }
            NEW details {
                fill = 1;
                type = TABBED;
                NEW lines {
                    caption = 'Строки';
                    type = SPLITH;
                    NEW reclines {
                        fill = 2;
                        MOVE BOX(l) {
                            caption = 'Строки';
                            PROPERTY(nameProduct(l)) { notNull = TRUE; }
                            PROPERTY(initialDemand(l));
                        }
                    }    
                }                  
            }
        }          
    }
}

NAVIGATOR {
    operations {
        NEW receipts;
    }
}

@defineBarCodeAdd(receipt, r, product);

immediateReceipt 'Незапланированное поступление' () {
    NEWSESSION {
        NEW r = Receipt {
            immediateTransfer(r) <- TRUE;
            SHOW receipt OBJECTS r = r DOCKED;
        }
    }
}IMAGE 'add.png';

EXTEND FORM receipts 
    PROPERTIES immediateReceipt() DRAW r TOOLBAR
;
