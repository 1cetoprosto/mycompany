MODULE Receipt;

REQUIRE System, Time,
        InventorySettings, Location, Partner, Product,
        ReceiptType, ItemPurchase, PartnerPurchase, BarCode, Doc, ResLedger;

NAMESPACE Inventory;

CLASS Receipt 'Поступление';

immediateTransfer 'Незапланированное поступление' = DATA BOOLEAN (Receipt);

// type
type 'Тип' = DATA ReceiptType (Receipt) NONULL;
nameType 'Тип' (Receipt r) = name(type(r));

WHEN LOCAL SET(Receipt r IS Receipt) AND NOT CHANGED(type(r)) DO type(r) <- defaultReceiptType(); 

scheduledDate 'Планируемая дата' = DATA DATETIME (Receipt) NONULL IN id;
scheduledDate (Receipt r) <- currentDateTime() WHEN SET(r IS Receipt);

@defineSeriesNumberType(receipt);
receipt (STRING[31] number) = GROUP LAST Receipt r BY number(r);

// location
location 'Место хранения' = DATA Location (Receipt) NONULL INDEXED;
nameLocation 'Место хранения' (Receipt r) = name(location(r));
WHEN LOCAL CHANGED(type(Receipt r)) AND defaultLocation(type(r)) DO location(r) <- defaultLocation(type(r));

// partner
partner = DATA Partner (Receipt) INDEXED;
namePartner 'Контрагент' (Receipt r) = name(partner(r));

CONSTRAINT partner(Receipt r) AND NOT isVendor(partner(r)) 
                CHECKED BY partner[Receipt]
                MESSAGE 'Контрагент должен быть вендором';

sourceDocument 'Основание' = DATA STRING[31] (Receipt);
note 'Примечание' = DATA ISTRING[50] (Receipt);

// lines
CLASS ReceiptLine 'Строка поступления';

receipt 'Документ' = DATA Receipt (ReceiptLine) NONULL DELETE INDEXED;

index 'Индекс' = PARTITION SUM 1 ORDER ReceiptLine l BY receipt(l) IN id MATERIALIZED;

product 'Продукт' = DATA Product (ReceiptLine) NONULL INDEXED;
nameProduct 'Продукт' (ReceiptLine l) = name(product(l)) IN id;
idBarCodeProduct 'Штрих код' (ReceiptLine l) = idBarCode(product(l));
idProduct 'Код' (ReceiptLine l) = id(product(l));

CONSTRAINT product(ReceiptLine l) AND NOT canBePurchased(product(l))
            CHECKED BY product[ReceiptLine]
            MESSAGE 'Товар не предназначен для закупки';

unitMeasure 'Ед.изм.' = DATA ItemMeasure (ReceiptLine);
nameUnitMeasure 'Ед.изм.' (ReceiptLine l) = name(unitMeasure(l));

initialDemand 'Планируемое количество' = DATA NUMERIC[16,3] (ReceiptLine);

CONSTRAINT initialDemand(ReceiptLine l) < 0 OR initialDemand(l) > maxQuantity(type(receipt(l))) 
    AND maxQuantity(type(receipt(l))) MESSAGE 'Планируемое количество должно быть от 0 до максимально разрешенного';
    
CONSTRAINT ReceiptLine l IS ReceiptLine AND NOT(initialDemand(l)) AND NOT immediateTransfer(receipt(l))     
            MESSAGE 'Необходимо заполнить планируемое кол-во';

// readonly
readonly = ABSTRACT CASE BOOLEAN (Receipt);
readonly = ABSTRACT CASE BOOLEAN (ReceiptLine); 

// Line properties
partner (ReceiptLine l) = partner(receipt(l));            
namePartner 'Контрагент' (ReceiptLine l) = namePartner(receipt(l));
nameLocation 'Место хранения' (ReceiptLine l) = nameLocation(receipt(l));

// edit form
edit (ReceiptLine l) + { edit(receipt(l)); } 
           
FORM receipt 'Поступление'
    OBJECTS r = Receipt PANEL
    PROPERTIES(r) READONLYIF readonly(r) 
                        nameType, scheduledDate, number, 
                        namePartner, nameLocation, sourceDocument,
                        note

    OBJECTS l = ReceiptLine
    PROPERTIES(l) index READONLY
    PROPERTIES(l) READONLYIF readonly(l) nameProduct, nameUnitMeasure, idBarCodeProduct, idProduct,
            initialDemand SHOWIF NOT immediateTransfer(r) BACKGROUND IF NOT readonly(l) THEN RGB(198,230,247)
    PROPERTIES(l) READONLYIF readonly(l) NEW, DELETE        
    FILTERS receipt(l) = r
   
    EDIT Receipt OBJECT r
;

DESIGN receipt {
    OBJECTS {       
        NEW header {
            NEW headerCenter {
                alignment = STRETCH;
                type = CONTAINERH;
                NEW headerLeft {
                    MOVE PROPERTY(nameType(r)) { notNull = TRUE; }
                    MOVE PROPERTY(scheduledDate(r));
                    MOVE PROPERTY(number(r));
                }
                NEW headerRight {
                    MOVE PROPERTY(namePartner(r))  { notNull = TRUE; }
                    MOVE PROPERTY(nameLocation(r)) { notNull = TRUE; }           
                    MOVE PROPERTY(sourceDocument(r));
                }
            }
            NEW headerBottom {
                alignment = STRETCH;
                MOVE PROPERTY(note(r));           
            }
        }
        NEW details {
            fill = 5;
            type = TABBED;
            NEW lines {
                caption = 'Строки';
                MOVE BOX(l) {
                    PROPERTY(nameProduct(l)) { notNull = TRUE; }
                    PROPERTY(initialDemand(l)) { notNull = TRUE; }
                }
            }                  
        }
    }
}

@defineBarCodeAdd(receipt, r, product);

FORM receipts 'Поступления'
    OBJECTS r = Receipt
    PROPERTIES(r) READONLY scheduledDate, number, nameType, nameLocation, namePartner, note
    PROPERTIES(r) NEWSESSION NEW, EDIT, DELETE READONLYIF readonly(r)
;

NAVIGATOR {
    operations {
        NEW receipts;
    }
}

// immediate receipt
immediateReceipt 'Незапланированное поступление' () {
    NEWSESSION {
        NEW r = Receipt {
            immediateTransfer(r) <- TRUE;
            SHOW receipt OBJECTS r = r DOCKED;
        }
    }
}IMAGE 'add.png';

EXTEND FORM receipts 
    PROPERTIES immediateReceipt() DRAW r TOOLBAR
;

// status
@defineStatus(receipt, 'поступления', r);

nameStatus 'Статус' (ReceiptLine l) = nameStatus(receipt(l));   
readonly (ReceiptLine l) += WHEN NOT status(receipt(l)) = ReceiptStatus.draft THEN TRUE;

// history
@defineDocHistory(receipt, r, product, initialDemand);

// search
@defineDocSearch(receipt, product, initialDemand, r, canBePurchased);

available 'Доступный остаток' (Receipt r, Product p) = prevAvailableRec(location(r), p);

EXTEND FORM receipt
    PROPERTIES(r, itm) available
;

// copy
copy 'Копировать' (Receipt r) { 
    NEWSESSION {
        NEW nr = Receipt {
            type(nr) <- type(r);
            location(nr) <- location(r);
            partner(nr) <- partner(r);
            note(nr) <- note(r);
            immediateTransfer(nr) <- immediateTransfer(r);
            FOR receipt(ReceiptLine l) = r INLINE NEW nl = ReceiptLine DO {
                receipt(nl) <- nr;
                product(nl) <- product(l);
                initialDemand(nl) <- initialDemand(l);
            }
            SHOW receipt OBJECTS r = nr DOCKED;
        }
    }
}

EXTEND FORM receipt
    PROPERTIES(r) copy 
;

DESIGN receipt {
    secondaryActions {
        MOVE PROPERTY(copy(r));
    }
}
