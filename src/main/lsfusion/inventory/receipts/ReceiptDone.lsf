MODULE ReceiptDone;

REQUIRE Inventory, ReceiptReady;

NAMESPACE Inventory;

// Принят
done 'Принят' = DATA BOOLEAN (Receipt);

done 'Принятое количество' = DATA NUMERIC[16,3] (ReceiptLine);

CONSTRAINT done(ReceiptLine l) < 0 OR done(l) > initialDemand(l) 
    MESSAGE 'Отгруженое количество должно быть от 0 до исходного';

validate 'Принят' (Receipt r) {
    APPLY; // сохраняем изменения
    IF canceled() THEN RETURN; // если сработало ограничение, то выходим
    
    NEWSESSION {
        IF GROUP SUM done(ReceiptLine l) IF receipt(l) = r THEN {
            IF GROUP SUM 1 IF receipt(ReceiptLine l) = r AND NOT done(l) = initialDemand(l) THEN {
                ASK 'Принято не все количество. Создать дополнительную приемку ?' DO {
                    NEW rn = Receipt {
                        type(rn) <- type(r);
                        partner(rn) <- partner(r);
                        location(rn) <- location(r);
                        scheduledDate(rn) <- scheduledDate(r);
                        notes(rn) <- notes(r);
                        FOR receipt(ReceiptLine l) = r AND (q = initialDemand(l) (-) done(l)) DO NEW ln = ReceiptLine {
                            receipt(ln) <- rn;
                            product(ln) <- product(l);
                            initialDemand(ln) <- q;
                        }
                    }
                    initialDemand(ReceiptLine l) <- done(l) WHERE receipt(l) = r;
                    DELETE ReceiptLine l WHERE receipt(l) = r AND NOT done(l);
                }
            }
        } ELSE {
            ASK 'Не заполены принятые количества. Проставить ожидаемыми ?' DO {
                done(ReceiptLine l) <- initialDemand(l) WHERE receipt(l) = r;
            } ELSE RETURN;
        }
        done(r) <- TRUE;
        executionDate(r) <- currentDateTime();
        APPLY;
    }
}

EXTEND CLASS ReceiptStatus {
    done 'Принят'
}

readonlyHeader (Receipt r) += WHEN status(r) = ReceiptStatus.done THEN TRUE;

EXTEND FORM receipt
    PROPERTIES(r) validate SHOWIF status(r) = ReceiptStatus.ready, done READONLY 
    PROPERTIES (r)  executionDate READONLY AFTER scheduledDate(r) SHOWIF done(r)
    
    PROPERTIES(l) done READONLYIF NOT status(r) = ReceiptStatus.ready BACKGROUND 
                       IF status(r) = ReceiptStatus.ready THEN RGB(198,230,247)
;
DESIGN receipt {
    PROPERTY(validate(r)) { background = RGB(219,160,232);}//#DBA0E8
}

EXTEND FORM receipts 
    EXTEND FILTERGROUP status
        FILTER 'Принят' status(r) = ReceiptStatus.done 'F7'
;

status(Receipt r) += WHEN done(r) THEN ReceiptStatus.done;
colorStatus(Receipt r) += WHEN status(r) == ReceiptStatus.done THEN RGB(255,255,255);



DESIGN receipt {                               
    statusActions { 
        primary {
            MOVE PROPERTY(validate(r)) { fontStyle = 'bold'; }
        }                 
    }
    status {
        MOVE PROPERTY(done(r));                              
    } 
    box1 {
        MOVE PROPERTY(executionDate(r));
    }                  
}
