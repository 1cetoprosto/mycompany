MODULE ReceiptDone;

REQUIRE ReceiptReady;

NAMESPACE Inventory;

EXTEND CLASS ReceiptStatus {
    done 'Принят'
}
done 'Принят' = DATA BOOLEAN (Receipt);

status (Receipt r) += WHEN done(r) THEN ReceiptStatus.done;

executionDateTime 'Дата поступления' = DATA DATETIME (Receipt);
WHEN SET(done(Receipt r)) AND NOT CHANGED(executionDateTime(r)) DO executionDateTime(r) <- currentDateTime(); 
executionDateTime 'Дата поступления' (ReceiptLine l) = executionDateTime(receipt(l));

done 'Принятое количество' = DATA NUMERIC[16,3] (ReceiptLine);

CONSTRAINT done(ReceiptLine l) < 0 OR done(l) > initialDemand(l) 
    MESSAGE 'Принятое количество должно быть от 0 до исходного';

validate 'Принят' (Receipt r) {        
    APPLY; // сохраняем изменения
    IF canceled() THEN RETURN; // если сработало ограничение, то выходим
        
    NEWSESSION {
        IF NOT immediate(r) THEN {
            IF GROUP SUM done(ReceiptLine l) IF receipt(l) = r THEN {
                IF GROUP SUM 1 IF receipt(ReceiptLine l) = r AND NOT done(l) = initialDemand(l) THEN {
                    ASK 'Принято не все количество. Создать дополнительную приемку ?' DO {
                        NEW rn = Receipt {
                            type(rn) <- type(r);

                            scheduledDateTime(rn) <- scheduledDateTime(r);

                            vendor(rn) <- vendor(r);
                            location(rn) <- location(r);

                            note(rn) <- note(r);

                            FOR receipt(ReceiptLine l) = r AND (q = initialDemand(l) (-) done(l)) DO NEW ln = ReceiptLine {
                                receipt(ln) <- rn;
                                product(ln) <- product(l);
                                initialDemand(ln) <- q;
                            }
                        }
                        initialDemand(ReceiptLine l) <- done(l) WHERE receipt(l) = r;
                        DELETE ReceiptLine l WHERE receipt(l) = r AND NOT done(l);
                    }
                }
            } ELSE {
                ASK 'Не заполены принятые количества. Проставить ожидаемыми ?' DO {
                    done(ReceiptLine l) <- initialDemand(l) WHERE receipt(l) = r;
                } ELSE RETURN;
            }
        }
        
        done(r) <- TRUE;
        APPLY;
    }
}

toValidate (Receipt r) = status(r) = ReceiptStatus.ready OR (immediate(r) AND status(r) = ReceiptStatus.draft);

EXTEND FORM receipt
    PROPERTIES(r) validate SHOWIF toValidate(r), 
                  done,
                  executionDateTime SHOWIF done(r)
    
    PROPERTIES(l) done BACKGROUND RGB(198,230,247) IF toValidate(r)
;

DESIGN receipt {
    primaryActions {
        MOVE PROPERTY(validate(r)) { fontStyle = 'bold'; }
    }
    status {
        MOVE PROPERTY(done(r));                              
    } 
    headerLeft {
        MOVE PROPERTY(executionDateTime(r));
    }                  
}

EXTEND FORM receipts 
    PROPERTIES(r) READONLY executionDateTime AFTER scheduledDateTime(r)

    EXTEND FILTERGROUP status
        FILTER 'Принят' status(r) = ReceiptStatus.done 'F7'
;