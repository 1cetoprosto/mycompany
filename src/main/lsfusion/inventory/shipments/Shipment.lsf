MODULE Shipment;

REQUIRE System, Time,
        Inventory, Location, Partner, Product,
        ShipmentType;

NAMESPACE Inventory;

CLASS Shipment 'Отгрузка';

type 'Тип' = DATA ShipmentType (Shipment) NONULL;
nameType 'Тип' (Shipment s) = name(type(s));

WHEN LOCAL SET(Shipment s IS Shipment) AND countTypesShipment() = 1 DO type(s) <- lastTypeShipment(); 

scheduledDate 'Дата отгрузки' = DATA DATETIME (Shipment) NONULL IN id;
scheduledDate (Shipment s) <- currentDateTime() WHEN SET(s IS Shipment);
executionDate 'Дата проведения' = DATA DATETIME (Shipment);

location 'Место хранения' = DATA Location (Shipment) NONULL INDEXED;
nameLocation 'Место хранения (Откуда)' (Shipment s) = name(location(s));
toLocation 'Место хранения (Куда)' = DATA Location (Shipment);
nameToLocation 'Место хранения (Куда)' (Shipment s) = name(toLocation(s));

WHEN LOCAL CHANGED(type(Shipment s)) DO 
    IF (isTransfer(type(s))) THEN {
        IF defaultLocationFrom(type(s)) THEN location(s) <- defaultLocationFrom(type(s));
        IF defaultLocationTo(type(s)) THEN toLocation(s) <- defaultLocationTo(type(s));
    }

partner 'Партнер' = DATA Partner (Shipment);
namePartner 'Партнер' (Shipment s) = name(partner(s));
notes 'Примечания' = DATA ISTRING[50] (Shipment);

// Номер
series 'Серия' = DATA STRING[2] (Shipment);
number 'Номер' = DATA STRING[28] (Shipment) NONULL;

seriesNumber 'Серия/Номер' (Shipment s) = CONCAT '/', series(s), number(s); 

WHEN SETCHANGED(type(Shipment o)) AND NOT CHANGED(number(o)) AND NOT CHANGED(series(o)) DO {
    number(o) <- curStringValue(numerator(type(o)));
    series(o) <- series(numerator(type(o)));
    incrementValueSession(numerator(type(o)));
}

WHEN SETCHANGED(type(Shipment s)) AND NOT isTransfer(type(s)) DO toLocation(s) <- NULL;

CLASS ShipmentLine 'Строка отгрузки';

shipment 'Документ' = DATA Shipment (ShipmentLine) NONULL DELETE INDEXED;

product 'Продукт' = DATA Product (ShipmentLine) NONULL INDEXED;
nameProduct 'Продукт' (ShipmentLine l) = name(product(l)) IN id;

initialDemand 'Исходное количество' = DATA NUMERIC[16,3] (ShipmentLine) NONULL;
reserved 'Зарезервировано' = DATA NUMERIC[16,3] (ShipmentLine);

CONSTRAINT initialDemand(ShipmentLine l) < 0 OR initialDemand(l) > maxQuantity(type(shipment(l))) 
    AND maxQuantity(type(shipment(l))) MESSAGE 'Исходное количество должно быть от 0 до максимально разрешенного';

CONSTRAINT location(Shipment s) == toLocation(s)
                MESSAGE 'Места хранения откуда и куда не могут совпадать';


// при редактировании строки открываем редактирование документа
edit (ShipmentLine l) + { edit(shipment(l)); } 

index 'Индекс' = PARTITION SUM 1 ORDER ShipmentLine l BY shipment(l) IN id MATERIALIZED;

readonly = ABSTRACT CASE BOOLEAN (ShipmentLine);

FORM shipment 'Отгрузка'
    OBJECTS s = Shipment PANEL 
    PROPERTIES(s) scheduledDate, series, number, nameType, nameLocation, 
                  nameToLocation SHOWIF isTransfer(type(s)), namePartner SHOWIF NOT isTransfer(type(s)), notes
                  
    OBJECTS l = ShipmentLine
    PROPERTIES(l) index READONLY
    PROPERTIES(l) READONLYIF readonly(l) nameProduct, initialDemand , NEW, DELETE  
             
    EDIT Shipment OBJECT s
;

FORM shipments 'Отгрузки'
    OBJECTS s = Shipment
    PROPERTIES(s) READONLY scheduledDate, executionDate, series, number, nameType, nameLocation,
                  nameToLocation, namePartner, notes
    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE
;

DESIGN shipment {
    OBJECTS {        
        NEW pane {
            fill = 1;                         
            NEW pane1 {
                type = CONTAINERV ;
                NEW box1 {
                    type = CONTAINERH; 
                    alignment = STRETCH;                                        
                    MOVE PROPERTY(scheduledDate(s));
                    MOVE PROPERTY(series(s));
                    MOVE PROPERTY(number(s));
                }
                NEW box2 {
                    type = CONTAINERH;
                    MOVE PROPERTY(nameType(s)) {notNull = TRUE;}
                    MOVE PROPERTY(nameLocation(s)) {notNull = TRUE;}
                    MOVE PROPERTY(namePartner(s));
                    MOVE PROPERTY(nameToLocation(s));
                }
                NEW box3 {
                    type = CONTAINERH;
                    alignment = STRETCH; 
                    MOVE PROPERTY(notes(s));
                }
            }
            NEW details {
                fill = 1;
                type = TABBED;
                MOVE BOX(l) {
                    caption = 'Строки';
                    PROPERTY(nameProduct(l)) {notNull = TRUE;}
                    PROPERTY(initialDemand(l));
                }                  
            }  
        }        
    }
}

NAVIGATOR {
    operations {
        NEW shipments;
    }
}

copyShipment 'Копировать' (Shipment s)  { 
    NEWSESSION {
        NEW ns = Shipment {
            FOR shipment(ShipmentLine l) = s INLINE NEW nl = ShipmentLine DO {
                shipment(nl) <- ns;
                product(nl) <- product(l);
                initialDemand(nl) <- initialDemand(l);
            }
            SHOW shipment OBJECTS s = ns DOCKED;
        }
    }
}

EXTEND FORM shipments
    PROPERTIES(s) copyShipment TOOLBAR 
;
