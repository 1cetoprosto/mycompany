MODULE Shipment;

REQUIRE System, Time,
        InventorySettings, Location, Partner, Product,
        ShipmentType, ItemSale, PartnerSale, BarCode, Doc, ResLedger;

NAMESPACE Inventory;

CLASS Shipment 'Отгрузка';

immediateTransfer 'Незапланированное поступление' = DATA BOOLEAN (Shipment);

type 'Тип' = DATA ShipmentType (Shipment) NONULL;
nameType 'Тип' (Shipment s) = name(type(s));

WHEN LOCAL SET(Shipment s IS Shipment) AND countTypesShipment() = 1 DO type(s) <- lastTypeShipment(); 

scheduledDate 'Планируемая дата' = DATA DATETIME (Shipment) NONULL IN id;
scheduledDate (Shipment s) <- currentDateTime() WHEN SET(s IS Shipment);

location 'Место хранения' = DATA Location (Shipment) NONULL INDEXED;
nameLocation 'Место хранения (Откуда)' (Shipment s) = name(location(s));
toLocation 'Место хранения (Куда)' = DATA Location (Shipment);
nameToLocation 'Место хранения (Куда)' (Shipment s) = name(toLocation(s));

WHEN LOCAL CHANGED(type(Shipment s)) DO { 
    IF defaultLocationFrom(type(s)) THEN location(s) <- defaultLocationFrom(type(s));    
    toLocation(s) <- defaultLocationTo(type(s)); 
}

CONSTRAINT isTransfer(type(Shipment s)) AND NOT toLocation(s) MESSAGE 'Нужно указать место хранения (Куда) при трансфере';

partner 'Партнер' = DATA Partner (Shipment) INDEXED;
namePartner 'Партнер' (Shipment s) = name(partner(s));
notes 'Примечания' = DATA ISTRING[50] (Shipment);

CONSTRAINT partner(Shipment s) AND NOT isCustomer(partner(s)) 
                CHECKED BY partner[Shipment]
                MESSAGE 'Партнер должен быть вендором';

// Номер
@defineSeriesNumberType(shipment);

WHEN SETCHANGED(type(Shipment s)) AND NOT isTransfer(type(s)) DO toLocation(s) <- NULL;

sourceDocument 'Исходный документ' = DATA STRING[30] (Shipment) CHARWIDTH 10;

CLASS ShipmentLine 'Строка отгрузки';

shipment 'Документ' = DATA Shipment (ShipmentLine) NONULL DELETE INDEXED IN id;

product 'Продукт' = DATA Product (ShipmentLine) NONULL INDEXED;
nameProduct 'Продукт' (ShipmentLine l) = name(product(l)) IN id;
idBarCodeProduct 'Штрих код' (ShipmentLine l) = idBarCode(product(l));
idProduct 'Код' (ShipmentLine l) = id(product(l));

unitMeasure 'Ед.изм.' = DATA ItemMeasure (ShipmentLine);
nameUnitMeasure 'Ед.изм.' (ShipmentLine l) = name(unitMeasure(l));

initialDemand 'Планируемое количество' = DATA NUMERIC[16,3] (ShipmentLine);

CONSTRAINT initialDemand(ShipmentLine l) < 0 OR initialDemand(l) > maxQuantity(type(shipment(l))) 
    AND maxQuantity(type(shipment(l))) MESSAGE 'Исходное количество должно быть от 0 до максимально разрешенного';

CONSTRAINT location(Shipment s) == toLocation(s)
                MESSAGE 'Места хранения откуда и куда не могут совпадать';
                
CONSTRAINT ShipmentLine l IS ShipmentLine AND NOT(initialDemand(l)) AND NOT immediateTransfer(shipment(l))     
            MESSAGE 'Необходимо заполнить планируемое кол-во';

// при редактировании строки открываем редактирование документа
edit (ShipmentLine l) + { edit(shipment(l)); } 

index 'Индекс' = PARTITION SUM 1 ORDER ShipmentLine l BY shipment(l) IN id MATERIALIZED;

readonly = ABSTRACT CASE BOOLEAN (ShipmentLine);
readonly = ABSTRACT CASE BOOLEAN (Shipment);
readonlyHeader = ABSTRACT CASE BOOLEAN (Shipment);

CONSTRAINT product(ShipmentLine l) AND NOT canBeSold(product(l))
            CHECKED BY product[ShipmentLine] 
            MESSAGE 'Наменклатура не предназначена для продажи';
            
partner (ShipmentLine l) = partner(shipment(l));            
namePartner 'Партнер' (ShipmentLine l) = namePartner(shipment(l));
nameLocation 'Место хранения' (ShipmentLine l) = nameLocation(shipment(l));

FORM shipment 'Отгрузка'
    OBJECTS s = Shipment PANEL 
    PROPERTIES(s) READONLYIF readonly(s) series, number, nameType, nameLocation, notes, sourceDocument
    PROPERTIES(s) READONLYIF readonlyHeader(s) scheduledDate BEFORE series(s), 
        nameToLocation SHOWIF isTransfer(type(s)) BEFORE notes(s), namePartner SHOWIF NOT isTransfer(type(s)) BEFORE notes(s)
                  
    OBJECTS l = ShipmentLine
    PROPERTIES(l) index READONLY
    PROPERTIES(l) READONLYIF readonly(l) nameProduct, nameUnitMeasure, idBarCodeProduct, idProduct, 
        initialDemand SHOWIF NOT immediateTransfer(s) BACKGROUND IF NOT readonly(l) THEN RGB(198,230,247) 
    PROPERTIES(l) READONLYIF readonly(l) NEW, DELETE
             
    EDIT Shipment OBJECT s
;

FORM shipments 'Отгрузки'
    OBJECTS s = Shipment
    PROPERTIES(s) READONLY scheduledDate, series, number, nameType, nameLocation,
                  nameToLocation, namePartner, notes
    PROPERTIES(s) NEWSESSION READONLYIF readonly(s) DELETE
    PROPERTIES(s) NEWSESSION NEW, EDIT
;

copyShipment 'Копировать' (Shipment s)  { 
    NEWSESSION {
        NEW ns = Shipment {
            type(ns) <- type(s);
            location(ns) <- location(s);
            toLocation(ns) <- toLocation(s);
            notes(ns) <- notes(s);
            immediateTransfer(ns) <- immediateTransfer(s);
            FOR shipment(ShipmentLine l) = s INLINE NEW nl = ShipmentLine DO {
                shipment(nl) <- ns;
                product(nl) <- product(l);
                initialDemand(nl) <- initialDemand(l);
            }
            SHOW shipment OBJECTS s = ns DOCKED;
        }
    }
}

EXTEND FORM shipment
    PROPERTIES(s) copyShipment
;

DESIGN shipment {
    OBJECTS {       
        NEW pane {
            fill = 1;                         
            NEW pane1 {
                type = CONTAINERV ;
                NEW box1 {
                    type = CONTAINERH; 
                    alignment = STRETCH;                                        
                    MOVE PROPERTY(scheduledDate(s));
                    MOVE PROPERTY(series(s));
                    MOVE PROPERTY(number(s));
                }
                NEW box2 {
                    type = CONTAINERH;
                    MOVE PROPERTY(nameType(s)) { notNull = TRUE; }
                    MOVE PROPERTY(nameLocation(s)) { notNull = TRUE; }
                    MOVE PROPERTY(namePartner(s));
                    MOVE PROPERTY(nameToLocation(s)) { notNull = TRUE; }
                }
                NEW box3 {
                    type = CONTAINERH;
                    alignment = STRETCH; 
                    MOVE PROPERTY(sourceDocument(s));
                    MOVE PROPERTY(notes(s));
                }
            }
            NEW details {
                fill = 1;
                type = TABBED;
                NEW lines {
                    caption = 'Строки';
                    MOVE BOX(l) {
                        PROPERTY(nameProduct(l)) { notNull = TRUE; }
                        PROPERTY(initialDemand(l));
                    }    
                }                 
            }  
        }        
    }
}

NAVIGATOR {
    operations {
        NEW shipments;
    }
}

@defineBarCodeAdd(shipment, s, product);

immediateShipment 'Незапланированная отгрузка' () {
    NEWSESSION {
        NEW s = Shipment {
            immediateTransfer(s) <- TRUE;
            SHOW shipment OBJECTS s = s DOCKED;
        }
    }
}IMAGE 'add.png';

EXTEND FORM shipments 
    PROPERTIES immediateShipment() DRAW s TOOLBAR
;

@defineStatus(shipment, 'отгрузки', s);
@defineDocHistory(shipment, s, product, initialDemand);

nameStatus 'Статус' (ShipmentLine l) = nameStatus(shipment(l));

@defineDocSearch(shipment, product, initialDemand, s, canBeSold);

available 'Доступный остаток' (Shipment s, Product p) = prevAvailableRec(location(s), p); 

EXTEND FORM shipment
    PROPERTIES(s, itm) available
    FILTERGROUP  available
        FILTER 'Остатки' available(s, itm) 'F5' DEFAULT
;

DESIGN shipment {
    secondary {
        MOVE PROPERTY(copyShipment(s)); 
    }
}