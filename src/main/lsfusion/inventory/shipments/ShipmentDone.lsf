MODULE ShipmentDone;

REQUIRE Inventory, ShipmentReady;

NAMESPACE Inventory;

done 'Отгружен' = DATA BOOLEAN (Shipment);

done 'Отгруженое кол-во' = DATA NUMERIC[16,3] (ShipmentLine);

CONSTRAINT done(ShipmentLine l) < 0 OR done(l) > initialDemand(l) 
    MESSAGE 'Отгруженое количество должно быть от 0 до исходного';

validate 'Отгружен' (Shipment s) {
    APPLY; // сохраняем изменения
    IF canceled() THEN RETURN; // если сработало ограничение, то выходим
    
    NEWSESSION {
        IF NOT GROUP SUM done(ShipmentLine l) IF shipment(l) = s THEN
            ASK 'Не заполены отгруженые количества. Проставить ожидаемыми?' DO {
                done(ShipmentLine l) <- reserved(l) (+) picked(l) WHERE shipment(l) = s;
            } ELSE RETURN;
        
        IF GROUP SUM 1 IF shipment(ShipmentLine l) = s AND NOT done(l) = initialDemand(l) THEN {
            ASK 'Отгружено не все количество. Создать дополнительную отгрузку?' DO {
                NEW rn = Shipment {
                    type(rn) <- type(s);
                    partner(rn) <- partner(s);
                    location(rn) <- location(s);
                    toLocation(rn) <- toLocation(s);
                    scheduledDate(rn) <- scheduledDate(s);
                    notes(rn) <- notes(s);
                    FOR shipment(ShipmentLine l) = s AND (q = initialDemand(l) (-) done(l)) DO NEW ln = ShipmentLine {
                        shipment(ln) <- rn;
                        product(ln) <- product(l);
                        initialDemand(ln) <- q;
                    }
                }
                initialDemand(ShipmentLine l) <- done(l) WHERE shipment(l) = s;
                DELETE ShipmentLine l WHERE shipment(l) = s AND NOT done(l);
            }
        }
        done(s) <- TRUE;
        executionDate(s) <- currentDateTime();
        APPLY;
    }
}

EXTEND CLASS ShipmentStatus {
    done 'Отгружен'
}

readonlyHeader (Shipment s) += WHEN status(s) = ShipmentStatus.done THEN TRUE;

available 'Доступный остаток' (ShipmentLine l) = 
    GROUP SUM available(Location loc, product(l)) IF level(loc, location(shipment(l)));

EXTEND FORM shipment
    PROPERTIES(s) validate SHOWIF status(s) = ShipmentStatus.ready, done READONLY 
    PROPERTIES(s) executionDate READONLY AFTER scheduledDate(s) SHOWIF done(s)
    PROPERTIES(l) done READONLYIF NOT status(s) = ShipmentStatus.ready BACKGROUND 
                       IF status(s) = ShipmentStatus.ready THEN RGB(198,230,247), available
;

EXTEND FORM shipments 
    EXTEND FILTERGROUP status
        FILTER 'Отгружен' status(s) = ShipmentStatus.done 'F7'
;

status(Shipment s) += WHEN done(s) THEN ShipmentStatus.done;

DESIGN shipment {                               
    statusActions {
        primary {                  
            MOVE PROPERTY(validate(s)) FIRST;
        }
    }
    status {
        MOVE PROPERTY(done(s));                              
    } 
    box1 {
        MOVE PROPERTY(executionDate(s));
    }                  
}