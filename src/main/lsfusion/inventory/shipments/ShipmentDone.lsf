MODULE ShipmentDone;

REQUIRE ShipmentReady;

NAMESPACE Inventory;

EXTEND CLASS ShipmentStatus {
    done 'Отгружен'
}
done 'Отгружен' = DATA BOOLEAN (Shipment);

status(Shipment s) += WHEN done(s) THEN ShipmentStatus.done;

executionDateTime 'Дата отгрузки' = DATA DATETIME (Shipment);
WHEN SET(done(Shipment s)) AND NOT CHANGED(executionDateTime(s)) DO executionDateTime(s) <- currentDateTime(); 
executionDateTime 'Дата отгрузки' (ShipmentLine l) = executionDateTime(shipment(l));

done 'Отгружено' = DATA NUMERIC[16,3] (ShipmentLine);

CONSTRAINT done(ShipmentLine l) < 0 OR done(l) > initialDemand(l) 
    MESSAGE 'Отгруженое количество должно быть от 0 до исходного';

setDone 'Заполнить Отгружено' (Shipment s) {
    done(ShipmentLine l) <- reserved(l) WHERE shipment(l) = s;    
}

extraValidate ABSTRACT LIST (Shipment);
validate 'Отгружен' (Shipment s) {   
    APPLY; // сохраняем изменения
    IF canceled() THEN RETURN; // если сработало ограничение, то выходим
    
    NEWSESSION {
        IF NOT immediate(s) THEN {
            extraValidate(s);
            
            IF NOT (GROUP SUM done(ShipmentLine l) IF shipment(l) = s) THEN
                ASK 'Не заполены отгруженые количества. Проставить ожидаемыми?' DO {
                    setDone(s);
                } ELSE RETURN;
            
            IF GROUP SUM 1 IF shipment(ShipmentLine l) = s AND NOT initialDemand(l) = done(l) THEN {
                ASK 'Отгружено не все количество. Создать дополнительную отгрузку?' DO {
                    NEW rn = Shipment {
                        type(rn) <- type(s);

                        scheduledDateTime(rn) <- scheduledDateTime(s);

                        customer(rn) <- customer(s);
                        
                        location(rn) <- location(s);
                        toLocation(rn) <- toLocation(s);
                        
                        note(rn) <- note(s);
                        
                        FOR shipment(ShipmentLine l) = s AND (q = initialDemand(l) (-) done(l)) DO NEW ln = ShipmentLine {
                            shipment(ln) <- rn;
                            product(ln) <- product(l);
                            initialDemand(ln) <- q;
                        }
                    }
                    
                    initialDemand(ShipmentLine l) <- done(l) WHERE shipment(l) = s;
                    
                    DELETE ShipmentLine l WHERE shipment(l) = s AND NOT done(l);
                }
            }
        }
        
        done(s) <- TRUE;
        APPLY;
    }
}

EXTEND FORM shipmentLines
    PROPERTIES(l) READONLY executionDateTime AFTER scheduledDateTime(l), done
;

toValidate (Shipment s) = status(s) = ShipmentStatus.ready OR (immediate(s) AND status(s) = ShipmentStatus.draft);

EXTEND FORM shipment
    PROPERTIES(s) validate SHOWIF toValidate(s), 
                  done,
                  setDone DRAW l TOOLBAR SHOWIF status(s) = ShipmentStatus.ready,
                  executionDateTime READONLY SHOWIF done(s)
    
    PROPERTIES(l) done BACKGROUND RGB(198,230,247) IF toValidate(s)
;

DESIGN shipment {                               
    primaryActions {                  
        MOVE PROPERTY(validate(s)) FIRST { fontStyle = 'bold'; }
    }
    status {
        MOVE PROPERTY(done(s));                              
    } 
    headerLeft {
        MOVE PROPERTY(executionDateTime(s));
    }                  
}

EXTEND FORM shipments
    PROPERTIES(s) READONLY executionDateTime AFTER scheduledDateTime(s)
 
    EXTEND FILTERGROUP status
        FILTER 'Отгружен' status(s) = ShipmentStatus.done 'F7'
;

// search
@defineDocSearchAction(shipment, product, done);
EXTEND FORM shipment
    PROPERTIES(s, itm) SHOWIF immediate(s) done ON CHANGE changeDone(s, itm)
;