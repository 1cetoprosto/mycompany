MODULE Adjustment;

REQUIRE Inventory, Location, Product, InvLedger;

NAMESPACE Inventory;

CLASS Adjustment 'Инвентаризация';

dateTime 'Дата' = DATA DATETIME (Adjustment);

location 'Место хранения' = DATA Location (Adjustment) NONULL;
nameLocation 'Место хранения' (Adjustment a) = name(location(a));

notes 'Примечания' = DATA ISTRING[50] (Adjustment);

CLASS AdjustmentLine 'Строка инвентаризации';

adjustment = DATA Adjustment (AdjustmentLine) NONULL DELETE;

product 'Товар' = DATA Product (AdjustmentLine);
nameProduct 'Товар' (AdjustmentLine l) = name(product(l));

location 'Место хранения' = DATA Location (AdjustmentLine);
nameLocation 'Место хранения' (AdjustmentLine l) = canonicalName(location(l));

theoreticalQuantity 'Теоретическое кол-во' = DATA NUMERIC[16,3] (AdjustmentLine);
realQuantity 'Фактическое кол-во' = DATA NUMERIC[16,3] (AdjustmentLine);

CLASS AdjustmentType 'Тип инвентаризации' {
    all 'Все',
    category 'По категории',
    manual 'Вручную'
}

WHEN LOCAL (CHANGED (location(AdjustmentLine l)) OR CHANGED (product(l))) AND location(l) AND product(l) DO {
    theoreticalQuantity(l) <- onHand(location(l), product(l));
    realQuantity(l) <- theoreticalQuantity(l);
}

name 'Имя' (AdjustmentType o) = staticCaption(o) IF o IS AdjustmentType CHARWIDTH 15;

type 'Тип'  =  DATA AdjustmentType (Adjustment) NONULL;
nameType 'Тип инвентаризации' (Adjustment a) = name(type(a));

category 'Категория' = DATA Category (Adjustment);
nameCategory 'Категория' (Adjustment a) = name(category(a));

readonly = ABSTRACT CASE BOOLEAN (AdjustmentLine);

FORM adjustment 'Инвентаризация'
    OBJECTS a = Adjustment PANEL 
    PROPERTIES(a) READONLY dateTime, nameLocation, nameType, notes, 
                            nameCategory SHOWIF type(a) = AdjustmentType.category 
    
    OBJECTS l = AdjustmentLine
    PROPERTIES(l) READONLYIF NOT (type(a) = AdjustmentType.manual) nameProduct, nameLocation, theoreticalQuantity 
    PROPERTIES(l) realQuantity READONLYIF readonly(l) 
    PROPERTIES(l) NEW SHOWIF type(a) = AdjustmentType.manual, DELETE SHOWIF type(a) = AdjustmentType.manual
    FILTERS adjustment(l) = a
    
    EDIT Adjustment OBJECT a
;

FORM type 'Тип инвентаризации'
    OBJECTS t = AdjustmentType PANEL
    PROPERTIES(t) 'Тип инвентаризации' = name
    
    EDIT AdjustmentType OBJECT t  
;

FORM adjustmentType 'Создать инвенторизацию'
    OBJECTS a = Adjustment PANEL 
    PROPERTIES(a) nameLocation, nameType
    PROPERTIES(a) nameCategory SHOWIF type(a) = AdjustmentType.category    
;

DESIGN adjustmentType {
    width = 700;
    OBJECTS {
        MOVE BOX(a) {
            PROPERTY (nameLocation(a)){notNull = TRUE;}
            PROPERTY (nameType(a)){notNull = TRUE;}
        }
    }
}

newAdjustment 'Инвентаризация' () {
    NEWSESSION {
        NEW na = Adjustment {
            DIALOG adjustmentType OBJECTS a = na DO { 
                dateTime(na) <- currentDateTime();
                FOR (level(Location loc, location(na)) AND onHand(loc, Product p)) AND 
                        (level(category(p), category(na)) OR NOT type(na) = AdjustmentType.category 
                        OR NOT type(na) = AdjustmentType.manual) DO {
                    NEW l = AdjustmentLine {
                        adjustment(l) <- na;
                        product(l) <- p;
                        location(l) <- loc;
                    }     
                }
                SHOW adjustment OBJECTS a = na;                
            }
        }
    }
}IMAGE 'add.png';

FORM adjustments 'Инвентаризации'
    OBJECTS a = Adjustment
    PROPERTIES(a) READONLY dateTime, nameLocation, notes
    PROPERTIES(a) NEWSESSION EDIT, DELETE 
    PROPERTIES newAdjustment() DRAW a TOOLBAR 
    
    LIST Adjustment OBJECT a
;

NAVIGATOR {
    operations {
        NEW adjustments;
    }
}

DESIGN adjustment {
    OBJECTS {
        NEW header {
            MOVE BOX (a);
        }
        NEW body {
            fill = 1;
            type = TABBED;
            NEW tab1 {
                caption = 'Список'; 
                MOVE BOX (l);
            }
        }
    }
}
