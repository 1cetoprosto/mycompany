MODULE Doc;

REQUIRE Authentication, Time, BarCode;

NAMESPACE Utils;

META defineDocSearch (doc, it, fun, let, check)
    quantity 'Кол-во' (###doc i, ###it p) = 
        GROUP SUM fun(###doc##Line l) BY doc(l), it(l);
    last###doc##Line 'Последняя строка' (###doc i, ###it p) = 
        GROUP LAST ###doc##Line l ORDER l BY doc(l), it(l);
        
        changeQuantity 'Изменить кол-во' (###doc i, ###it p) {
            INPUT q = NUMERIC[14,3] DO {
                IF last###doc##Line(i, p) THEN {
                    IF q THEN
                        fun(###doc##Line l) <- q IF l = last###doc##Line(i, p)
                            WHERE doc(l) = i AND it(l) = p;
                    ELSE
                        DELETE ###doc##Line l WHERE doc(l) = i AND it(l) == p;
                }ELSE
                    IF q THEN
                        NEW l = ###doc##Line{
                            doc(l) <- i;
                            it(l) <- p;
                            fun(l) <- q;
                        }
            }
        }
    
    EXTEND FORM doc
        TREE categories c = Category PARENT parent(c)
        PROPERTIES READONLY name(c)
        ORDER name(c)
        
        OBJECTS itm = ###it
        PROPERTIES(itm) READONLY name, idBarCode
        PROPERTIES(let, itm) quantity ON CHANGE changeQuantity(let, itm)
        FILTERS level(category(itm), c), ##check(itm)
        FILTERGROUP active
            FILTER 'Активный' active(itm) 'F10' DEFAULT  
    ;
    
    DESIGN doc {
        details {
            NEW search {
                showIf = NOT readonly(l);
                caption = 'Подбор';
                type = SPLITH;
                fill = 1;
                MOVE BOX(TREE categories);
                MOVE BOX(itm) { 
                    fill = 2;
                }
            }
        }
    }
END

META defineDocHistory(doc, let, class, fun)

    CLASS ###doc##History 'История изменений';
    
    ##doc = DATA ###doc (###doc##History);

    date 'Дата' = DATA DATETIME (###doc##History);
    user 'Пользователь' = DATA User (###doc##History) CHARWIDTH 15;
    nameUser 'Пользователь' (###doc##History l) = name(user(l));
    type 'Тип' = DATA ISTRING[100] (###doc##History);
    description 'Описание' = DATA TEXT (###doc##History);
     
    WHEN SETCHANGED(status(###doc let)) DO {     
        NEW l = ###doc##History {
            ##doc(l) <- let;
            date(l) <- currentDateTime();
            user(l) <- currentUser();
            type(l) <- 'Изменен статус';
            description (l) <- 'Изменен статус на ' + staticCaption(status(let));
        }
            
        
    }

    EXTEND FORM doc
        OBJECTS doc##l = ###doc##History
        PROPERTIES(doc##l) READONLY date, nameUser, type, description, pdescription = description PANEL
        FILTERS ##doc(doc##l) = let
    ;
    
    DESIGN doc {
        details {
            NEW history {
                caption = 'История';
                fill = 1;
                type = SPLITH;
                MOVE BOX(doc##l) { 
                    fill = 2;
                    PROPERTY(description(doc##l)) { valueHeight = 18; }
                }
                MOVE PROPERTY(pdescription) { panelCaptionAbove = TRUE; fill = 1; }
            }
        }
    }
    
    WHEN SETCHANGED(###doc##Line l IS ###doc##Line) AND ##doc(l) = ###doc ##let 
                        AND NOT status(##let) = ###doc##Status.draft DO {     
        NEW h = ###doc##History {
            ##doc(h) <- ##let;
            date(h) <- currentDateTime();
            user(h) <- currentUser();
            type(h) <- 'Добавлена строка';
            description (h) <- 'Добавлена строка с индексом ' + index(l);
        }
    }
    
    WHEN DROPPED(###doc##Line l IS ###doc##Line) AND PREV(##doc(l)) = ###doc ##let 
                        AND NOT status(##let) = ###doc##Status.draft DO {     
        NEW h = ###doc##History {
            ##doc(h) <- ##let;
            date(h) <- currentDateTime();
            user(h) <- currentUser();
            type(h) <- 'Удалена строка';
            description (h) <- 'Удалена строка с индексом ' + PREV(index(l));
        }
    }
    
    WHEN CHANGED(##fun(###doc##Line l)) AND ##doc(l) = ###doc ##let 
                        AND NOT status(##let) = ###doc##Status.draft DO {     
        NEW h = ###doc##History {
            ##doc(h) <- ##let;
            date(h) <- currentDateTime();
            user(h) <- currentUser();
            type(h) <- 'Изменено исходное кол-во';
            description (h) <- 'Изменено исходное кол-во продукта ' + name###class(l) + ' на ' + ##fun(l);
        }
    }
    
    WHEN CHANGED(name###class(###doc##Line l)) AND ##doc(l) = ###doc ##let 
                        AND NOT status(##let) = ###doc##Status.draft DO {     
        NEW h = ###doc##History {
            ##doc(h) <- ##let;
            date(h) <- currentDateTime();
            user(h) <- currentUser();
            type(h) <- 'Изменен продукт';
            description (h) <- 'Изменен продукт в строке ' + index(l) + ' на ' + name###class(l);
        }
    }
END
