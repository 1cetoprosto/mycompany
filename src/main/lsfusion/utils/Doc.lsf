MODULE Doc;

REQUIRE Authentication, Time, BarCode;

NAMESPACE Utils;

META defineStatus (doc, title)
   CLASS ###doc##Status 'Статус '##title {
       draft 'Черновик'
   }
   
   name 'Имя' (###doc##Status s) = staticCaption(s) IF s IS ###doc##Status CHARWIDTH 15;
   
   status 'Статус' = ABSTRACT CASE ###doc##Status (###doc);
   nameStatus 'Статус' (###doc d) = name(status(d));
   colorStatus 'Цвет' = ABSTRACT CASE COLOR (###doc);
   
   status(###doc d) += WHEN d IS ###doc THEN ###doc##Status.draft;
   colorStatus(###doc d) += WHEN status(d) == ###doc##Status.draft THEN RGB(187,242,210);

   isDraft (###doc d) = status(d) = ###doc##Status.draft;
END

META defineStatusForm (doc, let)
   EXTEND FORM ##doc##s
       PROPERTIES(##let) READONLY nameStatus BACKGROUND colorStatus(##let) BEFORE number(##let)
       FILTERGROUP status
           FILTER 'Черновик' status(##let) = ###doc##Status.draft 'F10'
   ;
   
   EXTEND FORM ##doc
       PROPERTIES(##let) nameStatus BACKGROUND colorStatus(##let)
   ;
   
   DESIGN ##doc {
       NEW statusPane FIRST {
           caption = 'Статусы';
           type = CONTAINERH;
           alignment = STRETCH;                          
           NEW statusActions {
               type = CONTAINERH;                    
               flex = 1; 
               NEW primaryActions {
                   type = CONTAINERH;
               }
               NEW secondaryActions {
                   type = CONTAINERH;
               }           
           }
           NEW status {
               type = CONTAINERH;
               MOVE PROPERTY(nameStatus(##let));
           }
       }    
   } 
END

META defineDocSearchAction (doc, it, fun, capt)
    fun capt (###doc i, ###it p) = 
        GROUP SUM fun(###doc##Line l) BY doc(l), it(l);
        
    change###fun (###doc i, ###it p) {
        INPUT q = NUMERIC[14,3] DO {
            IF last###doc##Line(i, p) THEN {
                IF q THEN
                    fun(###doc##Line l) <- q IF l = last###doc##Line(i, p)
                        WHERE doc(l) = i AND it(l) = p;
                ELSE
                    DELETE ###doc##Line l WHERE doc(l) = i AND it(l) == p;
            } ELSE
                IF q THEN
                    NEW l = ###doc##Line{
                        doc(l) <- i;
                        it(l) <- p;
                        fun(l) <- q;
                    }
        }
    }
END

META defineDocSearchTab (doc, it)
    EXTEND FORM doc
        TREE categories c = Category PARENT parent(c)
        PROPERTIES READONLY name(c)
        ORDER name(c)
        
        OBJECTS itm = ###it
        PROPERTIES(itm) READONLY name, nameUom, idBarCode, id
        PROPERTIES(itm) EDIT
        FILTERS level(category(itm), c)
        FILTERGROUP active
            FILTER 'Активный' active(itm) 'F10' DEFAULT  
    ;
    
    DESIGN doc {
        details {
            NEW search {
                caption = 'Подбор';
                type = SPLITH;
                fill = 1;
                MOVE BOX(TREE categories);
                MOVE BOX(itm) { 
                    fill = 2;
                }
            }
        }
    }
END

META defineDocSearch (doc, it, fun, capt, let)
    last###doc##Line (###doc i, ###it p) = GROUP LAST ###doc##Line l ORDER l BY doc(l), it(l);

    @defineDocSearchAction(doc, it, fun, capt);
    @defineDocSearchTab(doc, it);
    
    EXTEND FORM doc
        PROPERTIES(let, itm) fun ON CHANGE change###fun(let, itm)
    ;        
END

META defineDocSearch (doc, it, fun, capt, let, check)
    @defineDocSearch(doc, it, fun, capt, let);
    
    EXTEND FORM doc
        FILTERS ##check(itm)
    ;
END

META defineDocHistory(doc, let, class, fun)

    CLASS ###doc##History 'История изменений';
    
    ##doc = DATA ###doc (###doc##History);

    dateTime 'Дата' = DATA DATETIME (###doc##History);
    user 'Пользователь' = DATA User (###doc##History) CHARWIDTH 15;
    nameUser 'Пользователь' (###doc##History l) = name(user(l));
    type 'Тип' = DATA ISTRING[100] (###doc##History);
    description 'Описание' = DATA TEXT (###doc##History);
     
    WHEN SETCHANGED(status(###doc let)) DO {     
        NEW l = ###doc##History {
            ##doc(l) <- let;
            dateTime(l) <- currentDateTime();
            user(l) <- currentUser();
            type(l) <- 'Изменен статус';
            description (l) <- 'Изменен статус на ' + staticCaption(status(let));
        }
            
        
    }

    EXTEND FORM doc
        OBJECTS doc##l = ###doc##History
        PROPERTIES(doc##l) READONLY dateTime, nameUser, type, description, pdescription = description PANEL
        FILTERS ##doc(doc##l) = let
    ;
    
    DESIGN doc {
        details {
            NEW history {
                caption = 'История';
                fill = 1;
                type = SPLITH;
                MOVE BOX(doc##l) { 
                    fill = 2;
                    PROPERTY(description(doc##l)) { valueHeight = 18; }
                }
                MOVE PROPERTY(pdescription) { panelCaptionAbove = TRUE; fill = 1; }
            }
        }
    }
    
    WHEN SETCHANGED(###doc##Line l IS ###doc##Line) AND ##doc(l) = ###doc ##let 
                        AND NOT status(##let) = ###doc##Status.draft DO {     
        NEW h = ###doc##History {
            ##doc(h) <- ##let;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            type(h) <- 'Добавлена строка';
            description (h) <- 'Добавлена строка с индексом ' + index(l);
        }
    }
    
    WHEN DROPPED(###doc##Line l IS ###doc##Line) AND PREV(##doc(l)) = ###doc ##let 
                        AND NOT status(##let) = ###doc##Status.draft DO {     
        NEW h = ###doc##History {
            ##doc(h) <- ##let;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            type(h) <- 'Удалена строка';
            description (h) <- 'Удалена строка с индексом ' + PREV(index(l));
        }
    }
    
    WHEN CHANGED(##fun(###doc##Line l)) AND ##doc(l) = ###doc ##let 
                        AND NOT status(##let) = ###doc##Status.draft DO {     
        NEW h = ###doc##History {
            ##doc(h) <- ##let;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            type(h) <- 'Изменено исходное кол-во';
            description (h) <- 'Изменено исходное кол-во продукта ' + name###class(l) + ' на ' + ##fun(l);
        }
    }
    
    WHEN CHANGED(class(###doc##Line l)) AND ##doc(l) = ###doc ##let 
                        AND NOT status(##let) = ###doc##Status.draft DO {     
        NEW h = ###doc##History {
            ##doc(h) <- ##let;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            type(h) <- 'Изменен продукт';
            description (h) <- 'Изменен продукт в строке ' + index(l) + ' на ' + name###class(l);
        }
    }
END

META defineDocLineRelation(docTo, docFrom, capt, obj)
    docTo##Line = DATA ###docTo##Line (###docFrom##Line);
    
    in (###docTo i, ###docFrom s) = GROUP SUM 1 IF docTo(docTo##Line(###docFrom##Line l)) = i AND docFrom(l) = s MATERIALIZED; 
    
    count###docTo (###docFrom s) = GROUP SUM 1 IF in(###docTo i, s) MATERIALIZED;
    numberDate###docTo capt (###docFrom s) = GROUP CONCAT numberDate(###docTo i) IF in(i, s), ',' CHARWIDTH 30; 
    
    count###docFrom##Line (###docTo b) = GROUP SUM 1 IF docTo(docTo##Line(###docFrom##Line l)) = b;
    
    // form
    open###docTo (###docFrom s) { 
        FOR in(###docTo i, s) DO 
            edit(i); 
    }
    EXTEND FORM docFrom
        PROPERTIES(obj) numberDate###docTo ON CHANGE open###docTo(obj) SHOWIF count###docTo(obj)
    ;
    DESIGN docFrom {
        footer {
            MOVE PROPERTY(numberDate###docTo(obj));
        }
    }
    EXTEND FORM docFrom##s
        PROPERTIES(obj) READONLY numberDate###docTo
    ;
END