MODULE InvoicePrintRu;

REQUIRE InvoicePrint, InvoicePrintShipment, LegalEntityRu, UomRu,
        Individual, Location;

NAMESPACE Invoicing;

innCompany (Invoice i) = inn(company(i));
okpoCompany (Invoice i) = okpo(company(i));

innCustomer (Invoice i) = inn(customer(i));
okpoCustomer (Invoice i) = okpo(customer(i));

legalCodeUom (InvoiceLine l) = legalCode(uom(l));

EXTEND FORM printInvoice
    PROPERTIES(i) innCustomer, okpoCustomer
    
    PROPERTIES(l) legalCodeUom
;

// individuals

META defineIndividual (prop, caption, cls, obj, container)
    prop = DATA Individual (###cls);
    positionName###prop 'Отпуск разрешил' (###cls o) = positionName(prop(o)); 
    name###prop (###cls o) = name(prop(o)); 
    position###prop (###cls o) = position(prop(o));
     
    CONSTRAINT prop(###cls o) AND NOT type(legalEntity(prop(o))) = PartnerType.company 
        CHECKED BY prop[###cls] MESSAGE 'Должен быть наш работник';
    
    EXTEND FORM cls
        PROPERTIES(obj) positionName###prop 
    ;
    DESIGN cls {
        container {
            MOVE PROPERTY(positionName###prop(obj));
        }
    }
END

// location
DESIGN location {
    tabbedPane {
        NEW invoicePrint {
            caption = 'Печать накладных';
        }
    }
}

@defineIndividual(allowed, 'Отпуск разрешил', location, l, invoicePrint);
@defineIndividual(accountant, 'Главный (старший) бухгалтер', location, l, invoicePrint);
@defineIndividual(performed, 'Отпуск произвел', location, l, invoicePrint);

// invoice
DESIGN invoice {
    details {
        NEW invoicePrint {
            caption = 'Печать';
            showIf = countInvoiceTemplate(type(i));
        }
    }
}

@defineIndividual(allowed, 'Отпуск разрешил', invoice, i, invoicePrint);
@defineIndividual(accountant, 'Главный (старший) бухгалтер', invoice, i, invoicePrint);
@defineIndividual(performed, 'Отпуск произвел', invoice, i, invoicePrint);

WHEN LOCAL SETCHANGED(location(Invoice i)) DO {
    allowed(i) <- GROUP LAST allowed(Location parent) ORDER DESC level(location(i),parent);
    accountant(i) <- GROUP LAST accountant(Location parent) ORDER DESC level(location(i),parent);
    performed(i) <- GROUP LAST performed(Location parent) ORDER DESC level(location(i),parent);
}

// print

EXTEND FORM printInvoice
    PROPERTIES(i) positionAllowed, nameAllowed,
                  positionAccountant, nameAccountant,
                  positionPerformed, namePerformed 
;
