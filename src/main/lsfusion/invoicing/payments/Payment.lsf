MODULE Payment;

REQUIRE Invoicing, Account, Company, Time, InvoicingSettings;

NAMESPACE Invoicing;

CLASS Payment 'Платеж';

date 'Дата' = DATA DATETIME (Payment) NONULL;
date(Payment p) <- currentDateTime() WHEN SET(p IS Payment);

toAccount 'Счет (куда)' = DATA Account (Payment) NONULL;
toAccountNumber 'Номер счета (куда)' (Payment p) = number(toAccount(p));

toPartner 'Держатель счета (куда)' = DATA Partner (Payment) NONULL;
nameToPartner 'Держатель счета (куда)' (Payment p) = name(toPartner(p));

WHEN LOCAL CHANGED (toPartner(Payment p)) DO {
    toAccount(p) <- defaultAccount(toPartner(p));
}

fromAccount 'Счет (откуда)' = DATA Account (Payment) NONULL;
fromAccountNumber 'Номер счета (откуда)' (Payment p) = number(fromAccount(p));

fromPartner 'Держатель счета (откуда)' = DATA Partner (Payment) NONULL;
nameFromPartner 'Держатель счета (откуда)' (Payment p) = name(fromPartner(p));

WHEN LOCAL CHANGED (fromPartner(Payment p)) DO {
    fromAccount(p) <- defaultAccount(fromPartner(p));
}

amount 'Сумма' = DATA NUMERIC[14,2] (Payment) NONULL;

inAmount 'Доход' (Account a) = GROUP SUM amount(Payment p) IF toAccount(p) = a;
outAmount 'Расход' (Account a) = GROUP SUM amount(Payment p) IF fromAccount(p) = a;

balance 'Баланс' (Account a) = inAmount(a) (-) outAmount(a);

series 'Серия' = DATA STRING[2] (Payment);
number 'Номер' = DATA STRING[28] (Payment) NONULL;

WHEN SETCHANGED (Payment p IS Payment  AND numeratorPayment() AND NOT number(p)) DO {
    number(p) <- curStringValue(numeratorPayment());
    series(p) <- series(numeratorPayment());
    incrementValueSession(numeratorPayment());   
}

seriesNumber 'Серия/Номер' (Payment p) = CONCAT '/', series(p), number(p); 

isIncoming 'Входящий' (Payment p) = IF toPartner(p) IS Company THEN TRUE;
isOutgoing 'Входящий' (Payment p) = IF fromPartner(p) IS Company THEN TRUE;

amountLeft 'Остаток' = DATA NUMERIC[14,2] (Payment);

notes 'Примечания' = DATA ISTRING[50] (Payment);
reference 'Сылка' = DATA ISTRING[50] (Payment);

CONSTRAINT toAccount(Payment p) AND fromAccount(p) AND 
                NOT (holder(toAccount(p)) IS Company OR holder(fromAccount(p)) IS Company)
                CHECKED BY toAccount, fromAccount
                MESSAGE 'Один из счетов должен принадлежать компании';
                
CONSTRAINT toPartner(Payment p) AND fromPartner(p) AND 
                NOT (toPartner(p) IS Company OR fromPartner(p) IS Company)
                CHECKED BY toPartner, fromPartner
                MESSAGE 'Один из держателей счетов должен быть компанией';
    
CONSTRAINT (toPartner(Payment p) AND toAccount(p)) AND NOT (holder(toAccount(p)) = toPartner(p))
                CHECKED BY  toAccount
                MESSAGE  'Счет и держатель счета не совпадают';
                
CONSTRAINT (fromPartner(Payment p) AND fromAccount(p)) AND NOT (holder(fromAccount(p)) = fromPartner(p))
                CHECKED BY fromAccount
                MESSAGE  'Счет и держатель счета не совпадают';

FORM payment 'Платеж'
    OBJECTS p = Payment PANEL 
    PROPERTIES(p) date,  amount, amountLeft READONLY, reference, fromAccountNumber, nameFromPartner, 
                         toAccountNumber, nameToPartner, series, number, notes
               
    
    EDIT Payment OBJECT p
;

FORM payments 'Платежи'
    OBJECTS p = Payment
    PROPERTIES(p) READONLY date, fromAccountNumber, nameFromPartner, toAccountNumber, nameToPartner, 
                amount, amountLeft, reference, notes
    PROPERTIES (p) NEWSESSION NEW, EDIT, DELETE 
    
    LIST Payment OBJECT p
;

NAVIGATOR {
    invoicing {
        operations {
            NEW payments;
        }
    }
}

DESIGN payment {
    OBJECTS {
        NEW header {
            MOVE BOX (p);
        }
        NEW details {
            type = TABBED;
            fill = 1;
            NEW invoices {
                type = SPLITV;
                fill = 1;
                caption = 'Расходные накладные';
            }
            NEW bills {
                type = SPLITV;
                fill = 1;
                caption = 'Приходные накладные';
            }
        }
    }
}
