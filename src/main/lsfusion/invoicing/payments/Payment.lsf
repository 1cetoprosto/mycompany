MODULE Payment;

REQUIRE Invoicing, Account, Company, Time;

NAMESPACE Invoicing;

CLASS Payment 'Платеж';

date 'Дата' = DATA DATETIME (Payment) NONULL;
date(Payment p) <- currentDateTime() WHEN SET(p IS Payment);

toAccount 'Счет получателя' = DATA Account (Payment);
toAccountNumber 'Счет получателя' (Payment p) = number(toAccount(p));

toPartner 'Получатель' = DATA Partner (Payment) NONULL;
nameToPartner 'Получатель' (Payment p) = name(toPartner(p));

WHEN LOCAL CHANGED(toPartner(Payment p)) DO {
    toAccount(p) <- defaultAccount(toPartner(p));
}

fromAccount 'Счет плательщика' = DATA Account (Payment);
fromAccountNumber 'Счет плательщика' (Payment p) = number(fromAccount(p));

fromPartner 'Плательщик' = DATA Partner (Payment) NONULL;
nameFromPartner 'Плательщик' (Payment p) = name(fromPartner(p));

WHEN LOCAL CHANGED(fromPartner(Payment p)) DO {
    fromAccount(p) <- defaultAccount(fromPartner(p));
}

amount 'Сумма' = DATA NUMERIC[14,2] (Payment) NONULL;

inAmount 'Доход' (Account a) = GROUP SUM amount(Payment p) IF toAccount(p) = a;
outAmount 'Расход' (Account a) = GROUP SUM amount(Payment p) IF fromAccount(p) = a;

balance 'Баланс' (Account a) = inAmount(a) (-) outAmount(a);

series 'Серия' = DATA STRING[2] (Payment);
number 'Номер' = DATA STRING[28] (Payment) NONULL;

numeratorPayment 'Нумератор платежей' = DATA Numerator() CHARWIDTH 20;
nameNumeratorPayment 'Нумератор платежей' = name(numeratorPayment());

WHEN SETCHANGED(Payment p IS Payment  AND numeratorPayment() AND NOT number(p)) DO {
    number(p) <- curStringValue(numeratorPayment());
    series(p) <- series(numeratorPayment());
    incrementValueSession(numeratorPayment());   
}

EXTEND FORM options 
  PROPERTIES nameNumeratorPayment()
;

DESIGN options {
    OBJECTS {
        MOVE PROPERTY(nameNumeratorPayment());
    }
}

seriesNumber 'Серия/Номер' (Payment p) = CONCAT '/', series(p), number(p); 

isIncoming 'Входящий' (Payment p) = toPartner(p) IS Company;
isOutgoing 'Входящий' (Payment p) = fromPartner(p) IS Company;

notes 'Примечания' = DATA ISTRING[50] (Payment);
reference 'Ссылка' = DATA ISTRING[50] (Payment);

CONSTRAINT toAccount(Payment p) AND fromAccount(p) AND 
                NOT (holder(toAccount(p)) IS Company OR holder(fromAccount(p)) IS Company)
                CHECKED BY toAccount, fromAccount
                MESSAGE 'Один из счетов должен принадлежать компании';
                
CONSTRAINT toPartner(Payment p) AND fromPartner(p) AND 
                NOT (toPartner(p) IS Company OR fromPartner(p) IS Company)
                CHECKED BY toPartner, fromPartner
                MESSAGE 'Один из держателей счетов должен быть компанией';
    
CONSTRAINT (toPartner(Payment p) AND toAccount(p)) AND NOT (holder(toAccount(p)) = toPartner(p))
                CHECKED BY  toAccount
                MESSAGE  'Счет и держатель счета не совпадают';
                
CONSTRAINT (fromPartner(Payment p) AND fromAccount(p)) AND NOT (holder(fromAccount(p)) = fromPartner(p))
                CHECKED BY fromAccount
                MESSAGE  'Счет и держатель счета не совпадают';

FORM payment 'Платеж'
    OBJECTS p = Payment PANEL 
    PROPERTIES(p) date,  amount, reference, fromAccountNumber, nameFromPartner, 
                         toAccountNumber, nameToPartner, series, number, notes
               
    
    EDIT Payment OBJECT p
;

FORM payments 'Платежи'
    OBJECTS p = Payment
    PROPERTIES(p) READONLY date, fromAccountNumber, nameFromPartner, toAccountNumber, nameToPartner, 
                amount, reference, notes
    PROPERTIES(p) NEWSESSION NEW, EDIT, DELETE 
    
    LIST Payment OBJECT p
;

NAVIGATOR {
    invoicing {
        operations {
            NEW payments;
        }
    }
}

DESIGN payment {
    OBJECTS {
        NEW header {
            NEW options {
                caption = 'Данные';
                type = CONTAINERH;
                fill = 1;
                MOVE PROPERTY(date(p)); 
                MOVE PROPERTY(amount(p));
                MOVE PROPERTY(series(p));
                MOVE PROPERTY(number(p));
                MOVE PROPERTY(reference(p));    
            }
            NEW namesAndAccounts {
                type = CONTAINERH;
                fill = 1;
                NEW from {
                    type = CONTAINERH;
                    caption = 'Плательщик';
                    MOVE PROPERTY(nameFromPartner(p)) { notNull = TRUE; }
                    MOVE PROPERTY(fromAccountNumber(p));
                }
                NEW to { 
                    type = CONTAINERH;
                    caption = 'Получатель';
                    MOVE PROPERTY(nameToPartner(p)) { notNull = TRUE; }
                    MOVE PROPERTY(toAccountNumber(p));
                }
            } 
            NEW additions {
                caption = 'Дополнительно';
                type = CONTAINERH;
                fill = 1;
                MOVE PROPERTY(notes(p));
            }     
        }
        NEW details {
            type = TABBED;
            fill = 1;
            NEW invoices {
                type = SPLITV;
                fill = 1;
                caption = 'Расходные накладные';
            }
            NEW bills {
                type = SPLITV;
                fill = 1;
                caption = 'Приходные накладные';
            }
        }
    }
}
