MODULE Bill;

REQUIRE Invoicing, TaxItem, Account, Time, MetaTax, InvoicingSettings, PaymentTerms, ItemPurchase, PartnerSale;

NAMESPACE Invoicing;

CLASS Bill 'Приходная накладная';

date 'Дата накладной' = DATA DATETIME (Bill) NONULL IN id;

WHEN LOCAL SET (Bill b IS Bill) DO {
    date(b) <- currentDateTime();
}

dueDate 'Дата к оплате' = DATA DATETIME (Bill);

partner 'Партнер' = DATA Partner (Bill) NONULL;
namePartner 'Партнер' (Bill b) = name(partner(b));

partnerAccount 'Счет партнера'  = DATA Account(Bill);

CONSTRAINT partner(Bill b) AND NOT isVendor(partner(b)) 
                CHECKED BY partner
                MESSAGE 'Партнер должен быть вендором';

WHEN LOCAL CHANGED (partner(Bill b)) DO {
    partnerAccount(b) <- defaultAccount(partner(b));
}

partnerAccountNumber 'Счет партнера' (Bill b) = number(partnerAccount(b));

CONSTRAINT partnerAccount(Bill b) AND NOT partner(b) = holder(partnerAccount(b))
    CHECKED BY partnerAccount
    MESSAGE 'Счет должен принадлежать выбранному партнеру';
    
vendorReference 'Код поставщика' = DATA STRING[30] (Bill);

notes 'Примечания' = DATA ISTRING[50] (Bill);

series 'Серия' = DATA STRING[2] (Bill);
number 'Номер' = DATA STRING[28] (Bill) NONULL;

WHEN SETCHANGED (Bill b IS Bill  AND numeratorBill() AND NOT number(b)) DO {
    number(b) <- curStringValue(numeratorBill());
    series(b) <- series(numeratorBill());
    incrementValueSession(numeratorBill());   
}

seriesNumber 'Серия/Номер' (Bill b) = CONCAT '/', series(b), number(b);

paymentTerms 'Условия оплаты' = DATA PaymentTerm (Bill); 
namePaymentTerms 'Условия оплаты' (Bill b) = name(paymentTerms(b));

WHEN LOCAL SETCHANGED (paymentTerms(Bill b)) AND date(b) DO {
    dueDate(b) <- sumDay(date(b), days(paymentTerms(b)));
}

CLASS BillLine 'Строка накладной';

bill 'Приходная накладная' = DATA Bill (BillLine) NONULL DELETE;

item 'Номенклатура' = DATA Item (BillLine);
nameItem 'Номенклатура' (BillLine l) = name(item(l)) IN id;

quantity 'Кол-во' = DATA NUMERIC[16,3] (BillLine) NONULL;
unitPrice 'Цена за штуку' = DATA NUMERIC[10,2] (BillLine) NONULL;

WHEN LOCAL SETCHANGED (item(BillLine l)) AND cost(item(l)) DO {
    unitPrice(l) <- cost(item(l));
}

index 'Индекс' = PARTITION SUM 1 ORDER BillLine l BY bill(l) IN id MATERIALIZED;

readonly = ABSTRACT CASE BOOLEAN (BillLine);
readonly = ABSTRACT CASE BOOLEAN (Bill);

CONSTRAINT item(BillLine l) AND NOT canBePurchased(item(l))
            CHECKED BY item 
            MESSAGE 'Наменклатура не предназначена для закупки';

// налоги
@defineTaxCalc(bill, b);

FORM bill 'Приходная накладная'
    OBJECTS  b = Bill PANEL 
    PROPERTIES(b) READONLYIF readonly(b) date, dueDate, namePartner, partnerAccountNumber, 
                                series, number, vendorReference, notes, namePaymentTerms
        
    OBJECTS l = BillLine
    PROPERTIES(l) READONLYIF readonly(l) nameItem, quantity, unitPrice, taxes ON CHANGE changeTax(l), NEW, DELETE 
    FILTERS bill(l) = b

    EDIT Bill OBJECT b;
;

copyBill 'Копировать' (Bill b)  { 
    NEWSESSION {
        NEW nb = Bill {
            partner(nb) <- partner(b);
            notes(nb) <- notes(b);
            FOR bill(BillLine l) = b INLINE NEW nl = BillLine DO {
                bill(nl) <- nb;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
            }
            SHOW bill OBJECTS b = nb DOCKED;
        }
    }
}

EXTEND FORM bill
    PROPERTIES(b) copyBill
;
    
DESIGN bill {
    OBJECTS {
        NEW statusPane FIRST {
            caption = 'Статусы';
            type = CONTAINERH;
            alignment = STRETCH;                          
            NEW statusActions {
                type = CONTAINERH;                    
                flex = 1; 
                NEW primary {
                    type = CONTAINERH;
                }
                NEW  secondary {
                    type = CONTAINERH;
                    MOVE PROPERTY (copyBill(b));  
                }          
            }
        }
        NEW header{
            MOVE BOX (b);
            PROPERTY (namePartner(b)) {notNull = TRUE;}
        }
        NEW details{
            fill = 1;
            type = TABBED;
            NEW box {
                caption = 'Строка накладной';
                fill = 1;
                MOVE BOX (l);
                NEW pane {
                    type = CONTAINERH;
                    fill = 1;
                }
            }
        }
    }
}

addBill 'Накладная' () {
    NEWSESSION {
        NEW b = Bill {
            SHOW bill OBJECTS b = b;  
        }
    }
}IMAGE 'add.png';

FORM bills 'Приходная накладная'
    OBJECTS b = Bill
    PROPERTIES(b) READONLY date, dueDate, namePartner, notes     
    PROPERTIES(b) NEWSESSION EDIT
    PROPERTIES(b) NEWSESSION READONLYIF readonly(b) DELETE
    PROPERTIES addBill() DRAW b TOOLBAR
           
    LIST Bill OBJECT b;
;
    
NAVIGATOR {
    invoicing {
        operations {
            NEW bills;
        }
    }
}

@defineTaxForm(bill, b);