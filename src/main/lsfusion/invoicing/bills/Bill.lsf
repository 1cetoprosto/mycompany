MODULE Bill;

REQUIRE InvoicingSettings, TaxItem, BankAccount, Time, MetaTax, ItemPurchase, PartnerPurchase, Company,
        BarCode, MetaNumerator, Doc;

NAMESPACE Invoicing;

CLASS Bill 'Приходная накладная';

// date
date 'Дата' = DATA DATETIME (Bill) NONULL IN id;
WHEN LOCAL SET (Bill b IS Bill) DO date(b) <- currentDateTime();

@defineSeriesNumber(bill, 'Приходная накладная', 'ПН');


// vendor
vendor 'Поставщик' = DATA Partner (Bill) NONULL;
nameVendor 'Поставщик' (Bill b) = name(vendor(b));
CONSTRAINT vendor(Bill b) AND NOT isVendor(vendor(b)) 
                CHECKED BY vendor
                MESSAGE 'Контрагент должен быть поставщиком';

// company
company 'Компания' = DATA Company (Bill) NONULL;
nameCompany 'Компания' (Bill b) = name(company(b));
WHEN LOCAL SET(Bill b IS Bill) AND NOT CHANGED(company(b)) DO company(b) <- defaultCompany(); 

// payment
dueDate 'Оплатить до' = DATA DATETIME (Bill);

// partner account
vendorAccount 'Счет поставщика' = DATA Account (Bill);
nameVendorAccount 'Счет поставщика' (Bill b) = name(vendorAccount(b));
WHEN LOCAL CHANGED (vendor(Bill b)) DO vendorAccount(b) <- defaultAccount(vendor(b));

CONSTRAINT vendorAccount(Bill b) AND NOT vendor(b) = holder(vendorAccount(b))
    CHECKED BY vendorAccount
    MESSAGE 'Счет должен принадлежать выбранному контрагенту';

// company account
companyAccount 'Счет компании' = DATA Account (Bill);
nameCompanyAccount 'Счет компании' (Bill b) = name(companyAccount(b));
WHEN LOCAL CHANGED(company(Bill b)) DO companyAccount(b) <- defaultAccount(company(b));

CONSTRAINT companyAccount(Bill b) AND NOT company(b) = holder(companyAccount(b))
    CHECKED BY companyAccount
    MESSAGE 'Счет должен принадлежать выбранной компании';

vendorReference 'Код поставщика' = DATA STRING[30] (Bill);
sourceDocument 'Основание' = DATA STRING[30] (Bill);
note 'Примечание' = DATA ISTRING[50] (Bill);

// lines
CLASS BillLine 'Строки документа';

bill 'Приходная накладная' = DATA Bill (BillLine) NONULL DELETE;

index 'Индекс' = PARTITION SUM 1 ORDER BillLine l BY bill(l) IN id MATERIALIZED;

item 'Номенклатура' = DATA Item (BillLine) NONULL;
nameItem 'Номенклатура' (BillLine l) = name(item(l)) IN id;
idBarCodeItem 'Штрих код' (BillLine l) = idBarCode(item(l));
idItem 'Код' (BillLine l) = id(item(l));

CONSTRAINT item(BillLine l) AND NOT canBePurchased(item(l))
            CHECKED BY item 
            MESSAGE 'Номенклатура не предназначена для закупки';

unitMeasure = DATA ItemMeasure (BillLine);
nameUnitMeasure 'Ед. изм.' (BillLine l) = name(unitMeasure(l));

description 'Описание' = DATA STRING (BillLine); 

quantity 'Кол-во' = DATA NUMERIC[16,3] (BillLine) NONULL;
unitPrice 'Цена за штуку' = DATA NUMERIC[10,2] (BillLine) NONULL;

WHEN LOCAL SETCHANGED(item(BillLine l)) AND NOT CHANGED(unitPrice(l)) DO unitPrice(l) <- cost(item(l));

// taxes
@defineTaxCalc(bill, b, purchase);

// readonly
readonly = ABSTRACT CASE BOOLEAN (Bill);
readonly = ABSTRACT CASE BOOLEAN (BillLine);

// Line properties
date 'Дата накладной' (BillLine l) = date(bill(l));
nameVendor 'Поставщик' (BillLine l) = nameVendor(bill(l));
nameCompany 'Компания' (BillLine l) = nameCompany(bill(l));

FORM bill 'Приходная накладная'
    OBJECTS  b = Bill PANEL 
    PROPERTIES(b) READONLYIF readonly(b) 
                             date, series, number, 
                             nameVendor, nameCompany, sourceDocument,
                             dueDate, nameVendorAccount, nameCompanyAccount,
                             vendorReference, note
        
    OBJECTS l = BillLine
    PROPERTIES(l) READONLYIF readonly(l) index, nameItem, description, nameUnitMeasure, idBarCodeItem, idItem, quantity, 
                        unitPrice, taxes ON CHANGE changeTax(l), NEW, DELETE 
    FILTERS bill(l) = b

    EDIT Bill OBJECT b
;

DESIGN bill {
    OBJECTS {
        NEW header {
            alignment = STRETCH;    
            type = CONTAINERH;
            NEW headerLeft {
                MOVE PROPERTY(date(b));
                NEW seriesNumber { 
                    type = CONTAINERH; 
                    MOVE PROPERTY(series(b)); 
                    MOVE PROPERTY(number(b));
                }
            }
            NEW headerRight {
                MOVE PROPERTY(nameVendor(b))  { notNull = TRUE; }
                MOVE PROPERTY(nameCompany(b)) { notNull = TRUE; }           
                MOVE PROPERTY(sourceDocument(b));           
            }
            NEW relatedDoc {
                fill = 1;
                type = TABBED;
            }
        }
        NEW details {
            fill = 5;
            type = TABBED;
            NEW lines {
                caption = 'Строки';
                MOVE BOX(l) { 
                    fill = 3;
                    PROPERTY(nameItem(l)) { notNull = TRUE; } 
                }
                NEW linesFooter {                     
                    type = CONTAINERH;
                    fill = 1;
                }
            }
            NEW otherInformation {
                caption = 'Прочая информация';
                type = COLUMNS;
                columns = 2;
                NEW payment {
                    caption = 'Оплата';
                    MOVE PROPERTY(dueDate(b)); 
                    MOVE PROPERTY(nameCompanyAccount(b));
                    MOVE PROPERTY(nameVendorAccount(b));              
                }           
                NEW billInformat {
                    caption = 'Прочие';
                    MOVE PROPERTY(vendorReference(b)); 
                    MOVE PROPERTY(note(b));
                }
            }
        }
    }
}

FORM bills 'Приходные накладные'
    OBJECTS b = Bill
    PROPERTIES(b) READONLY date, dueDate, nameVendor, note         
    PROPERTIES(b) NEWSESSION NEW, EDIT, DELETE READONLYIF readonly(b)
           
    LIST Bill OBJECT b;

NAVIGATOR {
    operations {
        NEW bills FIRST;
    }
}

@defineTaxForm(bill, b);
@defineBarCodeAdd(bill, b, item);

@defineStatus(bill, 'счета', b);
@defineDocHistory(bill, b, item, quantity);

nameStatus 'Статус' (BillLine l) = nameStatus(bill(l));
readonly (BillLine l) += WHEN NOT status(bill(l)) = BillStatus.draft THEN TRUE;

@defineDocSearch(bill, item, quantity, b, canBePurchased);

// copy
copy 'Копировать' (Bill b)  { 
    NEWSESSION {
        NEW nb = Bill {
            vendor(nb) <- vendor(b);
            note(nb) <- note(b);
            FOR bill(BillLine l) = b INLINE NEW nl = BillLine DO {
                bill(nl) <- nb;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
            }
            SHOW bill OBJECTS b = nb DOCKED;
        }
    }
}
EXTEND FORM bill PROPERTIES(b) copy;

DESIGN bill {
    secondaryActions {
        MOVE PROPERTY(copy(b)); 
    }
}