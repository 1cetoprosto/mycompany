MODULE Bill;

REQUIRE InvoicingSettings, TaxItem, Account, Time, MetaTax, ItemPurchase, PartnerPurchase, Company,
            BarCode, MetaNumerator;

NAMESPACE Invoicing;

CLASS Bill 'Приобретение товаров и услуг';

date 'Дата приобретения' = DATA DATETIME (Bill) NONULL IN id;

WHEN LOCAL SET (Bill b IS Bill) DO {
    date(b) <- currentDateTime();
}

dueDate 'Дата к оплате' = DATA DATETIME (Bill);

partner 'Партнер' = DATA Partner (Bill) NONULL;
namePartner 'Партнер' (Bill b) = name(partner(b));

partnerAccount 'Счет партнера'  = DATA Account(Bill);

CONSTRAINT partner(Bill b) AND NOT isVendor(partner(b)) 
                CHECKED BY partner
                MESSAGE 'Партнер должен быть поставщиком';

WHEN LOCAL CHANGED (partner(Bill b)) DO {
    partnerAccount(b) <- defaultAccount(partner(b));
}

partnerAccountNumber 'Счет партнера' (Bill b) = number(partnerAccount(b));

CONSTRAINT partnerAccount(Bill b) AND NOT partner(b) = holder(partnerAccount(b))
    CHECKED BY partnerAccount
    MESSAGE 'Счет должен принадлежать выбранному партнеру';
    
company 'Компания' = DATA Partner (Bill) NONULL;
nameCompany 'Компания' (Bill b) = name(company(b));

WHEN LOCAL SET(Bill b IS Bill) DO {
    IF ((GROUP SUM 1 IF Partner p IS Company) = 1) THEN {
        FOR Partner p IS Company DO {
            company(b) <- p;
        }
    }
}

companyAccount 'Счет компании' = DATA Account (Bill);
companyAccountNumber 'Счет компании' (Bill b) = number(companyAccount(b));

WHEN LOCAL CHANGED(company(Bill b)) DO {
    companyAccount(b) <- defaultAccount(company(b));
}

CONSTRAINT companyAccount(Bill b) AND NOT company(b) = holder(companyAccount(b))
    CHECKED BY companyAccount
    MESSAGE 'Счет должен принадлежать выбранной компании';

CONSTRAINT company(Bill b) AND NOT company(b) IS Company
    CHECKED BY company
    MESSAGE 'Счет должен принадлежать компании';
    
vendorReference 'Код поставщика' = DATA STRING[30] (Bill);

notes 'Примечания' = DATA ISTRING[50] (Bill);

@defineSeriesNumber(bill, 'Приобретение товаров и услуг', 'ПТ');

sourceDocument 'Исходный документ' = DATA STRING[10] (Bill);

CLASS BillLine 'Строки документа';

bill 'Приобретение товаров и услуг' = DATA Bill (BillLine) NONULL DELETE;

item 'Номенклатура' = DATA Item (BillLine);
nameItem 'Номенклатура' (BillLine l) = name(item(l)) IN id;
unitMeasure 'Ед.изм.' = DATA ItemMeasure (BillLine);
nameUnitMeasure 'Ед.изм.' (BillLine l) = name(unitMeasure(l));
idBarCode 'Штрих код' (BillLine l) = idBarCode(item(l));
id 'Код' (BillLine l) = id(item(l));
description 'Описание' = DATA STRING (BillLine); 

quantity 'Кол-во' = DATA NUMERIC[16,3] (BillLine) NONULL;
unitPrice 'Цена за штуку' = DATA NUMERIC[10,2] (BillLine) NONULL;

WHEN LOCAL SETCHANGED(item(BillLine l)) AND cost(item(l)) DO {
    unitPrice(l) <- cost(item(l));
}

index 'Индекс' = PARTITION SUM 1 ORDER BillLine l BY bill(l) IN id MATERIALIZED;

readonly = ABSTRACT CASE BOOLEAN (BillLine);
readonly = ABSTRACT CASE BOOLEAN (Bill);

CONSTRAINT item(BillLine l) AND NOT canBePurchased(item(l))
            CHECKED BY item 
            MESSAGE 'Наменклатура не предназначена для закупки';

date 'Дата накладной' (BillLine l) = date(bill(l));
partner 'Партнер' (BillLine l) = partner(bill(l));
namePartner 'Партнер' (BillLine l) = namePartner(bill(l));
nameCompany 'Компания' (BillLine l) = nameCompany(bill(l));

// налоги
@defineTaxCalc(bill, b, purchase);

CLASS BillType 'Тип документа' {
    bill 'Приобретение'
}

name 'Имя' (BillType b) = staticCaption(b) IF b IS BillType CHARWIDTH 20;
type 'Тип' = ABSTRACT CASE BillType (Bill);
type (Bill b) += WHEN TRUE AND b IS Bill THEN BillType.bill;
nameType 'Тип' (Bill b) = name(type(b));

colorType 'Цвет' = ABSTRACT CASE COLOR (Bill);
colorType (Bill b) += WHEN type[Bill](b) == BillType.bill THEN RGB(255,255,255);

FORM bill 'Документ приобретение'
    OBJECTS  b = Bill PANEL 
    PROPERTIES(b) READONLYIF readonly(b) nameType BACKGROUND colorType(b), date, dueDate, namePartner, partnerAccountNumber, sourceDocument,
                             nameCompany, companyAccountNumber, seriesNumber, vendorReference, notes
        
    OBJECTS l = BillLine
    PROPERTIES(l) READONLYIF readonly(l) index, nameItem, nameUnitMeasure, idBarCode, id, description, quantity, 
                        unitPrice, taxes ON CHANGE changeTax(l), NEW, DELETE 
    FILTERS bill(l) = b

    EDIT Bill OBJECT b;
;

copyBill 'Копировать' (Bill b)  { 
    NEWSESSION {
        NEW nb = Bill {
            partner(nb) <- partner(b);
            notes(nb) <- notes(b);
            FOR bill(BillLine l) = b INLINE NEW nl = BillLine DO {
                bill(nl) <- nb;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
            }
            SHOW bill OBJECTS b = nb DOCKED;
        }
    }
}

EXTEND FORM bill
    PROPERTIES(b) copyBill
;
    
DESIGN bill {
    OBJECTS {
        NEW statusPane FIRST {
            caption = 'Статусы';
            type = CONTAINERH;
            alignment = STRETCH;                          
            NEW statusActions {
                type = CONTAINERH;                    
                flex = 1; 
                NEW primary {
                    type = CONTAINERH;
                }
                NEW secondary {
                    type = CONTAINERH;
                    MOVE PROPERTY(copyBill(b));  
                }          
            }
            NEW status {
                type = CONTAINERH;
            }
        }
        NEW header{
            type = CONTAINERH;            
            NEW box1 {
                fill = 3;
                NEW company {
                    fill = 1;
                    MOVE PROPERTY(nameCompany(b)) { notNull = TRUE; caption = 'Компания получатель'; }           
                }
                NEW title {            
                    fill = 1;
                    MOVE PROPERTY(nameType(b)) { caption = 'Тип документа'; };             
                    NEW dateNumber {                
                        type = CONTAINERH;
                        MOVE PROPERTY(date(b)) { caption = 'Дата'; };
                        MOVE PROPERTY(seriesNumber(b)) { caption = 'Номер'; };
                    }
                }
                NEW partner {
                    fill = 1;
                    type = CONTAINERH;
                    MOVE PROPERTY(namePartner(b))  { caption = 'Поставщик'; notNull = TRUE; }
                    MOVE PROPERTY(vendorReference(b)) { caption = 'Номер поставщика'; fill = 1; charWidth = 10; };
                }
            }
            NEW additions {            
                fill = 1;
                caption = 'Дополнительно';
                MOVE PROPERTY(sourceDocument(b)) { caption = 'Создан из'; }; 
                MOVE PROPERTY(notes(b));
            }
            NEW payment {
                fill = 1;
                caption = 'Оплата';
                MOVE PROPERTY(dueDate(b)) { caption = 'Срок оплаты      '; } 
                MOVE PROPERTY(companyAccountNumber(b)) { caption = 'р/сч для оплаты'; }
                MOVE PROPERTY(partnerAccountNumber(b)) { caption = 'р/сч поставщика'; }              
            }           
        }
        NEW details{
            fill = 5;
            type = TABBED;
            NEW box {
                caption = 'Содержание документа';
                type = SPLITV;
                fill = 1;
                MOVE BOX(l) { fill = 2; }
                NEW pane {                     
                    type = CONTAINERH;
                    fill = 1;
                }
            }
        }
    }
}

addBill 'Документ' () {
    NEWSESSION {
        NEW b = Bill {
            SHOW bill OBJECTS b = b;  
        }
    }
}IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;

FORM bills 'Приобретение товаров и услуг'
    OBJECTS b = Bill
    PROPERTIES(b) READONLY nameType BACKGROUND colorType(b), date, dueDate, namePartner, notes         
    PROPERTIES(b) NEWSESSION EDIT
    PROPERTIES(b) NEWSESSION READONLYIF readonly(b) DELETE
    PROPERTIES addBill() DRAW b TOOLBAR
           
    LIST Bill OBJECT b;
;
    
NAVIGATOR {
    invoicing {
        operations {
            NEW bills FIRST;
        }
    }
}

@defineTaxForm(bill, b);

@defineBarCodeAdd(bill, b, item);