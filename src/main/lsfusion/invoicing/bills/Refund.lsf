MODULE Refund;

REQUIRE BillOutstandingCredit, BillDone;

NAMESPACE Invoicing;

CLASS Refund 'Акт возврата' : Bill;
isRefund 'Акт возврата' (Bill b) = b IS Refund;

// type
EXTEND CLASS BillType  {
    refund 'Возврат'
}

type (Bill b) +=  WHEN isRefund(b) THEN BillType.refund;
colorType (Refund r) += WHEN type[Bill](r) = BillType.refund THEN RGB(250,67,71);

// add
addRefund 'Создать возврат' (Bill b) {
    APPLY; 
    IF canceled() THEN RETURN;
    
    NEWSESSION { 
        NEW ni = Refund {
            date[Bill](ni) <- currentDateTime();
            vendor[Bill](ni) <- vendor(b);
            vendorAccount(ni) <- vendorAccount(b);
            company(ni) <- company(b);
            companyAccount(ni) <- companyAccount(b);
            notes(ni) <- notes(b);
            FOR bill(BillLine l) = b INLINE NEW nl = BillLine DO {
                bill(nl) <- ni;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
                FOR in(l, Tax t) DO {
                    in(nl,t) <- in(l,t);
                }
            }
            SHOW bill OBJECTS b = ni DOCKED;
        }
        
    }
}

EXTEND FORM bill
    PROPERTIES(b) addRefund SHOWIF ready(b) AND NOT isRefund(b)
;

DESIGN bill {
    secondaryActions {
        MOVE PROPERTY(addRefund(b));
    }               
}

addRefund 'Возврат' () {
    NEWSESSION {
        NEW r = Refund {
            SHOW bill OBJECTS b = r;  
        }
    }
} IMAGE 'add.png';

EXTEND FORM bills
    PROPERTIES addRefund() DRAW b TOOLBAR
;

// match
canBeMatched(Refund r, Bill b) = 
            vendor[BillOutstandingCredit](r) = vendor(b) 
            AND amountLeft(r) > 0 
            AND NOT r = b 
            AND status(b) = BillStatus.ready 
            AND NOT isRefund(b);
canBeMatched(Refund r, Bill b) += canBeMatched(r, b);

EXTEND FORM bill
    OBJECTS bi = Bill
    PROPERTIES(bi) READONLY date, number, nameType
    PROPERTIES paid(b, bi)
    FILTERS paid(b, bi), NOT b = bi
    
    OBJECTS bil = Bill
    PROPERTIES(bil) READONLY date, number, nameType, toPay
    PROPERTIES setPaid(b, bil) DRAW bil TOOLBAR
    FILTERS canBeMatched[Refund, Bill](b, bil)
;

DESIGN bill {
    details {
        NEW creditInvoices {
            caption = 'Накладные';
            showIf = b IS Refund;
            MOVE BOX(bi) { caption = 'Разнесенные'; }
            MOVE BOX(bil) { caption = 'Доступные'; }
        }
    }
}

// outstanding credit
amountLeft 'Остаток' (Refund r) = totalAmount(r) (-) billed(r);

EXTEND CLASS Refund : BillOutstandingCredit;
date(Refund c) += date[Bill](c);
number(Refund c) += number[Bill](c);
vendor (Refund c) += vendor[Bill](c);

EXTEND CLASS BillOutstandingCreditType {
    creditNote 'Возврат'
}
type[BillOutstandingCredit](Refund r) += BillOutstandingCreditType.creditNote IF r IS Refund;

amount(Refund c) += totalAmount(c);
amountLeft(Refund c) += amountLeft(c);
