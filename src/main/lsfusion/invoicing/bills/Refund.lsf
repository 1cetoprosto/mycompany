MODULE Refund;

REQUIRE BillOutstandingCredit, BillDone;

NAMESPACE Invoicing;

CLASS Refund 'Акт возврата' : Bill;
isRefund 'Акт возврата' (Bill b) = b IS Refund;
amountLeft 'Остаток' (Refund r) = totalAmount(r) (-) billed(r);

EXTEND CLASS Refund : BillOutstandingCredit;
amount(Refund c) += totalAmount(c);
amountLeft(Refund c) += amountLeft(c);
partner (Refund c) += partner[Bill](c);
date(Refund c) += date[Bill](c);
number(Refund c) += number[Bill](c);

CLASS BillType 'Тип накладной' {
    bill 'Накладная',
    refund 'Возврат'
}

name 'Имя' (BillType o) = staticCaption(o) IF o IS BillType CHARWIDTH 10;

type 'Тип' (Bill b)=  IF(isRefund(b)) THEN BillType.refund
                        ELSE BillType.bill;
nameType 'Тип' (Bill b) = name(type(b));

type(Refund c) += ISTRING[30](nameType[Bill](c));

typeColor (Refund r) = IF type[Bill](r) = BillType.refund THEN RGB(250,67,71);

canBeMatched(Refund r, Bill b) = 
            partner[BillOutstandingCredit](r) = partner(b) 
            AND amountLeft(r) > 0 
            AND NOT r = b 
            AND status(b) = BillStatus.ready 
            AND NOT isRefund(b);
canBeMatched(Refund r, Bill b) += canBeMatched(r, b);

EXTEND FORM bill
    PROPERTIES(b) nameType BACKGROUND typeColor(b)
;

EXTEND FORM bills
    PROPERTIES(b) nameType AFTER nameStatus(b) BACKGROUND typeColor(b)
;

refund 'Создать возврат' (Bill b) {
    APPLY; 
    IF canceled() THEN RETURN;
    
    NEWSESSION { 
        NEW ni = Refund {
            date[Bill](ni) <- currentDateTime();
            partner[Bill](ni) <- partner(b);
            notes(ni) <- notes(b);
            FOR bill(BillLine l) = b INLINE NEW nl = BillLine DO {
                bill(nl) <- ni;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
                FOR in(l, Tax t) DO {
                    in(nl,t) <- in(l,t);
                }
            }
            SHOW bill OBJECTS b = ni DOCKED;
        }
        
    }
}

EXTEND FORM bill
    PROPERTIES(b) refund SHOWIF status(b) = BillStatus.ready AND NOT isRefund(b)
;

DESIGN bill {
    statusActions {
        primary {
            MOVE PROPERTY(refund(b));
        }               
    }   
}

EXTEND FORM bill
    OBJECTS bi = Bill
    PROPERTIES(bi) READONLY date, number, nameType
    PROPERTIES READONLY paid(b, bi)
    FILTERS paid(b, bi), NOT b = bi
    
    OBJECTS bil = Bill
    PROPERTIES(bil) READONLY date, number, nameType, toPay
    PROPERTIES addBillPayment(b, bil) DRAW bil TOOLBAR
    FILTERS canBeMatched[Refund, Bill](b, bil)
;

DESIGN bill {
    statusActions {
        primary {
            MOVE PROPERTY(refund(b));
        }                
    }
    
    pane {
        NEW outstandingCreditPane BEFORE total{
            type = TABBED;
            fill = 1;
            MOVE outstandingCredit;
            NEW creditInvoices {
                caption = 'Накладные';
                showIf = b IS Refund;
                MOVE BOX(bi);
                MOVE BOX(bil);
            }
        }
    }
}

addRefund 'Возврат' () {
    NEWSESSION {
        NEW r = Refund {
            SHOW bill OBJECTS b = r;  
        }
    }
} IMAGE 'add.png';

EXTEND FORM bills
    PROPERTIES addRefund() DRAW b TOOLBAR
;
