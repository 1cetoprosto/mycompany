MODULE Refund;

REQUIRE BillPayment, BillCanceled, BillOutstandingCredit;

NAMESPACE Invoicing;

CLASS Refund 'Акт возврата' : Bill;
isRefund 'Акт возврата' (Bill b) = b IS Refund;

EXTEND CLASS Refund : BillOutstandingCredit;
amount(Refund c) += totalAmount(c);
account(Refund c) += partnerAccount(c);
date(Refund c) += date[Bill](c);
number(Refund c) += number[Bill](c);

CLASS BillType 'Тип накладной' {
    bill 'Накладная',
    refund 'Возврат'
}

name 'Имя' (BillType o) = staticCaption(o) IF o IS BillType CHARWIDTH 15;

type 'Тип' (Bill b)=  IF(isRefund(b)) THEN ISTRING[30](name(BillType.refund))
                        ELSE ISTRING[30](name(BillType.bill));

type(Refund c) += type[Bill](c);

EXTEND FORM bill
    PROPERTIES(b) type
;

refund 'Создать акт возврата' (Bill b) {
    APPLY; 
    IF canceled() THEN RETURN;
    
    NEWSESSION { 
        NEW ni = Refund {
            date[Bill](ni) <- currentDateTime();
            partner[Bill](ni) <- partner(b);
            notes(ni) <- notes(b);
            FOR bill(BillLine l) = b INLINE NEW nl = BillLine DO {
                bill(nl) <- ni;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
                FOR in(l, Tax t) DO {
                    in(nl,t) <- in(l,t);
                }
            }
            SHOW bill OBJECTS b = ni DOCKED;
        }
        
    }
}

registerPayment 'Оформить платеж' (Bill b){
    APPLY; 
    IF canceled() THEN RETURN;
    IF done(b) THEN RETURN;
    
   NEWSESSION {
       NEW p = Payment {
           date(p) <- currentDateTime();
           amount(p) <- totalAmount(b) (-) paid(b);
           IF isRefund(b) THEN fromAccount(p) <- partnerAccount(b);
               ELSE toAccount(p) <- partnerAccount(b);
           DIALOG payment OBJECTS p = p DO {
               IF (totalAmount(b) > amount(p) (+) paid(b)) THEN {
                   ASK 'Оплачена не вся сумма. Закрыть накладную ?' DO {
                       done(b) <- TRUE;
                   }
               }
               paid(p, b) <- amount(p);
               APPLY; 
           }
       } 
   }
}

EXTEND FORM bill
    PROPERTIES(b) refund SHOWIF status(b) = BillStatus.ready AND NOT isRefund(b),
                registerPayment SHOWIF status(b) = BillStatus.ready
;

DESIGN bill {
    statusActions {
        primary {
            MOVE PROPERTY(refund(b)); 
            MOVE PROPERTY(registerPayment(b));
        }               
    }   
}

EXTEND FORM bill
    OBJECTS bi = Bill
    PROPERTIES(bi) READONLY date, number, type
    PROPERTIES READONLY paid(b, bi)
    FILTERS paid(b, bi), NOT b = bi
    
    OBJECTS bil = Bill
    PROPERTIES(bil) READONLY date, number, type, toPay
    PROPERTIES addBillPayment(b, bil) DRAW bil TOOLBAR
    FILTERS partner(bil) = partner(b), toPay(bil) > 0, NOT b = bil,
        NOT status(bil) = BillStatus.done AND NOT status(bil) = BillStatus.canceled
    
;

DESIGN bill {
    statusActions {
        primary {
            MOVE PROPERTY(refund(b));
        }                
    }
    
    pane {
        NEW outstandingCreditPane BEFORE total{
            type = TABBED;
            fill = 1;
            MOVE outstandingCredit;
            NEW creditInvoices {
                caption = 'Накладные';
                showIf = b IS Refund;
                MOVE BOX(bi);
                MOVE BOX(bil);
            }
        }
    }
}

addBill 'Накладная' () {
    NEWSESSION {
        NEW b = Bill {
            SHOW bill OBJECTS b = b;  
        }
    }
}IMAGE 'add.png';

addRefund 'Возврат' () {
    NEWSESSION {
        NEW r = Refund {
            SHOW bill OBJECTS b = r;  
        }
    }
}IMAGE 'add.png';

EXTEND FORM bills
    PROPERTIES addBill() DRAW b TOOLBAR
    PROPERTIES addRefund() DRAW b TOOLBAR
;
