MODULE Refund;

REQUIRE BillDone, Invoice;

NAMESPACE Invoicing;

refundLine = DATA BillLine (InvoiceLine);
numberRefundLine 'Расходная накладная' (InvoiceLine l) = number(refundLine(l)); 

CONSTRAINT refundLine(InvoiceLine l) AND NOT 
                (vendor(refundLine(l)) = customer(l) AND 
                 item(refundLine(l)) = item(l))
    CHECKED BY refundLine
    MESSAGE 'Контрагент и номенклатура расходной накладной должны совпадать с контрагентом и товаром возврата';

in (Bill b, Invoice i) = GROUP SUM 1 IF bill(refundLine(InvoiceLine l)) = b AND invoice(l) = i MATERIALIZED; 

countBills 'Кол-во приходных накладных' (Invoice i) = GROUP SUM 1 IF in(Bill b, i) MATERIALIZED;
numberDateBills 'Приходные накладные' (Invoice i) = GROUP CONCAT numberDate(Bill b) IF in(b, i), ',' CHARWIDTH 30; 

// form
openBills (Invoice i) { 
    FOR in(Bill b, i) DO 
        edit(b); 
}
EXTEND FORM invoice
    PROPERTIES(i) numberDateBills ON CHANGE openBills(i) SHOWIF countBills(i)
;
DESIGN invoice {
    footer {
        MOVE PROPERTY(numberDateBills(i));
    }
}
EXTEND FORM invoices
    PROPERTIES(i) READONLY numberDateBills
;

// events
WHEN LOCAL SETCHANGED(refundLine(InvoiceLine l)) DO {
    price(l) <- price(refundLine(l));
    in(l, Tax t) <- in(refundLine(l), t);
}

isRefund 'Возврат' (Invoice i) = DATA BOOLEAN (Invoice);

EXTEND FORM invoice
    PROPERTIES(i) isRefund
    
    PROPERTIES(l) numberRefundLine SHOWIF isRefund(i)
;

DESIGN invoice {
    headerRight {
        MOVE PROPERTY(isRefund(i));
    }
}

// add
addRefund 'Создать возврат' (Bill b) {
    APPLY; 
    IF canceled() THEN RETURN;
    
    NEWSESSION { 
        NEW i = Invoice {
            isRefund(i) <- TRUE;
            
            dateTime(i) <- currentDateTime();
            
            customer(i) <- vendor(b);
            customerAccount(i) <- vendorAccount(b);
            
            company(i) <- company(b);
            companyAccount(i) <- companyAccount(b);
            
            note(i) <- note(b);
            
            FOR bill(BillLine l) = b INLINE NEW bl = InvoiceLine DO {
                refundLine(bl) <- l; 
                invoice(bl) <- i;

                item(bl) <- item(l);

                quantity(bl) <- quantity(l);
            }
            SHOW invoice OBJECTS i = i DOCKED;
        }
        
    }
}

EXTEND FORM bill
    PROPERTIES(b) addRefund SHOWIF ready(b)
;

DESIGN bill {
    secondaryActions {
        MOVE PROPERTY(addRefund(b));
    }               
}

EXTEND FORM invoices
    PROPERTIES READONLY isRefund(i)
;