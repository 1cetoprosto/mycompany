MODULE Invoice;

REQUIRE InvoicingSettings, TaxItem, Account, Time, MetaTax, ItemSale, PartnerSale, Company, BarCode;

NAMESPACE Invoicing;

CLASS Invoice 'Реализация товаров и услуг';

date 'Дата накладной' = DATA DATETIME (Invoice) NONULL IN id;

WHEN LOCAL SET(Invoice i IS Invoice) DO {
    date(i) <- currentDateTime();
}

dueDate 'Дата к оплате' = DATA DATETIME (Invoice);

partner 'Партнер' = DATA Partner (Invoice) NONULL;
namePartner 'Партнер' (Invoice b) = name(partner(b));

partnerAccount 'Счет партнера'  = DATA Account (Invoice);

addressPartner 'Адрес партнера' = DATA STRING (Invoice); 

CONSTRAINT partner(Invoice i) AND NOT isCustomer(partner(i)) 
                CHECKED BY partner
                MESSAGE 'Партнер должен быть покупателем';

WHEN LOCAL CHANGED(partner(Invoice i)) DO {
    partnerAccount(i) <- defaultAccount(partner(i));
}

partnerAccountNumber 'Счет партнера' (Invoice i) = number(partnerAccount(i));

CONSTRAINT partnerAccount(Invoice i) AND NOT partner(i) = holder(partnerAccount(i))
    CHECKED BY partnerAccount
    MESSAGE 'Счет должен принадлежать выбранному партнеру';
    
company 'Компания' = DATA Partner (Invoice) NONULL;
nameCompany 'Компания' (Invoice i) = name(company(i));

WHEN LOCAL SET(Invoice i IS Invoice) DO {
    IF ((GROUP SUM 1 IF Partner p IS Company) = 1) THEN {
        FOR Partner p IS Company DO {
            company(i) <- p;
        }
    }
}

companyAccount 'Счет компании' = DATA Account (Invoice);
companyAccountNumber 'Счет компании' (Invoice i) = number(companyAccount(i));

WHEN LOCAL CHANGED(company(Invoice i)) DO {
    companyAccount(i) <- defaultAccount(company(i));
}

CONSTRAINT companyAccount(Invoice i) AND NOT company(i) = holder(companyAccount(i))
    CHECKED BY companyAccount
    MESSAGE 'Счет должен принадлежать выбранной компании';
    
CONSTRAINT company(Invoice i) AND NOT company(i) IS Company
    CHECKED BY company
    MESSAGE 'Счет должен принадлежать компании';

notes 'Примечания' = DATA ISTRING[50] (Invoice);

series 'Серия' = DATA STRING[2] (Invoice);
number 'Номер' = DATA STRING[28] (Invoice) NONULL;

numeratorInvoice 'Нумератор документов реализации' = DATA Numerator() CHARWIDTH 20;
nameNumeratorInvoice 'Нумератор документов реализации' = name(numeratorInvoice());

MasterData.loadDefaultData[] () + {
    NEWSESSION {
        NEW n = Numerator {
            name(n) <- 'Документов реализации';
            series(n) <- 'IN';
            minValue(n) <- 1;
            maxValue(n) <- 999999;
            stringLength(n) <- 6;
            numeratorInvoice() <- n;
        }
        APPLY;
    }
}

WHEN SETCHANGED(Invoice i IS Invoice  AND numeratorInvoice() AND NOT number(i)) DO {
    number(i) <- curStringValue(numeratorInvoice());
    series(i) <- series(numeratorInvoice());
    incrementValueSession(numeratorInvoice());   
}

EXTEND FORM options 
  PROPERTIES nameNumeratorInvoice()
;

DESIGN options {
    OBJECTS {
        MOVE PROPERTY(nameNumeratorInvoice());
    }
}

seriesNumber 'Серия/Номер' (Invoice i) = CONCAT '/', series(i), number(i); 

sourceDocument 'Исходный документ' = DATA STRING[10] (Invoice);

CLASS InvoiceLine 'Строка документа';

invoice 'Документ' = DATA Invoice (InvoiceLine) NONULL DELETE;

item 'Номенклатура' = DATA Item (InvoiceLine);
idItem 'Код номенклатуры' (InvoiceLine l) = id(item(l));
nameItem 'Номенклатура' (InvoiceLine l) = name(item(l)) IN id;
description 'Описание' = DATA STRING (InvoiceLine); 

quantity 'Кол-во' = DATA NUMERIC[16,3] (InvoiceLine) NONULL;
unitPrice 'Цена за штуку' = DATA NUMERIC[10,2] (InvoiceLine) NONULL;

WHEN LOCAL SETCHANGED(item(InvoiceLine l)) AND salesPrice(item(l)) DO {
    unitPrice(l) <- salesPrice(item(l));
}

index 'Индекс' = PARTITION SUM 1 ORDER InvoiceLine l BY invoice(l) IN id MATERIALIZED;

readonly = ABSTRACT CASE BOOLEAN (InvoiceLine);
readonly = ABSTRACT CASE BOOLEAN (Invoice);

CONSTRAINT item(InvoiceLine l) AND NOT canBeSold(item(l))
            CHECKED BY item 
            MESSAGE 'Номенклатура не предназначена для продажи';

date 'Дата документа' (InvoiceLine l) = date(invoice(l));
partner 'Партнер' (InvoiceLine l) = partner(invoice(l));
namePartner 'Партнер' (InvoiceLine l) = namePartner(invoice(l));
nameCompany 'Компания' (InvoiceLine l) = nameCompany(invoice(l));

@defineTaxCalc(invoice, i, TRUE);

FORM invoice 'Документ реализации'
    OBJECTS  i = Invoice PANEL 
    PROPERTIES(i) READONLYIF readonly(i)  date, dueDate, namePartner, partnerAccountNumber, addressPartner, sourceDocument,
                             nameCompany, companyAccountNumber, seriesNumber, notes
        
    OBJECTS l = InvoiceLine
    PROPERTIES(l) READONLYIF readonly(l) nameItem, description, quantity, unitPrice, taxes ON CHANGE changeTax(l), NEW, DELETE 
    FILTERS invoice(l) = i
    
    EDIT Invoice OBJECT i;
;

copyInvoice 'Копировать' (Invoice i)  { 
    NEWSESSION {
        NEW ni = Invoice {
            partner(ni) <- partner(i);
            notes(ni) <- notes(i);
            FOR invoice(InvoiceLine l) = i INLINE NEW nl = InvoiceLine DO {
                invoice(nl) <- ni;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
                FOR in(l, Tax t) DO {
                    in(nl,t) <- in(l,t);
                }
            }
            SHOW invoice OBJECTS i = ni DOCKED;
        }
    }
}

EXTEND FORM invoice
    PROPERTIES(i) copyInvoice
;
    
DESIGN invoice {
    OBJECTS {
        NEW statusPane FIRST {
            caption = 'Статусы';
            type = CONTAINERH;
            alignment = STRETCH;                          
            NEW statusActions {
                type = CONTAINERH;                    
                flex = 1; 
                NEW primary {
                    type = CONTAINERH;
                }
                NEW secondary {
                    type = CONTAINERH;
                    MOVE PROPERTY(copyInvoice(i));  
                }            
            }
        }
        NEW header{
            NEW title {
                type = CONTAINERH;
                MOVE PROPERTY(date(i)) { caption = 'Дата документа'; };
                MOVE PROPERTY(seriesNumber(i)) { caption = 'Номер'; };
                MOVE PROPERTY(dueDate(i)) { caption = 'Срок оплаты'; };
            }
            NEW partner {
                type = CONTAINERH;
                caption = 'Покупатель';           
                MOVE PROPERTY(namePartner(i)) { notNull = TRUE; }
                MOVE PROPERTY(partnerAccountNumber(i));
                                               
            }
            NEW namesAndAccounts {
                type = CONTAINERH;
                fill = 1;
                NEW to {
                    type = CONTAINERH;
                    caption = 'Получатель';
                    MOVE PROPERTY(nameCompany(i)) { notNull = TRUE ;}
                    MOVE PROPERTY(companyAccountNumber(i));
                }   
            }
            NEW additions {
                caption = 'Дополнительно';
                type = CONTAINERH;
                fill = 1;
                MOVE PROPERTY(sourceDocument(i));
                MOVE PROPERTY(notes(i));
            }
        }
        NEW details{
            fill = 1;
            type = TABBED;
            NEW box {
                caption = 'Строка документа';
                fill = 1;
                MOVE BOX(l);
                NEW pane {
                    type = CONTAINERH;
                    fill = 1;
                }
            }
        }
    }
}

addInvoice 'Документ' () {
    NEWSESSION {
        NEW i = Invoice {
            SHOW invoice OBJECTS i = i;  
        }
    }
}IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;

FORM invoices 'Реализация товаров и услуг'
    OBJECTS i = Invoice
    PROPERTIES(i) READONLY date, dueDate, namePartner, notes    
    PROPERTIES(i) NEWSESSION EDIT
    PROPERTIES(i) NEWSESSION READONLYIF readonly(i) DELETE
    PROPERTIES addInvoice() DRAW i TOOLBAR
           
    LIST Invoice OBJECT i;
;
    
NAVIGATOR {
    invoicing {
        operations {
            NEW invoices FIRST;
        }
    }
}
    
@defineTaxForm(invoice, i);

@defineBarCodeAdd(invoice, i, item);
