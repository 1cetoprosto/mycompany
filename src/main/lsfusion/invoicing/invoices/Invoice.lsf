MODULE Invoice;

REQUIRE Invoicing, TaxItem, Account, Time, MetaTax, InvoicingSettings, ItemSale, PartnerPurchase;

NAMESPACE Invoicing;

CLASS Invoice 'Расходная накладная';

date 'Дата накладной' = DATA DATETIME (Invoice) NONULL IN id;

WHEN LOCAL SET (Invoice i IS Invoice) DO {
    date(i) <- currentDateTime();
}


dueDate 'Дата к оплате' = DATA DATETIME (Invoice);

partner 'Партнер' = DATA Partner (Invoice) NONULL;
namePartner 'Партнер' (Invoice b) = name(partner(b));

partnerAccount 'Счет партнера'  = DATA Account(Invoice);

CONSTRAINT partner(Invoice i) AND NOT isCustomer(partner(i)) 
                CHECKED BY partner
                MESSAGE 'Партнер должен быть покупателем';

WHEN LOCAL CHANGED (partner(Invoice i)) DO {
    partnerAccount(i) <- defaultAccount(partner(i));
}

partnerAccountNumber 'Счет партнера' (Invoice i) = number(partnerAccount(i));

CONSTRAINT partnerAccount(Invoice i) AND NOT partner(i) = holder(partnerAccount(i))
    CHECKED BY partnerAccount
    MESSAGE 'Счет должен принадлежать выбранному партнеру';

notes 'Примечания' = DATA ISTRING[50] (Invoice);

series 'Серия' = DATA STRING[2] (Invoice);
number 'Номер' = DATA STRING[28] (Invoice) NONULL;

WHEN SETCHANGED (Invoice i IS Invoice  AND numeratorInvoice() AND NOT number(i)) DO {
    number(i) <- curStringValue(numeratorInvoice());
    series(i) <- series(numeratorInvoice());
    incrementValueSession(numeratorInvoice());   
}

seriesNumber 'Серия/Номер' (Invoice i) = CONCAT '/', series(i), number(i); 

CLASS InvoiceLine 'Строка накладной';

invoice 'Накладная' = DATA Invoice (InvoiceLine) NONULL DELETE;

item 'Номенклатура' = DATA Item (InvoiceLine);
nameItem 'Номенклатура' (InvoiceLine l) = name(item(l)) IN id;

quantity 'Кол-во' = DATA NUMERIC[16,3] (InvoiceLine) NONULL;
unitPrice 'Цена за штуку' = DATA NUMERIC[10,2] (InvoiceLine) NONULL;

WHEN LOCAL SETCHANGED (item(InvoiceLine l)) AND salesPrice(item(l)) DO {
    unitPrice(l) <- salesPrice(item(l));
}

index 'Индекс' = PARTITION SUM 1 ORDER InvoiceLine l BY invoice(l) IN id MATERIALIZED;

readonly = ABSTRACT CASE BOOLEAN (InvoiceLine);
readonly = ABSTRACT CASE BOOLEAN (Invoice);

CONSTRAINT item(InvoiceLine l) AND NOT canBeSold(item(l))
            CHECKED BY item 
            MESSAGE 'Наменклатура не предназначена для продажи';

@defineTaxCalc(invoice, i);

FORM invoice 'Расходная накладная'
    OBJECTS  i = Invoice PANEL 
    PROPERTIES(i) READONLYIF readonly(i)  date, dueDate, namePartner, partnerAccountNumber, series, number, notes
        
    OBJECTS l = InvoiceLine
    PROPERTIES(l) READONLYIF readonly(l) nameItem, quantity, unitPrice, taxes ON CHANGE changeTax(l), NEW, DELETE 
    FILTERS invoice(l) = i
    
    EDIT Invoice OBJECT i;
;

copyInvoice 'Копировать' (Invoice i)  { 
    NEWSESSION {
        NEW ni = Invoice {
            partner(ni) <- partner(i);
            notes(ni) <- notes(i);
            FOR invoice(InvoiceLine l) = i INLINE NEW nl = InvoiceLine DO {
                invoice(nl) <- ni;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
                FOR in(l, Tax t) DO {
                    in(nl,t) <- in(l,t);
                }
            }
            SHOW invoice OBJECTS i = ni DOCKED;
        }
    }
}

EXTEND FORM invoice
    PROPERTIES(i) copyInvoice
;
    
DESIGN invoice {
    OBJECTS {
        NEW statusPane FIRST {
            caption = 'Статусы';
            type = CONTAINERH;
            alignment = STRETCH;                          
            NEW statusActions {
                type = CONTAINERH;                    
                flex = 1; 
                NEW primary {
                    type = CONTAINERH;
                }
                NEW  secondary {
                    type = CONTAINERH;
                    MOVE PROPERTY (copyInvoice(i));  
                }            
            }
        }
        NEW header{
            MOVE BOX (i);
            PROPERTY (namePartner(i)) {notNull = TRUE;}
        }
        NEW details{
            fill = 1;
            type = TABBED;
            NEW box {
                caption = 'Строка накладной';
                fill = 1;
                MOVE BOX (l);
                NEW pane {
                    type = CONTAINERH;
                    fill = 1;
                }
            }
        }
    }
}

addInvoice 'Накладная' () {
    NEWSESSION {
        NEW i = Invoice {
            SHOW invoice OBJECTS i = i;  
        }
    }
}IMAGE 'add.png';

FORM invoices 'Расходная накладная'
    OBJECTS i = Invoice
    PROPERTIES(i) READONLY date, dueDate, namePartner, notes    
    PROPERTIES(i) NEWSESSION EDIT
    PROPERTIES(i) NEWSESSION READONLYIF readonly(i) DELETE
    PROPERTIES addInvoice() DRAW i TOOLBAR
           
    LIST Invoice OBJECT i;
;
    
NAVIGATOR {
    invoicing {
        operations {
            NEW invoices;
        }
    }
}
    
@defineTaxForm(invoice, i);
