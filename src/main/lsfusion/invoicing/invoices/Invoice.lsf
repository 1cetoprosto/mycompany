MODULE Invoice;

REQUIRE InvoicingSettings, TaxItem, BankAccount, Time, MetaTax, ItemSale, PartnerSale, Company, 
        BarCode, MetaNumerator, Doc;

NAMESPACE Invoicing;

CLASS Invoice 'Расходная накладная';

// dateTime
dateTime 'Дата' = DATA DATETIME (Invoice) NONULL IN id;
WHEN LOCAL SET (Invoice b IS Invoice) DO dateTime(b) <- currentDateTime();

@defineNumber(invoice, 'Расходная накладная', 'РН');


// customer
customer 'Покупатель' = DATA Partner (Invoice) NONULL;
nameCustomer 'Покупатель' (Invoice b) = name(customer(b));
CONSTRAINT customer(Invoice b) AND NOT isCustomer(customer(b)) 
                CHECKED BY customer
                MESSAGE 'Контрагент должен быть покупателем';

// company
company 'Компания' = DATA Company (Invoice) NONULL;
nameCompany 'Компания' (Invoice b) = name(company(b));
WHEN LOCAL SET(Invoice b IS Invoice) AND NOT CHANGED(company(b)) DO company(b) <- defaultCompany(); 

// payment
dueDateTime 'Оплатить до' = DATA DATETIME (Invoice);

// partner account
customerAccount 'Счет покупателя' = DATA Account (Invoice);
nameCustomerAccount 'Счет покупателя' (Invoice b) = name(customerAccount(b));
WHEN LOCAL CHANGED (customer(Invoice b)) DO customerAccount(b) <- defaultAccount(customer(b));

CONSTRAINT customerAccount(Invoice b) AND NOT customer(b) = holder(customerAccount(b))
    CHECKED BY customerAccount
    MESSAGE 'Счет должен принадлежать выбранному контрагенту';

// company account
companyAccount 'Счет компании' = DATA Account (Invoice);
nameCompanyAccount 'Счет компании' (Invoice b) = name(companyAccount(b));
WHEN LOCAL CHANGED(company(Invoice b)) DO companyAccount(b) <- defaultAccount(company(b));

CONSTRAINT companyAccount(Invoice b) AND NOT company(b) = holder(companyAccount(b))
    CHECKED BY companyAccount
    MESSAGE 'Счет должен принадлежать выбранной компании';

customerReference 'Код покупателя' = DATA STRING[30] (Invoice);
sourceDocument 'Основание' = DATA STRING[31] (Invoice);
note 'Примечание' = DATA ISTRING[50] (Invoice);

// lines
CLASS InvoiceLine 'Строки документа';

invoice 'Расходная накладная' = DATA Invoice (InvoiceLine) NONULL DELETE;

index 'Индекс' = PARTITION SUM 1 ORDER InvoiceLine l BY invoice(l) IN id MATERIALIZED;

item 'Номенклатура' = DATA Item (InvoiceLine) NONULL;
nameItem 'Номенклатура' (InvoiceLine l) = name(item(l)) IN id;
idBarCodeItem 'Штрих код' (InvoiceLine l) = idBarCode(item(l));
idItem 'Код' (InvoiceLine l) = id(item(l));

CONSTRAINT item(InvoiceLine l) AND NOT canBeSold(item(l))
            CHECKED BY item 
            MESSAGE 'Номенклатура не предназначена для продажи';

unitMeasure = DATA ItemMeasure (InvoiceLine);
nameUnitMeasure 'Ед. изм.' (InvoiceLine l) = name(unitMeasure(l));

description 'Описание' = DATA STRING (InvoiceLine); 

quantity 'Кол-во' = DATA NUMERIC[16,3] (InvoiceLine) NONULL;
unitPrice 'Цена за штуку' = DATA NUMERIC[10,2] (InvoiceLine) NONULL;

WHEN LOCAL SETCHANGED(item(InvoiceLine l)) AND NOT CHANGED(unitPrice(l)) DO unitPrice(l) <- salesPrice(item(l));

// taxes
@defineTaxCalc(invoice, i, sales);

// readonly
readonly = ABSTRACT CASE BOOLEAN (Invoice);
readonly = ABSTRACT CASE BOOLEAN (InvoiceLine);

// Line properties
dateTime 'Дата накладной' (InvoiceLine l) = dateTime(invoice(l));
nameCustomer 'Покупатель' (InvoiceLine l) = nameCustomer(invoice(l));
nameCompany 'Компания' (InvoiceLine l) = nameCompany(invoice(l));

edit (InvoiceLine l) + { edit(invoice(l)); } 

FORM invoice 'Расходная накладная'
    OBJECTS  i = Invoice PANEL 
    PROPERTIES(i) READONLYIF readonly(i) 
                             dateTime, number, nameCustomer, nameCompany, sourceDocument,
                             dueDateTime, nameCustomerAccount, nameCompanyAccount,
                             customerReference, note
        
    OBJECTS l = InvoiceLine
    PROPERTIES(l) READONLYIF readonly(l) index, nameItem, description, nameUnitMeasure, idBarCodeItem, idItem, quantity, 
                        unitPrice, taxes ON CHANGE changeTax(l), NEW, DELETE 
    FILTERS invoice(l) = i

    EDIT Invoice OBJECT i
;

DESIGN invoice {
    OBJECTS {
        NEW header {
            type = CONTAINERH;
            alignment = STRETCH;
            NEW headerLeft {
                MOVE PROPERTY(dateTime(i));
                MOVE PROPERTY(number(i));
            }
            NEW headerRight {
                MOVE PROPERTY(nameCustomer(i))  { notNull = TRUE; }
                MOVE PROPERTY(nameCompany(i)) { notNull = TRUE; }           
                MOVE PROPERTY(sourceDocument(i));           
            }
            NEW relatedDoc {
                fill = 1;
                type = TABBED;
            }
        }
        NEW details {
            fill = 5;
            type = TABBED;
            NEW lines {
                caption = 'Строки';
                MOVE BOX(l) { 
                    fill = 3;
                    PROPERTY(nameItem(l)) { notNull = TRUE; } 
                }
                NEW linesFooter {                     
                    type = CONTAINERH;
                    fill = 1;
                }
            }
            NEW otherInformation {
                caption = 'Прочая информация';
                type = COLUMNS;
                columns = 2;
                NEW payment {
                    caption = 'Оплата';
                    MOVE PROPERTY(dueDateTime(i)); 
                    MOVE PROPERTY(nameCompanyAccount(i));
                    MOVE PROPERTY(nameCustomerAccount(i));              
                }           
                NEW invoiceInformat {
                    caption = 'Прочие';
                    MOVE PROPERTY(customerReference(i)); 
                    MOVE PROPERTY(note(i));
                }
            }
        }
    }
}

@defineBarCodeAdd(invoice, i, item);

FORM invoices 'Расходные накладные'
    OBJECTS i = Invoice
    PROPERTIES(i) READONLY dateTime, number, nameCustomer, nameCompany, sourceDocument,
                           dueDateTime, nameCustomerAccount, nameCompanyAccount,
                           customerReference, note         
    PROPERTIES(i) NEWSESSION NEW, EDIT, DELETE READONLYIF readonly(i)
           
    LIST Invoice OBJECT i;

NAVIGATOR {
    operations {
        NEW invoices FIRST;
    }
}

@defineTaxForm(invoice, i);

// status
@defineStatus(invoice, 'счета', i);
nameStatus 'Статус' (InvoiceLine l) = nameStatus(invoice(l));

// history
@defineDocHistory(invoice, i, item, quantity);

// search
@defineDocSearch(invoice, item, quantity, i, canBeSold);

readonly (InvoiceLine l) += WHEN NOT status(invoice(l)) = InvoiceStatus.draft THEN TRUE;

// copy
copy 'Копировать' (Invoice i)  { 
    NEWSESSION {
        NEW ni = Invoice {
            customer(ni) <- customer(i);
            note(ni) <- note(i);
            FOR invoice(InvoiceLine l) = i INLINE NEW nl = InvoiceLine DO {
                invoice(nl) <- ni;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
            }
            SHOW invoice OBJECTS i = ni DOCKED;
        }
    }
}
EXTEND FORM invoice PROPERTIES(i) copy;

DESIGN invoice {
    secondaryActions {
        MOVE PROPERTY(copy(i)); 
    }
}
