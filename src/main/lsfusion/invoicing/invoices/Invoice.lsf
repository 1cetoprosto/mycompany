MODULE Invoice;

REQUIRE InvoicingSettings, TaxItem, BankAccount, Time, MetaTax, ItemSale, PartnerSale, Company, BarCode, MetaNumerator;

NAMESPACE Invoicing;

CLASS Invoice 'Реализация товаров и услуг';

date 'Дата накладной' = DATA DATETIME (Invoice) NONULL IN id;

WHEN LOCAL SET(Invoice i IS Invoice) DO {
    date(i) <- currentDateTime();
}

dueDate 'Дата к оплате' = DATA DATETIME (Invoice);

partner 'Партнер' = DATA Partner (Invoice) NONULL;
namePartner 'Партнер' (Invoice b) = name(partner(b));

partnerAccount 'Счет партнера'  = DATA Account (Invoice);

addressPartner 'Адрес партнера' = DATA STRING (Invoice); 

CONSTRAINT partner(Invoice i) AND NOT isCustomer(partner(i)) 
                CHECKED BY partner
                MESSAGE 'Партнер должен быть покупателем';

WHEN LOCAL CHANGED(partner(Invoice i)) DO {
    partnerAccount(i) <- defaultAccount(partner(i));
}

partnerAccountName 'Счет партнера' (Invoice i) = IF partnerAccount(i) IS BankAccount 
    THEN nameAccount(partnerAccount(i)) ELSE number(partnerAccount(i));

CONSTRAINT partnerAccount(Invoice i) AND NOT partner(i) = holder(partnerAccount(i))
    CHECKED BY partnerAccount
    MESSAGE 'Счет должен принадлежать выбранному партнеру';
    
company 'Компания' = DATA Partner (Invoice) NONULL;
nameCompany 'Компания' (Invoice i) = name(company(i));

WHEN LOCAL SET(Invoice i IS Invoice) DO {
    IF ((GROUP SUM 1 IF Partner p IS Company) = 1) THEN {
        FOR Partner p IS Company DO {
            company(i) <- p;
        }
    }
}

companyAccount 'Счет компании' = DATA Account (Invoice);
companyAccountName 'Счет компании' (Invoice i) = IF companyAccount(i) IS BankAccount 
    THEN nameAccount(companyAccount(i)) ELSE number(companyAccount(i));

WHEN LOCAL CHANGED(company(Invoice i)) DO {
    companyAccount(i) <- defaultAccount(company(i));
}

CONSTRAINT companyAccount(Invoice i) AND NOT company(i) = holder(companyAccount(i))
    CHECKED BY companyAccount
    MESSAGE 'Счет должен принадлежать выбранной компании';
    
CONSTRAINT company(Invoice i) AND NOT company(i) IS Company
    CHECKED BY company
    MESSAGE 'Счет должен принадлежать компании';

notes 'Примечания' = DATA ISTRING[50] (Invoice);

@defineSeriesNumber(invoice, 'Реализация товаров и услуг', 'РТ');

sourceDocument 'Исходный документ' = DATA STRING[10] (Invoice);

CLASS InvoiceLine 'Строка документа';

invoice 'Документ' = DATA Invoice (InvoiceLine) NONULL DELETE;

item 'Номенклатура' = DATA Item (InvoiceLine);
idItem 'Код номенклатуры' (InvoiceLine l) = id(item(l));
nameItem 'Номенклатура' (InvoiceLine l) = name(item(l)) IN id;
unitMeasure 'Ед.изм.' = DATA ItemMeasure (InvoiceLine);
nameUnitMeasure 'Ед.изм.' (InvoiceLine l) = name(unitMeasure(l));
idBarCode 'Штрих код' (InvoiceLine l) = idBarCode(item(l));
id 'Код' (InvoiceLine l) = id(item(l));
description 'Описание' = DATA STRING (InvoiceLine); 

quantity 'Кол-во' = DATA NUMERIC[16,3] (InvoiceLine) NONULL;
unitPrice 'Цена за штуку' = DATA NUMERIC[10,2] (InvoiceLine) NONULL;

WHEN LOCAL SETCHANGED(item(InvoiceLine l)) AND salesPrice(item(l)) DO {
    unitPrice(l) <- salesPrice(item(l));
}

index 'Индекс' = PARTITION SUM 1 ORDER InvoiceLine l BY invoice(l) IN id MATERIALIZED;

readonly = ABSTRACT CASE BOOLEAN (InvoiceLine);
readonly = ABSTRACT CASE BOOLEAN (Invoice);

CONSTRAINT item(InvoiceLine l) AND NOT canBeSold(item(l))
            CHECKED BY item 
            MESSAGE 'Номенклатура не предназначена для продажи';

date 'Дата документа' (InvoiceLine l) = date(invoice(l));
partner 'Партнер' (InvoiceLine l) = partner(invoice(l));
namePartner 'Партнер' (InvoiceLine l) = namePartner(invoice(l));
nameCompany 'Компания' (InvoiceLine l) = nameCompany(invoice(l));

@defineTaxCalc(invoice, i, sales);

CLASS InvoiceType 'Тип документа' {
    invoice 'Реализация'
}

name 'Имя' (InvoiceType i) = staticCaption(i) IF i IS InvoiceType CHARWIDTH 20;
type 'Тип' = ABSTRACT CASE InvoiceType (Invoice);
type (Invoice i) += WHEN TRUE AND i IS Invoice THEN InvoiceType.invoice;
nameType 'Тип' (Invoice i) = name(type(i));

colorType 'Цвет' = ABSTRACT CASE COLOR (Invoice);
colorType (Invoice i) += WHEN type[Invoice](i) == InvoiceType.invoice THEN RGB(255,255,255);

FORM invoice 'Документ реализации'
    OBJECTS  i = Invoice PANEL 
    PROPERTIES(i) READONLYIF readonly(i)  nameType BACKGROUND colorType(i), date, dueDate, namePartner, partnerAccountName, addressPartner, sourceDocument,
                             nameCompany, companyAccountName, seriesNumber, notes
        
    OBJECTS l = InvoiceLine
    PROPERTIES(l) READONLYIF readonly(l) index, nameItem, nameUnitMeasure, idBarCode, id, description, quantity, 
                        unitPrice, taxes ON CHANGE changeTax(l), NEW, DELETE 
    FILTERS invoice(l) = i
    
    EDIT Invoice OBJECT i;
;

copyInvoice 'Копировать' (Invoice i)  { 
    NEWSESSION {
        NEW ni = Invoice {
            partner(ni) <- partner(i);
            notes(ni) <- notes(i);
            FOR invoice(InvoiceLine l) = i INLINE NEW nl = InvoiceLine DO {
                invoice(nl) <- ni;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
                FOR in(l, Tax t) DO {
                    in(nl,t) <- in(l,t);
                }
            }
            SHOW invoice OBJECTS i = ni DOCKED;
        }
    }
}

EXTEND FORM invoice
    PROPERTIES(i) copyInvoice
;
    
DESIGN invoice {
    OBJECTS {
        NEW statusPane FIRST {
            caption = 'Статусы';
            type = CONTAINERH;
            alignment = STRETCH;                          
            NEW statusActions {
                type = CONTAINERH;                    
                flex = 1; 
                NEW primary {
                    type = CONTAINERH;
                }
                NEW secondary {
                    type = CONTAINERH;
                    MOVE PROPERTY(copyInvoice(i));  
                }            
            }
            NEW status {
                type = CONTAINERH;
            }
        }
        NEW header{
            type = CONTAINERH;
            NEW box1 {               
                fill = 3;
                NEW company {
                    fill = 1;
                    MOVE PROPERTY(nameCompany(i)) { notNull = TRUE; caption = 'Компания отправитель'; }           
                }
                NEW title {            
                    fill = 1;
                    MOVE PROPERTY(nameType(i)) { caption = 'Тип документа'; };             
                    NEW dateNumber {                
                        type = CONTAINERH;
                        MOVE PROPERTY(date(i)) { caption = 'Дата'; };
                        MOVE PROPERTY(seriesNumber(i)) { caption = 'Номер'; };
                    }
                }
            }
            NEW partner {
                fill = 1;
                caption = 'Покупатель';
                MOVE PROPERTY(namePartner(i)) { notNull = TRUE; } 
                MOVE PROPERTY(partnerAccountName(i));  
                MOVE PROPERTY(addressPartner(i));                                          
            }
            NEW additions {
                fill = 1;
                caption = 'Дополнительно';
                MOVE PROPERTY(sourceDocument(i)) { caption = 'Создан из'; }
                MOVE PROPERTY(notes(i));
            }
            NEW payment {
                fill = 1;
                caption = 'Оплата';
                MOVE PROPERTY(dueDate(i)) { caption = 'Срок оплаты      '; } 
                MOVE PROPERTY(companyAccountName(i)) { caption = 'р/сч для оплаты'; }
            }
        }
        NEW details{
            fill = 5;
            type = TABBED;
            NEW box {
                caption = 'Содержание документа';
                type = SPLITV;
                fill = 1;
                MOVE BOX(l) { fill = 2; }
                NEW pane {
                    type = CONTAINERH;
                    fill = 1;
                }
            }
        }
    }
}

addInvoice 'Документ' () {
    NEWSESSION {
        NEW i = Invoice {
            SHOW invoice OBJECTS i = i;  
        }
    }
}IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE;

FORM invoices 'Реализация товаров и услуг'
    OBJECTS i = Invoice
    PROPERTIES(i) READONLY nameType BACKGROUND colorType(i), date, dueDate, namePartner, notes    
    PROPERTIES(i) NEWSESSION EDIT
    PROPERTIES(i) NEWSESSION READONLYIF readonly(i) DELETE
    PROPERTIES addInvoice() DRAW i TOOLBAR
           
    LIST Invoice OBJECT i;
;
    
NAVIGATOR {
    invoicing {
        operations {
            NEW invoices FIRST;
        }
    }
}
    
@defineTaxForm(invoice, i);

@defineBarCodeAdd(invoice, i, item);
