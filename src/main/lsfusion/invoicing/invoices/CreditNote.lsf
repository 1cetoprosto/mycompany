MODULE CreditNote;

REQUIRE InvoiceDone, Bill;

NAMESPACE Invoicing;

@defineDocLineRelation(invoice, bill, 'Расходные накладные', 'Возвраты', i, b);

numberInvoiceLine 'Расходная накладная' (BillLine l) = number(invoiceLine(l)); 

CONSTRAINT invoiceLine(BillLine l) AND NOT 
                (customer(invoiceLine(l)) = vendor(l) AND 
                 item(invoiceLine(l)) = item(l))
    CHECKED BY invoiceLine
    MESSAGE 'Контрагент и номенклатура расходной накладной должны совпадать с контрагентом и товаром возврата';

// events
WHEN LOCAL SETCHANGED(invoiceLine(BillLine l)) DO {
    price(l) <- price(invoiceLine(l));
    in(l, Tax t) <- in(invoiceLine(l), t);
}

isCreditNote 'Возврат' (Bill b) = DATA BOOLEAN (Bill);

EXTEND FORM bill
    PROPERTIES(b) isCreditNote
    
    PROPERTIES(l) numberInvoiceLine SHOWIF isCreditNote(b)
;

DESIGN bill {
    headerRight {
        MOVE PROPERTY(isCreditNote(b));
    }
}

// add
addCreditNote 'Создать возврат' (Invoice i) {
    APPLY; 
    IF canceled() THEN RETURN;
    
    NEWSESSION { 
        NEW b = Bill {
            isCreditNote(b) <- TRUE;
            
            dateTime(b) <- currentDateTime();
            
            vendor(b) <- customer(i);
            vendorAccount(b) <- customerAccount(i);
            
            company(b) <- company(i);
            companyAccount(b) <- companyAccount(i);
            
            note(b) <- note(i);
            
            FOR invoice(InvoiceLine l) = i INLINE NEW bl = BillLine DO {
                invoiceLine(bl) <- l; 
                bill(bl) <- b;

                item(bl) <- item(l);

                quantity(bl) <- quantity(l);
            }
            SHOW bill OBJECTS b = b DOCKED;
        }
        
    }
}

EXTEND FORM invoice
    PROPERTIES(i) addCreditNote SHOWIF ready(i)
;

DESIGN invoice {
    secondaryActions {
        MOVE PROPERTY(addCreditNote(i));
    }               
}

EXTEND FORM bills
    PROPERTIES READONLY isCreditNote(b)
;