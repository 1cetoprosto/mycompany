MODULE CreditNote;

REQUIRE InvoiceDone, InvoiceOutstandingCredit;

NAMESPACE Invoicing;

CLASS CreditNote 'Акт расхождения' : Invoice;
isCreditNote 'Акт расхождения' (Invoice i) = i IS CreditNote;

// type
EXTEND CLASS InvoiceType {
    creditNote 'Возврат'
}

type (Invoice i) += WHEN isCreditNote(i) THEN InvoiceType.creditNote;
colorType (CreditNote c) += WHEN c IS CreditNote THEN RGB(250,67,71);

// add
addCreditNote 'Создать возврат' (Invoice i) {
    APPLY; 
    IF canceled() THEN RETURN;
    
    NEWSESSION { 
        NEW ni = CreditNote {
            date[Invoice](ni) <- currentDateTime();
            customer[Invoice](ni) <- customer(i);
            customerAccount(ni) <- customerAccount(i);
            company(ni) <- company(i);
            companyAccount(ni) <- companyAccount(i);
            notes(ni) <- notes(i);
            FOR invoice(InvoiceLine l) = i INLINE NEW nl = InvoiceLine DO {
                invoice(nl) <- ni;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
                FOR in(l, Tax t) DO {
                    in(nl,t) <- in(l,t);
                }
            }
            SHOW invoice OBJECTS i = ni DOCKED;
        }
        
    }
}

EXTEND FORM invoice
    PROPERTIES(i) addCreditNote SHOWIF ready(i) AND NOT isCreditNote(i)
;

DESIGN invoice {
    secondaryActions {
        MOVE PROPERTY(addCreditNote(i));
    }               
}

addCreditNote 'Расхождение' () {
    NEWSESSION {
        NEW c = CreditNote {
            SHOW invoice OBJECTS i = c;  
        }
    }
} IMAGE 'add.png';

EXTEND FORM invoices
    PROPERTIES addCreditNote() DRAW i TOOLBAR
;

// match
canBeMatched(CreditNote c, Invoice i) = 
            customer[InvoiceOutstandingCredit](c) = customer(i) 
            AND amountLeft(c) > 0 
            AND status(i) = InvoiceStatus.ready 
            AND NOT isCreditNote(i);
canBeMatched(CreditNote c, Invoice i) += canBeMatched(c, i);

EXTEND FORM invoice
    OBJECTS in = Invoice
    PROPERTIES(in) READONLY date, number, nameType
    PROPERTIES paid(i, in)
    FILTERS paid(i, in), NOT i = in
    
    OBJECTS inv = Invoice
    PROPERTIES(inv) READONLY date, number, nameType, toPay
    PROPERTIES setPaid(i, inv) DRAW inv TOOLBAR
    FILTERS canBeMatched[CreditNote, Invoice](i, inv)
;

DESIGN invoice {
    details {
        NEW creditInvoices {
            caption = 'Накладные';
            showIf = i IS CreditNote;
            MOVE BOX(in) { caption = 'Разнесенные'; }
            MOVE BOX(inv) { caption = 'Доступные'; }
        }
    }
}

// outstanding credit
amountLeft 'Остаток' (CreditNote c) = totalAmount(c) (-) invoiced(c);

EXTEND CLASS CreditNote : InvoiceOutstandingCredit;
date(CreditNote c) += date[Invoice](c);
number(CreditNote c) += number[Invoice](c);
customer (CreditNote c) += customer[Invoice](c);

EXTEND CLASS InvoiceOutstandingCreditType {
    creditNote 'Возврат'
}
type[InvoiceOutstandingCredit](CreditNote c) += InvoiceOutstandingCreditType.creditNote IF c IS CreditNote;

amount(CreditNote c) += totalAmount(c);
amountLeft(CreditNote c) += amountLeft(c);
