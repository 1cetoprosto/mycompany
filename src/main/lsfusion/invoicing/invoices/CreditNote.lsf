MODULE CreditNote;

REQUIRE InvoiceDone, InvoiceOutstandingCredit;

NAMESPACE Invoicing;

CLASS CreditNote 'Акт расхождения' : Invoice;
isCreditNote 'Акт расхождения' (Invoice i) = i IS CreditNote;
amountLeft 'Остаток' (CreditNote c) = totalAmount(c) (-) invoiced(c);

EXTEND CLASS CreditNote : InvoiceOutstandingCredit;
amount(CreditNote c) += totalAmount(c);
amountLeft(CreditNote c) += amountLeft(c);
partner (CreditNote c) += partner[Invoice](c);
date(CreditNote c) += date[Invoice](c);
number(CreditNote c) += number[Invoice](c);

CLASS InvoiceType 'Тип накладной' {
    invoice 'Накладная',
    creditNote 'Возврат'
}

name 'Имя' (InvoiceType o) = staticCaption(o) IF o IS InvoiceType CHARWIDTH 10;

type 'Тип' (Invoice i) = IF(isCreditNote(i)) THEN InvoiceType.creditNote
                                     ELSE InvoiceType.invoice;
nameType 'Тип' (Invoice i) = name(type(i));

type(CreditNote c) += ISTRING[30](nameType[Invoice](c));

typeColor (CreditNote c) = IF type[Invoice](c) = InvoiceType.creditNote THEN RGB(250,67,71);

canBeMatched(CreditNote c, Invoice i) = 
            partner[InvoiceOutstandingCredit](c) = partner(i) 
            AND amountLeft(c) > 0 
            AND NOT c = i 
            AND status(i) = InvoiceStatus.ready 
            AND NOT isCreditNote(i);
canBeMatched(CreditNote c, Invoice i) += canBeMatched(c, i);

EXTEND FORM invoice
    PROPERTIES(i) nameType  BACKGROUND typeColor(i)
;

DESIGN invoice {
    options {
        MOVE PROPERTY (nameType(i)) FIRST;
    }
}

EXTEND FORM invoices
    PROPERTIES(i) nameType AFTER nameStatus(i) BACKGROUND typeColor(i)
;

creditNote 'Создать акт расхождения' (Invoice i) {
    APPLY; 
    IF canceled() THEN RETURN;
    
    NEWSESSION { 
        NEW ni = CreditNote {
            date[Invoice](ni) <- currentDateTime();
            partner[Invoice](ni) <- partner(i);
            notes(ni) <- notes(i);
            FOR invoice(InvoiceLine l) = i INLINE NEW nl = InvoiceLine DO {
                invoice(nl) <- ni;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
                FOR in(l, Tax t) DO {
                    in(nl,t) <- in(l,t);
                }
            }
            SHOW invoice OBJECTS i = ni DOCKED;
        }
        
    }
}

EXTEND FORM invoice
    PROPERTIES(i) creditNote SHOWIF status(i) = InvoiceStatus.ready AND NOT isCreditNote(i)
;

EXTEND FORM invoice
    OBJECTS in = Invoice
    PROPERTIES(in) READONLY date, number, nameType
    PROPERTIES READONLY paid(i, in)
    FILTERS paid(i, in), NOT i = in
    
    OBJECTS inv = Invoice
    PROPERTIES(inv) READONLY date, number, nameType, toPay
    PROPERTIES addPayment(i, inv) DRAW inv TOOLBAR
    FILTERS canBeMatched[CreditNote, Invoice](i, inv)
;

DESIGN invoice {
    statusActions {
        primary {
            MOVE PROPERTY(creditNote(i)); 
        }               
    }
    pane {
        NEW outstandingCreditPane BEFORE total{
            type = TABBED;
            fill = 1;
            MOVE outstandingCredit;
            NEW creditInvoices {
                caption = 'Накладные';
                showIf = i IS CreditNote;
                MOVE BOX(in);
                MOVE BOX(inv);
            }
        }
    }
}

addCreditNote 'Возврат' () {
    NEWSESSION {
        NEW c = CreditNote {
            SHOW invoice OBJECTS i = c;  
        }
    }
}IMAGE 'add.png';

EXTEND FORM invoices
    PROPERTIES addCreditNote() DRAW i TOOLBAR
;
