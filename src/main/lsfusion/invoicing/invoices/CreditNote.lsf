MODULE CreditNote;

REQUIRE InvoicePayment, InvoiceOutstandingCredit;

NAMESPACE Invoicing;

CLASS CreditNote 'Акт расхождения' : Invoice;
isCreditNote 'Акт расхождения' (Invoice i) = i IS CreditNote;

EXTEND CLASS CreditNote : InvoiceOutstandingCredit;
amount(CreditNote c) += totalAmount(c);
partner (CreditNote c) += partner[Invoice](c);
account(CreditNote c) += partnerAccount(c);
date(CreditNote c) += date[Invoice](c);
number(CreditNote c) += number[Invoice](c);

CLASS InvoiceType 'Тип накладной' {
    invoice 'Накладная',
    creditNote 'Возврат'
}

name 'Имя' (InvoiceType o) = staticCaption(o) IF o IS InvoiceType CHARWIDTH 15;

type 'Тип' (Invoice i) = IF(isCreditNote(i)) THEN ISTRING[30](name(InvoiceType.creditNote))
                                     ELSE ISTRING[30](name(InvoiceType.invoice));
type(CreditNote c) += type[Invoice](c);
isCreditNote(CreditNote c) += isCreditNote[Invoice](c);

EXTEND FORM invoice
    PROPERTIES(i) type
;

creditNote 'Создать акт расхождения' (Invoice i) {
    APPLY; 
    IF canceled() THEN RETURN;
    
    NEWSESSION { 
        NEW ni = CreditNote {
            date[Invoice](ni) <- currentDateTime();
            partner[Invoice](ni) <- partner(i);
            notes(ni) <- notes(i);
            FOR invoice(InvoiceLine l) = i INLINE NEW nl = InvoiceLine DO {
                invoice(nl) <- ni;
                item(nl) <- item(l);
                quantity(nl) <- quantity(l);
                unitPrice(nl) <- unitPrice(l);
                FOR in(l, Tax t) DO {
                    in(nl,t) <- in(l,t);
                }
            }
            SHOW invoice OBJECTS i = ni DOCKED;
        }
        
    }
}

EXTEND FORM invoice
    PROPERTIES(i) creditNote SHOWIF status(i) = InvoiceStatus.ready AND NOT isCreditNote(i)
;

EXTEND FORM invoice
    OBJECTS in = Invoice
    PROPERTIES(in) READONLY date, number, type
    PROPERTIES READONLY paid(i, in)
    FILTERS paid(i, in), NOT i = in
    
    OBJECTS inv = Invoice
    PROPERTIES(inv) READONLY date, number, type, toPay
    PROPERTIES addPayment(i, inv) DRAW inv TOOLBAR
    FILTERS partner(inv) = partner(i), toPay(inv) > 0, NOT i = inv,
            status(inv) = InvoiceStatus.ready
;

DESIGN invoice {
    statusActions {
        primary {
            MOVE PROPERTY(creditNote(i)); 
        }               
    }
    pane {
        NEW outstandingCreditPane BEFORE total{
            type = TABBED;
            fill = 1;
            MOVE outstandingCredit;
            NEW creditInvoices {
                caption = 'Накладные';
                showIf = i IS CreditNote;
                MOVE BOX(in);
                MOVE BOX(inv);
            }
        }
    }
}

addInvoice 'Накладная' () {
    NEWSESSION {
        NEW i = Invoice {
            SHOW invoice OBJECTS i = i;  
        }
    }
}IMAGE 'add.png';

addCreditNote 'Возврат' () {
    NEWSESSION {
        NEW c = CreditNote {
            SHOW invoice OBJECTS i = c;  
        }
    }
}IMAGE 'add.png';

EXTEND FORM invoices
    PROPERTIES addInvoice() DRAW i TOOLBAR
    PROPERTIES addCreditNote() DRAW i TOOLBAR
;
