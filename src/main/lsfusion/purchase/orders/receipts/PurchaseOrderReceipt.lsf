MODULE PurchaseOrderReceipt;

REQUIRE PurchaseOrder, PurchaseOrderConfirmed, PurchaseOrderCanceled, 
        ReceiptCanceled;

NAMESPACE Purchase;

// options
receiptType = DATA ReceiptType ();
nameReceiptType 'Тип поступления на основе заказа' = name(receiptType());
EXTEND FORM options PROPERTIES nameReceiptType();

// relation
orderLine = DATA OrderLine (ReceiptLine) INDEXED;
order = DATA Order (Receipt);

// source
sourceDocument (Receipt r) += WHEN order(r) THEN description(order(r));
openSourceDocument (Receipt r) + { IF order(r) THEN edit(order(r)); }

done 'Поступило' (OrderLine ol) = 
    GROUP SUM done(ReceiptLine rl) IF orderLine(rl) = ol AND active(receipt(rl));
toReceive 'К поступлению' (OrderLine ol) = 
    max(quantity(ol) (-) done(ol), 0) IF item(ol) IS Product;

toReceive 'К поступлению' (Order o) = GROUP SUM toReceive(OrderLine ol) IF order(ol) = o;

CONSTRAINT (quantity(OrderLine ol) (-) done(ol)) < 0 AND confirmed(order(ol)) 
    MESSAGE 'По товару поступление превышает количество в заказе';

lastOpenReceipt 'Последний открытый приход' (Order o) =  
    GROUP LAST Receipt r IF order(r) = o AND status(r) = ReceiptStatus.ready ORDER r MATERIALIZED;

WHEN ([GROUP SUM 1 IF CHANGED(toReceive(OrderLine l)) BY order(l)](Order o) OR SET(confirmed(o)) OR DROPPED(locked(o)) OR  
      CHANGED(vendor(o)) OR CHANGED(scheduledDateTime(o)) OR CHANGED(location(o)) OR CHANGED(number(o))) AND 
      status(o) = OrderStatus.confirmed AND location(o) AND receiptType() DO {
    IF NOT lastOpenReceipt(o) AND toReceive(o) > 0 THEN   
        NEW r = Receipt { 
            order(r) <- o; 
            type(r) <- receiptType();
            ready(r) <- TRUE;           
        }
        
    FOR Receipt r = lastOpenReceipt(o) DO {
        vendor(r) <- vendor(o);
        scheduledDateTime(r) <- scheduledDateTime(o);
        
        location(r) <- location(o);
    }

    FOR order(OrderLine ol) = o AND toReceive(ol) > 0 AND 
        NOT (GROUP SUM 1 IF receipt(ReceiptLine l) = lastOpenReceipt(o) AND orderLine(l) = ol) 
            NEW rl = ReceiptLine DO {            
        receipt(rl) <- lastOpenReceipt(o);
        product(rl) <- item(ol);
        orderLine(rl) <- ol;
    }
    initialDemand(ReceiptLine l) <- toReceive(orderLine(l)) IF toReceive(orderLine(l)) > 0 WHERE receipt(l) = lastOpenReceipt(o);  
    DELETE ReceiptLine l WHERE receipt(l) = lastOpenReceipt(o) AND NOT initialDemand(l);
    IF NOT countLines(lastOpenReceipt(o)) THEN
        DELETE Receipt r WHERE r = lastOpenReceipt(o); 
}

WHEN SET(locked(Order o)) DO {
    DELETE Receipt r WHERE r = lastOpenReceipt(o);
}

FORM orderReceiptShow 'Оприходовано на склад'
    OBJECTS ol = OrderLine
    
    OBJECTS rl = ReceiptLine
    PROPERTIES(rl) READONLY nameStatus, number, scheduledDateTime, initialDemand, done
    FILTERS orderLine(rl) = ol
;

EXTEND FORM order
    PROPERTIES(l) SHOWIF confirmed(o) done ON CHANGE { DIALOG orderReceiptShow OBJECTS ol = l; } BACKGROUND NOT done(l) = quantity(l)
        
    OBJECTS rc = Receipt
    PROPERTIES(rc) READONLY nameStatus BACKGROUND colorStatus(rc), number, scheduledDateTime, executionDateTime
    PROPERTIES(rc) NEWSESSION EDIT GRID   
    FILTERS order(rc) = o
;

DESIGN order {
    relatedDoc  {
        MOVE BOX(rc) {
            GRID(rc) { headerHeight = 24; }
        }
        REMOVE TOOLBARSYSTEM(rc);
    }
}
