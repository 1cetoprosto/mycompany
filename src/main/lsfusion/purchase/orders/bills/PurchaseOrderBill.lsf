MODULE PurchaseOrderBill;

REQUIRE PurchaseOrder, PurchaseOrderConfirmed,
        BillDone, BillCanceled, Product;

NAMESPACE Purchase;

// invoicing policy
CLASS InvoicingPolicy 'Политика оформления накладных' {
    ordered 'Заказанное количество'
}
name 'Имя' (InvoicingPolicy p) = staticCaption(p) IF p IS InvoicingPolicy CHARWIDTH 20;

invoicingPolicy = DATA InvoicingPolicy ();
nameInvoicingPolicy 'Политика оформления накладных' () = name(invoicingPolicy()); 
EXTEND FORM options PROPERTIES() nameInvoicingPolicy;

// lines
orderLine = DATA OrderLine (BillLine);

in (Order o, Bill i) = GROUP SUM 1 IF order(orderLine(BillLine l)) = o AND bill(l) = i MATERIALIZED; 

countOrders 'Кол-во заказов' (Bill i) = GROUP SUM 1 IF in(Order o, i) MATERIALIZED;
numberDateOrders 'Заказы' (Bill i) = GROUP CONCAT numberDate(Order o) IF in(o, i), ',' CHARWIDTH 30; 

// form
openOrders (Bill b) { 
    FOR in(Order o, b) DO 
        edit(o); 
}
EXTEND FORM bill
    PROPERTIES(b) numberDateOrders ON CHANGE openOrders(b) SHOWIF countOrders(b)
;
DESIGN bill {
    footer {
        MOVE PROPERTY(numberDateOrders(b));
    }
}
EXTEND FORM bills
    PROPERTIES(b) READONLY numberDateOrders
;

billed 'Оформлено накладных' (OrderLine ol) = 
    GROUP SUM quantity(BillLine bl) IF orderLine(bl) = ol AND ready(bill(bl)) AND NOT canceled(bill(bl));
paid 'Оплачено' (OrderLine ol) = 
    GROUP SUM quantity(BillLine bl) IF orderLine(bl) = ol AND done(bill(bl)) AND NOT canceled(bill(bl));
toBill 'К оформлению' (OrderLine l) = max(quantity(l) (-) billed(l), 0);
 
toBill 'К оформлению' (Order o) = GROUP SUM toBill(OrderLine ol) IF order(ol) = o;

createOrderBillLines ABSTRACT LIST (Order, Bill);

createBill 'Оформить накладную' (Order o) {
    APPLY;
    IF canceled() THEN RETURN;
               
    NEWSESSION {
        NEW nb = Bill {
            ready(nb) <- TRUE;
            
            vendor(nb) <- vendor(o);
            vendorReference(nb) <- vendorReference(o);
            paymentTerms(nb) <- paymentTerms(o);
                         
            FOR order(OrderLine ol) = o AND toBill(ol) > 0 AND
                (invoicingPolicy() = InvoicingPolicy.ordered OR NOT invoicingPolicy() OR NOT item(ol) IS Product) 
                NEW bl = BillLine DO {
                bill(bl) <- nb;
                item(bl) <- item(ol);
                description(bl) <- description(ol);
                quantity(bl) <- toBill(ol);
                price(bl) <- price(ol);
                orderLine(bl) <- ol;
            }                            
            createOrderBillLines(o, nb);
            executeLocalEvents();
            FOR bill(BillLine bl) = nb DO {
                in(bl, Tax t) <- in(orderLine(bl), t);
            }                                
            SHOW bill OBJECTS b = nb DOCKED;
        }
    }
}

FORM orderBillShow 'Выставлено счетов'
    OBJECTS ol = OrderLine
    
    OBJECTS bl = BillLine
    PROPERTIES(bl) READONLY nameStatus, number, dateTime, quantity
    FILTERS orderLine(bl) = ol
;

EXTEND FORM order   
    PROPERTIES(o) SHOWIF (status(o) = OrderStatus.confirmed AND toBill(o) > 0) createBill
    PROPERTIES(l) SHOWIF confirmed(o) billed ON CHANGE { DIALOG orderBillShow OBJECTS ol = l; } BACKGROUND NOT billed(l) = quantity(l)
    PROPERTIES(l) SHOWIF confirmed(o) paid ON CHANGE { DIALOG orderBillShow OBJECTS ol = l; } BACKGROUND NOT paid(l) = quantity(l)

    OBJECTS bi = Bill
    PROPERTIES(bi) READONLY nameStatus BACKGROUND colorStatus(bi), number, dateTime    
    PROPERTIES(bi) NEWSESSION EDIT GRID   
    FILTERS in(o, bi)       
;
 
DESIGN order {
    primaryActions {
        MOVE PROPERTY(createBill(o)) { fontStyle = 'bold'; };
    }
    relatedDoc  {
        MOVE BOX(bi) {
            GRID(bi) { headerHeight = 24; }
        }
        REMOVE TOOLBARBOX(bi);
    }
}