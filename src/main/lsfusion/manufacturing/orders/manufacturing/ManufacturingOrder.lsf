MODULE ManufacturingOrder;

REQUIRE ManufacturingNavigator, ManufacturingSettings, Numerator, BoM, Individual, SalesOrder;

NAMESPACE Manufacturing;

CLASS ManufacturingOrder 'Заказ на производство';

number 'Номер' = DATA STRING[28] (ManufacturingOrder);
series 'Серия' = DATA STRING[2] (ManufacturingOrder);

numeratorOrder 'Нумератор заказов' = DATA Numerator();
nameNumeratorOrder 'Нумератор заказов' = name(numeratorOrder());

loadInitialData () + {
    NEWSESSION {
        NEW n = Numerator {
            name(n) <- 'Производства';
            series(n) <- 'MO';
            minValue(n) <- 1;
            maxValue(n) <- 999999;
            stringLength(n) <- 6;
            numeratorOrder() <- n;
        }
        APPLY;
    }
}

EXTEND FORM options
    PROPERTIES nameNumeratorOrder()
;

DESIGN options {
    OBJECTS {
        MOVE PROPERTY(nameNumeratorOrder());
    }
}

WHEN SETCHANGED(ManufacturingOrder m IS ManufacturingOrder  AND numeratorOrder() AND NOT number(m)) DO {
    number(m) <- curStringValue(numeratorOrder());
    series(m) <- series(numeratorOrder());
    incrementValueSession(numeratorOrder());   
}
seriesNumber 'Номер' (ManufacturingOrder o) = CONCAT '/', series(o), number(o);

product 'Номенклатура' = DATA Product (ManufacturingOrder) NONULL DELETE;
nameProduct 'Номенклатура' (ManufacturingOrder m) = name(product(m));
idProduct 'Код номенклатуры' (ManufacturingOrder m) = id(product(m));

quantity 'Кол-во' = DATA NUMERIC[16,3] (ManufacturingOrder) NONULL;
unitMeasure 'Ед.изм.' = DATA ItemMeasure (ManufacturingOrder);
nameUnitMeasure 'Ед.изм.' (ManufacturingOrder m) = name(unitMeasure(m));

WHEN LOCAL SET(product(ManufacturingOrder m)) DO {
    unitMeasure(m) <- unitMeasure(product(m));
} 

bom 'Технологическая карта' = DATA Bom (ManufacturingOrder) NONULL;
referenceBom 'Код технологической карты' (ManufacturingOrder m) = reference(bom(m));
deadline 'Дата старта' = DATA DATETIME (ManufacturingOrder);
manufacturingDate 'Дата производства' = DATA DATETIME (ManufacturingOrder);
responsible 'Ответственный' = DATA Individual (ManufacturingOrder);
nameResponsible 'Ответственный' (ManufacturingOrder m) = name(responsible(m));
source 'Исходный документ' = DATA Order (ManufacturingOrder);
numberSource 'Исходный документ' (ManufacturingOrder m) = seriesNumber(source(m));
company 'Компания' = DATA Partner (ManufacturingOrder);
nameCompany 'Компания' (ManufacturingOrder m) = name(company(m));

CONSTRAINT company(ManufacturingOrder m) AND NOT company(m) IS Company
    CHECKED BY company[ManufacturingOrder]
    MESSAGE 'Нужно выбрать компанию';
 
CONSTRAINT responsible(ManufacturingOrder m) AND company(m) AND NOT (legalEntity(responsible(m)) = company(m) AND responsible(m) IS Individual)
    CHECKED BY responsible
    MESSAGE 'Нужно выбрать сотрудника указанной компании';
    
CONSTRAINT product(ManufacturingOrder m) AND bom(m) AND NOT product(m) = product(bom(m))
    CHECKED BY bom[ManufacturingOrder]
    MESSAGE 'Нужно выбрать технологическую карту для заданного продукта';
    
materialsLocation 'Место хранения материалов' = DATA Location (ManufacturingOrder) NONULL;
nameMaterialsLocation 'Место хранения материалов' (ManufacturingOrder m) = name(materialsLocation(m));
productsLocation 'Место хранения произведенных товаров' = DATA Location (ManufacturingOrder) NONULL;
nameProductsLocation 'Место хранения произведенных товаров' (ManufacturingOrder m) = name(productsLocation(m));

CLASS ConsumedLine 'Расходные материалы';

manufacturingOrder 'Заказ на производство' = DATA ManufacturingOrder (ConsumedLine) NONULL DELETE;
product 'Номенклатура' = DATA Product (ConsumedLine);
nameProduct 'Номенклатура' (ConsumedLine l) = name(product(l));
unitMeasure 'Ед.изм.' = DATA ItemMeasure (ConsumedLine);
nameUnitMeasure 'Ед.изм.' (ConsumedLine l) = name(unitMeasure(l));
toConsume 'К расходу' = DATA NUMERIC[16,3] (ConsumedLine);
reserved 'Зарезервировано' = DATA NUMERIC[16,3] (ConsumedLine);
consumed 'Израсходовано' = DATA NUMERIC[16,3] (ConsumedLine);

dateReserved 'Дата резервирования' = DATA DATETIME (ConsumedLine);

WHEN LOCAL SET(product(ConsumedLine l)) DO {
    unitMeasure(l) <- unitMeasure(product(l));
} 

CLASS FinishedLine 'Готовые продукты';

manufacturingOrder 'Заказ на производство' = DATA ManufacturingOrder (FinishedLine) NONULL DELETE;
product 'Номенклатура' = DATA Product (FinishedLine);
nameProduct 'Номенклатура' (FinishedLine l) = name(product(l));
unitMeasure 'Ед.изм.' = DATA ItemMeasure (FinishedLine);
nameUnitMeasure 'Ед.изм.' (FinishedLine l) = name(unitMeasure(l));
done 'Произведено' = DATA NUMERIC[16,3] (FinishedLine);

WHEN LOCAL SETCHANGED(bom(ManufacturingOrder m)) DO {
    FOR manufacturingOrder(ConsumedLine l) = m DO DELETE l;
    
    FOR bom(ComponentLine cl) = bom(m) DO NEW l = ConsumedLine {
        manufacturingOrder(l) <- m;
        product(l) <- product(cl);
        unitMeasure(l) <- unitMeasure(cl);
        toConsume(l) <- NUMERIC[16,3](quantity(cl) * quantity(m));
    } 
}

FORM manufacturingOrders 'Заказы на производство'
    OBJECTS o = ManufacturingOrder
    PROPERTIES(o) READONLY seriesNumber, deadline, manufacturingDate, nameProduct, numberSource, quantity, nameUnitMeasure
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE 
    
    LIST ManufacturingOrder OBJECT o
;

readonly = ABSTRACT CASE BOOLEAN (ManufacturingOrder);

FORM manufacturingOrder 'Заказ на производство'
    OBJECTS o = ManufacturingOrder PANEL 
    PROPERTIES(o) READONLYIF  readonly(o) nameProduct, quantity, nameUnitMeasure, referenceBom, deadline, 
        nameResponsible, numberSource, nameCompany, nameMaterialsLocation, nameProductsLocation, manufacturingDate READONLY 
    
    OBJECTS c = ConsumedLine
    PROPERTIES(c) READONLY nameProduct, nameUnitMeasure, toConsume, reserved, dateReserved, consumed
    FILTERS manufacturingOrder(c) = o
    
    OBJECTS l = FinishedLine
    PROPERTIES(l) READONLY nameProduct, nameUnitMeasure, done
    FILTERS manufacturingOrder(l) = o
    
    EDIT ManufacturingOrder OBJECT o
;

copyManufacturingOrder 'Копировать' (ManufacturingOrder m) {
    NEWSESSION {
        NEW o = ManufacturingOrder {
            product(o) <- product(m);
            quantity(o) <- quantity(m);
            unitMeasure(o) <- unitMeasure(m);
            bom(o) <- bom(m);
            responsible(o) <- responsible(m);
            source(o) <- source(m);
            company(o) <- company(m);
            materialsLocation(o) <- materialsLocation(m);
            productsLocation(o) <- productsLocation(m);
            
            SHOW manufacturingOrder OBJECTS o = o DOCKED;
        }
    }
}

EXTEND FORM manufacturingOrder
    PROPERTIES(o) copyManufacturingOrder
;

DESIGN manufacturingOrder {
    OBJECTS {
        NEW statusPane FIRST {
            caption = 'Статусы';
            type = CONTAINERH;
            alignment = STRETCH;                          
            NEW statusActions {
                type = CONTAINERH;                    
                flex = 1; 
                NEW primary {
                    type = CONTAINERH;
                }
                NEW secondary {
                    type = CONTAINERH;
                    MOVE PROPERTY(copyManufacturingOrder(o));  
                }            
            }
             NEW status AFTER statusActions {
                type = CONTAINERH;
             }
        }
        NEW header {
            alignment = STRETCH;
            type = CONTAINERH;
            NEW leftHeader {
                caption = '';
                MOVE PROPERTY(nameProduct(o)) { notNull = TRUE; }
                NEW item {
                    type = CONTAINERH;
                    MOVE PROPERTY(quantity(o)) { notNull = TRUE; }
                    MOVE PROPERTY(nameUnitMeasure(o));
                }
                MOVE PROPERTY(referenceBom(o)) { notNull = TRUE; }
                MOVE PROPERTY(manufacturingDate(o));
            }
            NEW rightHeader {
                caption = '';
                MOVE PROPERTY(deadline(o));  
                MOVE PROPERTY(nameResponsible(o));
                MOVE PROPERTY(numberSource(o));
                MOVE PROPERTY(nameCompany(o));        
            }
        }
        NEW details {
            fill = 1;
            type = TABBED;
            NEW consumed {
                fill = 1;
                caption = 'Расходные материалы';
                MOVE BOX(c);
            }
            NEW finished {
                fill = 1;
                caption = 'Готовые продукты';
                MOVE BOX(l);
            }
            NEW misc {
                fill = 1;
                caption = 'Разное';
                MOVE PROPERTY(nameMaterialsLocation(o)) { notNull = TRUE; }
                MOVE PROPERTY(nameProductsLocation(o)) { notNull = TRUE; }
            }
        }   
    }
}

NAVIGATOR {
    operations {
        NEW manufacturingOrders;
    }
}