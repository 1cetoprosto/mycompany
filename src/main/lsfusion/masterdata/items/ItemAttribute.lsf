MODULE ItemAttribute;

REQUIRE Item;

NAMESPACE MasterData;

CLASS ItemAttribute 'Атрибут';

id 'Код' = DATA STRING[50] (ItemAttribute) IN id CHARWIDTH 8;
itemAttribute (STRING[50] id) = GROUP AGGR ItemAttribute i BY id(i);

name 'Название' = DATA ISTRING[50] (ItemAttribute) IN id;

set 'Вкл.' = DATA BOOLEAN (ItemAttribute, Category);

valid (ItemAttribute a, Category c) = GROUP LAST set(a, Category cc) ORDER level(c, cc); 

sequence 'Последовательность' = DATA INTEGER (ItemAttribute);
prefix 'Префикс' = DATA STRING[15] (ItemAttribute);
suffix 'Суффикс' = DATA STRING[15] (ItemAttribute);

CLASS ItemAttributeValue 'Значение';

itemAttribute 'Атрибут' = DATA ItemAttribute (ItemAttributeValue) NONULL DELETE;
nameAttribute 'Атрибут' (ItemAttributeValue v) = name(itemAttribute(v));

value 'Значение' = DATA STRING (ItemAttributeValue) IN id;

set 'Вкл.' = DATA BOOLEAN (ItemAttributeValue, Category);
valid (ItemAttributeValue v, Category c) = GROUP LAST set(v, Category cc) ORDER level(c, cc); 

countCategory (ItemAttributeValue v) = GROUP SUM 1 IF set(v, Category c);

CONSTRAINT set(ItemAttributeValue v, Category c) AND NOT valid(itemAttribute(v), c)
    MESSAGE 'Категория значения должна совпадать с категорией атрибута';
    


FORM attributes 'Атрибуты'
    OBJECTS a = ItemAttribute
    PROPERTIES(a) READONLY id, name, sequence
    PROPERTIES(a) NEWSESSION NEW, EDIT, DELETE 
    
    LIST ItemAttribute OBJECT a
;

FORM attribute 'Атрибут'
    OBJECTS a = ItemAttribute PANEL
    PROPERTIES(a) id, name, sequence, prefix, suffix
    
    TREE categories c = Category PARENT parent(c) 
    PROPERTIES name(c) READONLY, set(a, c) BACKGROUND RGB(26,153,79) IF GROUP LAST set(a, Category cc) ORDER level(cc, c)
    ORDER name(c)
           
    OBJECTS v = ItemAttributeValue
    PROPERTIES(v) value, NEW, DELETE
    FILTERS itemAttribute(v) = a
    
    TREE cat cc = Category PARENT parent(cc)
    PROPERTIES name(cc) READONLY, set(v, cc) BACKGROUND RGB(26,153,79) IF GROUP LAST set(v, Category ccc) ORDER level(ccc, cc)
    ORDER name(cc)
    
    EDIT ItemAttribute OBJECT a
;

DESIGN attribute {
    OBJECTS {
        NEW pane {
            fill = 1;
            type = SPLITH;
            NEW attribute {
                fill = 1;
                NEW name {
                    caption = 'Опции атрибута';
                    MOVE PROPERTY(name(a));
                    MOVE PROPERTY(id(a));
                }
                NEW itemValues {
                    caption = 'Задает наименование номенклатуры';
                    MOVE PROPERTY(sequence(a));
                    MOVE PROPERTY(prefix(a));
                    MOVE PROPERTY(suffix(a));
                }
            }
            NEW details {
                type = TABBED;
                fill = 5;
                MOVE BOX(TREE categories) {
                    caption = 'Категории атрибута';
                }
                NEW values {
                    type = CONTAINERH;
                    caption = 'Значения';
                    fill = 2;
                    MOVE BOX(v);
                    MOVE BOX(TREE cat) {
                        caption = 'Категории значений';
                        fill = 1;
                    }    
                }
            }
        }
    }
}

NAVIGATOR {
    masterData {
        NEW attributes;
    }
}

attribute = DATA ItemAttributeValue (Item, ItemAttribute);
value 'Значение' (Item i, ItemAttribute a) = value(attribute(i, a));
fullValue 'Полное значение' (Item i, ItemAttribute a) = (CONCAT '', prefix(a), value(i, a), suffix(a)) IF value(i, a);

suffixName(Item i) += STRING(GROUP CONCAT fullValue(i, ItemAttribute a) IF sequence(a), ' ' ORDER sequence(a), a);

CONSTRAINT value(Item i, ItemAttribute a) AND NOT (valid(attribute(i, a), category(i)) OR (NOT countCategory(attribute(i, a)) AND valid(a, category(i))))
    CHECKED BY attribute[Item, ItemAttribute]
    MESSAGE 'Категория номенклатуры должна совпадать с категорией значения';

CONSTRAINT value(Item i, ItemAttribute a) AND NOT itemAttribute(attribute(i, a)) = a
    CHECKED BY attribute[Item, ItemAttribute]
    MESSAGE 'Выбрано недопустимое значение для данной номенклатуры';
    
CONSTRAINT DROPPED(ItemAttributeValue v IS ItemAttributeValue) AND PREV(attribute(Item i, ItemAttribute a)) = v
    MESSAGE 'Нельзя удалять значение, которое используется';

FORM val 'Значение'
    OBJECTS v = ItemAttributeValue PANEL 
    PROPERTIES(v) value, nameAttribute READONLY 
    
    EDIT ItemAttributeValue OBJECT v  
;

newVal 'Значение' (ItemAttribute a) {
    NEWSESSION {
        NEW v = ItemAttributeValue {
            itemAttribute(v) <- a;
            SHOW val OBJECTS v = v;
        }
    }
}IMAGE 'add.png';

FORM vals 'Значения'
    OBJECTS a = ItemAttribute PANEL 
    PROPERTIES(a) READONLY name

    OBJECTS v = ItemAttributeValue
    PROPERTIES READONLY value(v)
    PROPERTIES newVal(a) DRAW v TOOLBAR 
    PROPERTIES(v) NEWSESSION EDIT, DELETE
    FILTERS itemAttribute(v) = a
    
    LIST ItemAttributeValue OBJECT v
;

isVariantSet = ABSTRACT BOOLEAN (Item, ItemAttribute);

EXTEND FORM item
    OBJECTS a = ItemAttribute
    PROPERTIES name(a) READONLY, value(i, a) ON CHANGE { DIALOG vals OBJECTS a = a, v INPUT NULL DO { attribute(i, a) <- v; } } 
                    READONLYIF (readonly(i) AND isVariantSet(i, a)) BACKGROUND RGB(204,207,205) IF readonly(i)
    FILTERS valid(a, category(i))
;

DESIGN item {
    tabs {
        NEW attributes FIRST {
            caption = 'Атрибуты';
            MOVE BOX(a);
        }
    }
}

attributeFilter = DATA LOCAL ItemAttributeValue (ItemAttribute);
value 'Значение' (ItemAttribute a) = value(attributeFilter(a));

CONSTRAINT attributeFilter(ItemAttribute a) AND NOT itemAttribute(attributeFilter(a)) = a
    CHECKED BY attributeFilter
    MESSAGE 'Значение должно принадлежать атрибуту';

EXTEND FORM items
    OBJECTS ia = ItemAttribute BEFORE i
    PROPERTIES name(ia) READONLY, value(ia)
    FILTERS attributeFilter(ia) = attribute(i, ia) OR NOT attributeFilter(ia)
    FILTERS GROUP SUM 1 IF set(ia, Category cc) AND level(cc, c) 
;

DESIGN items {
    filters {
        MOVE BOX(ia);
    }
}

copy(Item n, Item o) + {
   FOR attribute(o, ItemAttribute a) DO {
       attribute(n, a) <- attribute(o, a);
   }
}



 