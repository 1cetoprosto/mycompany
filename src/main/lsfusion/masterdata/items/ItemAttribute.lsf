MODULE ItemAttribute;

REQUIRE Item;

NAMESPACE MasterData;

CLASS ItemAttribute 'Атрибут';

id 'Код' = DATA STRING[50] (ItemAttribute) IN id CHARWIDTH 8;
itemAttribute (STRING[50] id) = GROUP AGGR ItemAttribute i BY id(i);

name 'Название' = DATA ISTRING[50] (ItemAttribute) IN id;

set 'Вкл.' = DATA BOOLEAN (ItemAttribute, Category);

valid (ItemAttribute a, Category c) = GROUP LAST set(a, Category cc) ORDER level(c, cc); 

sequence 'Последовательность' = DATA INTEGER (ItemAttribute);
prefix 'Префикс' = DATA STRING[15] (ItemAttribute);
suffix 'Суффикс' = DATA STRING[15] (ItemAttribute);

CLASS ItemAttributeValue 'Значение';

itemAttribute 'Атрибут' = DATA ItemAttribute (ItemAttributeValue) NONULL;
nameAttribute 'Атрибут' (ItemAttributeValue v) = name(itemAttribute(v));

value 'Значение' = DATA STRING (ItemAttributeValue);

set 'Вкл.' = DATA BOOLEAN (ItemAttributeValue, Category);
valid (ItemAttributeValue v, Category c) = GROUP LAST set(v, Category cc) ORDER level(c, cc); 

countCategory (ItemAttributeValue v) = GROUP SUM 1 IF set(v, Category c);

CONSTRAINT set(ItemAttributeValue v, Category c) AND NOT valid(itemAttribute(v), c)
    MESSAGE 'Категория значения должна совпадать с категорией атрибута';

FORM attributes 'Атрибуты'
    OBJECTS a = ItemAttribute
    PROPERTIES(a) READONLY id, name
    PROPERTIES(a) NEWSESSION NEW, EDIT, DELETE 
    
    LIST ItemAttribute OBJECT a
;

FORM attribute 'Атрибут'
    OBJECTS a = ItemAttribute PANEL
    PROPERTIES(a) id, name, sequence, prefix, suffix
    
    TREE categories c = Category PARENT parent(c) 
    PROPERTIES name(c) READONLY, set(a, c) BACKGROUND RGB(26,153,79) IF set(a, c)
    ORDER name(c)
           
    OBJECTS v = ItemAttributeValue
    PROPERTIES(v) value, NEW, DELETE
    FILTERS itemAttribute(v) = a
    
    TREE cat cc = Category PARENT parent(cc)
    PROPERTIES name(cc) READONLY, set(v, cc) BACKGROUND RGB(26,153,79) IF set(v, cc)
    ORDER name(cc)
    
    EDIT ItemAttribute OBJECT a
;

DESIGN attribute {
    OBJECTS {
        NEW pane {
            fill = 1;
            type = SPLITH;
            NEW attribute {
                fill = 1;
                caption = 'Атрибут';
                NEW name {
                    caption = 'Опции атрибута';
                    MOVE PROPERTY(name(a));
                    MOVE PROPERTY(id(a));
                }
                NEW itemValues {
                    caption = 'Задает наименование номенклатуры';
                    MOVE PROPERTY(sequence(a));
                    MOVE PROPERTY(prefix(a));
                    MOVE PROPERTY(suffix(a));
                }
            }
            NEW details {
                type = TABBED;
                fill = 5;
                MOVE BOX(TREE categories) {
                    caption = 'Категории атрибута';
                }
                NEW values {
                    type = SPLITV;
                    caption = 'Значения';
                    fill = 2;
                    MOVE BOX(v);
                    MOVE BOX(TREE cat) {
                        caption = 'Категории значений';
                    }    
                }
            }
        }
    }
}

NAVIGATOR {
    masterData {
        NEW attributes;
    }
}

attribute = DATA ItemAttributeValue (Item, ItemAttribute);
value 'Значение' (Item i, ItemAttribute a) = value(attribute(i, a));
fullValue 'Полное значение' (Item i, ItemAttribute a) =IF value(i, a) THEN CONCAT '', prefix(a), value(i, a), suffix(a);

suffixName(Item i) += STRING(GROUP CONCAT fullValue(i, ItemAttribute a) IF sequence(a), ' ' ORDER sequence(a));

CONSTRAINT value(Item i, ItemAttribute a) AND NOT (valid(attribute(i, a),category(i)) OR (NOT countCategory(attribute(i, a)) AND valid(a, category(i))))
    CHECKED BY value[Item, ItemAttribute]
    MESSAGE 'Категория номенклатуры должна совпадать с категорией значения';

CONSTRAINT value(Item i, ItemAttribute a) AND NOT itemAttribute(attribute(i, a)) = a
    CHECKED BY attribute[Item, ItemAttribute]
    MESSAGE 'Выбрано недопустимое значение для данной номенклатуры';

FORM val
    OBJECTS v = ItemAttributeValue
    PROPERTIES READONLY value(v)
    
    LIST ItemAttributeValue OBJECT v
;

EXTEND FORM item
    OBJECTS a = ItemAttribute
    PROPERTIES name(a) READONLY, value(i, a)
    FILTERS valid(a, category(i))
;

DESIGN item {
    tabs {
        NEW attributes FIRST {
            caption = 'Атрибуты';
            MOVE BOX(a);
        }
    }
}

attributeFilter = DATA LOCAL ItemAttributeValue (ItemAttribute);
filterOn 'Вкл' = DATA LOCAL BOOLEAN (ItemAttribute);

EXTEND FORM items
    OBJECTS ia = ItemAttribute BEFORE i
    PROPERTIES name(ia) READONLY, filterOn(ia)
    //FILTERS attributeFilter(ia) = attribute(i, ia) OR NOT attributeFilter(ia)
    FILTERS IF filterOn(ia) THEN value(i, ia)
    FILTERS valid(ia, c)
;

DESIGN items {
    filters {
        MOVE BOX(ia);
    }
}



 