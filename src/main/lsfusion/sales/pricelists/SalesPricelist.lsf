MODULE SalesPricelist;

REQUIRE Item, Partner, ItemSale, PartnerSale, TaxItem, SalesSettings, SalesOrder, SalesPriceTypeMarkup, CostLedger;

NAMESPACE Sales; 

// http://documentation.luxsoft.by/x/RwBZB

CLASS Pricelist 'Прайс-листы';

@defineSeriesNumber(pricelist, 'Прайс-листы', 'ПЛ');

startDate 'Начало действия' = DATA DATETIME (Pricelist);
endDate 'Окончание действия' = DATA DATETIME (Pricelist);

note 'Примечания' = DATA STRING[50] (Pricelist);

// price types
editIn 'Изменять цены' = DATA BOOLEAN (Pricelist, PriceType);

priceListTypes 'Варианты цен' (Pricelist pricelist) = 
    GROUP CONCAT name(PriceType pricelistType) IF editIn(pricelist, pricelistType) , ', '
          ORDER pricelistType CHARWIDTH 10 MATERIALIZED;

FORM chooseTypes 'Выбор видов цен'
    OBJECTS pr = Pricelist PANEL 
    
    OBJECTS t = PriceType
    PROPERTIES(t) READONLY name 
    PROPERTIES(pr, t) editIn[Pricelist,PriceType]
;

// lines
CLASS PricelistLine 'Номенклатура';

pricelist 'Прайс-лист' = DATA Pricelist (PricelistLine) NONULL DELETE;

item 'Номенклатура' = DATA Item (PricelistLine);
nameItem 'Номенклатура' (PricelistLine prl) = name(item(prl));
nameUnitMeasure 'Единица измерения' (PricelistLine prl) = name(unitMeasure(item(prl))); 

costPrice 'Себестоимость' = DATA NUMERIC[32,16] (PricelistLine);
WHEN LOCAL SETCHANGED(item(PricelistLine l)) DO costPrice(l) <- OVERRIDE costPrice(item(l)), cost(item(l));

markup 'Надбавка' = DATA NUMERIC[10,2] (PricelistLine, PriceType);
price 'Цена' = DATA NUMERIC[10,2] (PricelistLine, PriceType);

// prices
pricelistLineB (PriceType t, Item i, DATETIME d) = 
    GROUP LAST PricelistLine prl IF item(prl) = i AND price(prl, t) AND 
               NOT startDate(pricelist(prl)) >= d AND NOT endDate(pricelist(prl)) < d
          ORDER startDate(pricelist(prl)), prl;

priceB (PriceType t, Item i, DATETIME d) = price(pricelistLineB(t, i, d), t);

pricelistLineA (PriceType t, Item i, DATETIME d) = 
    GROUP LAST PricelistLine prl IF item(prl) = i AND price(prl, t) AND 
               NOT startDate(pricelist(prl)) > d AND NOT endDate(pricelist(prl)) < d
          ORDER startDate(pricelist(prl)), prl;

priceA (PriceType t, Item i, DATETIME d) = price(pricelistLineA(t, i, d), t);

// prices for lines
currentPrice (PricelistLine l, PriceType t) = priceB(t, item(l), startDate(pricelist(l)));

noTaxPrice (PricelistLine l, PriceType t) = 
    price(l, t) / (OVERRIDE 100.0 / (100.0 + salesTax(item(l))) IF taxIncluded(t), 1.0);

WHEN LOCAL (SETCHANGED(costPrice(PricelistLine l)) OR SETCHANGED(price(l, PriceType t))) AND NOT CHANGED(markup(l, t)) DO
    markup(l, t) <- round2((noTaxPrice(l, t) * 100.0 / costPrice(l)) - 100.0);

calcPrice(PricelistLine l, PriceType t) = 
    NUMERIC[10,2](costPrice(l) * 
                  (markup(l, t) + 100.0) / 100.0 * 
                  (OVERRIDE (100.0 + salesTax(item(l))) / 100.0 IF taxIncluded(t), 1.0));

changeMarkup (PricelistLine l, PriceType t) {
    INPUT val = markup(l, t) CHANGE DO {
        price(l, t) <- calcPrice(l, t);
    }
}

// Line properties
startDate 'Начало действия' (PricelistLine prl) = startDate(pricelist(prl));
endDate 'Окончание действия' (PricelistLine prl) = endDate(pricelist(prl));
note 'Прайс-лист' (PricelistLine prl)= note(pricelist(prl));

editIn (PricelistLine pl, PriceType priceType) = editIn(pricelist(pl), priceType);

// show columns
showCurrentPrice 'Действующие цены' = DATA BOOLEAN (Pricelist);
showMarkup 'Надбавки' = DATA BOOLEAN (Pricelist);
showCost 'Себестоимость' = DATA BOOLEAN (Pricelist);

FORM pricelist 'Прайс-листы'
    OBJECTS p = Pricelist PANEL
    PROPERTIES(p) series, number, startDate, endDate, note,
                  priceListTypes ON CHANGE { SHOW chooseTypes OBJECTS pr = p; }, 
                  showCost, showMarkup, showCurrentPrice

    OBJECTS t = PriceType GRID
    FILTERS editIn(p, t) 
   
    OBJECTS l = PricelistLine
    PROPERTIES(l) nameItem, nameUnitMeasure READONLY, costPrice SHOWIF showCost(p) READONLY
    PROPERTIES    markup(l, t) COLUMNS 'p' (t) HEADER name(t) + ' (надбавка)' SHOWIF showMarkup(p) ON CHANGE changeMarkup(l, t)
    PROPERTIES    price(l, t) COLUMNS 'p' (t) HEADER name(t) 
    PROPERTIES    currentPrice(l, t) COLUMNS 'p' (t) HEADER name(t) + ' (текущая)' SHOWIF showCurrentPrice(p)
    PROPERTIES(l) NEW, DELETE 
    FILTERS pricelist(l) = p 

    EDIT Pricelist OBJECT p
;

DESIGN pricelist {
    OBJECTS {
        NEW header {
            type = CONTAINERH;
            NEW params {
                NEW seriesNumber {
                    type = CONTAINERH;
                    MOVE PROPERTY(series(p));
                    MOVE PROPERTY(number(p));
                }
                NEW period {
                    type = CONTAINERH;
                    MOVE PROPERTY(startDate(p)) { caption = 'Действует с '; }
                    MOVE PROPERTY(endDate(p)) { caption = 'по '; }
                }
                MOVE PROPERTY(priceListTypes(p)); 
                MOVE PROPERTY(note(p)); 
            }
            NEW show {
                caption = 'Показывать';
                MOVE PROPERTY(showCost(p));
                MOVE PROPERTY(showMarkup(p));
                MOVE PROPERTY(showCurrentPrice(p));     
            }     
        }
        NEW details {
            fill = 1;
            type = TABBED;
            MOVE BOX(l) {
                PROPERTY(markup(l, t)) { background = RGB(212,242,252); }
                PROPERTY(price(l, t)) { 
                    pattern = '#,##0.00'; 
                    background = RGB(198,230,247); 
                }
            }
        }
    }
}

FORM pricelists 'Прайс-листы'
    OBJECTS p = Pricelist
    PROPERTIES(p) READONLY seriesNumber, note, startDate, endDate
    PROPERTIES(p) NEWSESSION NEW, EDIT ,DELETE
    
    LIST Pricelist OBJECT p
;

NAVIGATOR {
    sales {
        NEW pricelists AFTER orders;    
    }
}

// copy
copy 'Копировать' (Pricelist pl) {
    NEWSESSION {
        NEW p = Pricelist {
            startDate(p) <- startDate(pl);
            endDate(p) <- endDate(pl);
            note(p) <- note(pl);
            showCost(p) <- showCost(pl);
            showMarkup(p) <- showMarkup(pl);
            showCurrentPrice(p) <- showCurrentPrice(pl);
            editIn(p, PriceType t) <- editIn(pl, t);
            FOR pricelist(PricelistLine l)  = pl DO NEW nl = PricelistLine {
                pricelist(nl) <- p;
                item(nl) <- item(l);
                price(nl, PriceType t) <- price(l, t);
            }
            SHOW pricelist OBJECTS p = p;
        }
    }
}

EXTEND FORM pricelist
    PROPERTIES(p) copy DRAW l TOOLBAR 
;

// change prices
CLASS ChangePriceType 'Тип изменения цен' {
    markupPriceList 'Установить надбавки из предыдущих прайсов',
    markupPriceType 'Установить надбавки из видов цен',
    pricePriceList 'Установить цены из предыдущих прайсов'
}

name 'Наименование' (ChangePriceType o) = staticCaption(o) IF o IS ChangePriceType CHARWIDTH 15;

FORM dialogChangePriceTypes 'Тип изменения цен'
    OBJECTS o = ChangePriceType
    PROPERTIES(o) READONLY name
    
    LIST ChangePriceType OBJECT o
;

changePriceType = DATA LOCAL ChangePriceType ();
nameChangePriceType 'Тип изменения цен' = name(changePriceType());

change 'Изменить на, %' = DATA LOCAL NUMERIC[10,2] ();

FORM changePrices 'Изменение цен'
    PROPERTIES() nameChangePriceType, 
                 change SHOWIF changePriceType() = ChangePriceType.pricePriceList 
;

changePrices 'Изменить цены' (Pricelist p) {
    DIALOG changePrices DO {
        CASE 
            WHEN changePriceType() = ChangePriceType.markupPriceList THEN {
                markup(PricelistLine l, PriceType t) <- 
                    OVERRIDE markup(pricelistLineB(t, item(l), startDate(p)), t), markup(t, item(l))
                    WHERE pricelist(l) = p AND editIn(p, t); 
                price(PricelistLine l, PriceType t) <- calcPrice(l, t)
                    WHERE pricelist(l) = p AND editIn(p, t);
            }
            WHEN changePriceType() = ChangePriceType.markupPriceType THEN {
                markup(PricelistLine l, PriceType t) <- markup(t, item(l))
                    WHERE pricelist(l) = p AND editIn(p, t);
                price(PricelistLine l, PriceType t) <- calcPrice(l, t)
                    WHERE pricelist(l) = p AND editIn(p, t);
            }
            WHEN changePriceType() = ChangePriceType.pricePriceList THEN
                price(PricelistLine l, PriceType t) <- 
                    NUMERIC[10,2](priceB(t, item(l), startDate(p)) * (100.0 (+) change()) / 100.0)
                    WHERE pricelist(l) = p AND editIn(p, t); 
    }
}

EXTEND FORM pricelist
    PROPERTIES(p) changePrices DRAW p
;

DESIGN pricelist {
    NEW statusPane FIRST {
        caption = 'Статусы';
        type = CONTAINERH;
        alignment = STRETCH;                          
        NEW statusActions {
            type = CONTAINERH;                    
            flex = 1; 
            MOVE PROPERTY(changePrices(p)); 
            MOVE PROPERTY(copy(p));          
        }
        NEW status AFTER statusActions {
            type = CONTAINERH;
        }
    }
}

