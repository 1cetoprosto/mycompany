MODULE SalesPricelist;

REQUIRE Item, Partner, ItemSale, PartnerSale, TaxItem, SalesSettings, SalesOrder, SalesPriceTypeMarkup, CostLedger;

NAMESPACE Sales; 

// http://documentation.luxsoft.by/x/RwBZB

CLASS Pricelist 'Прайс-листы';

@defineSeriesNumber(pricelist, 'Прайс-листы', 'ПЛ');

note 'Примечания' = DATA STRING[50] (Pricelist);

startDate 'Начало действия' = DATA DATETIME (Pricelist);

endDate 'Окончание действия' = DATA DATETIME (Pricelist);

editIn 'Изменять цены' = DATA BOOLEAN (Pricelist, PriceType);

priceListTypes 'Варианты цен' (Pricelist pricelist) = GROUP
                                               CONCAT name(PriceType pricelistType) IF editIn(pricelist, pricelistType) , ', '
                                               ORDER pricelistType CHARWIDTH 10 MATERIALIZED;

CLASS PricelistLine 'Номенклатура';

pricelist 'Прайс-лист' = DATA Pricelist (PricelistLine) NONULL DELETE;
notePricelist 'Прайс-лист' (PricelistLine prl)= note(pricelist(prl));

item 'Номенклатура' = DATA Item (PricelistLine);
nameItem 'Номенклатура' (PricelistLine prl) = name(item(prl));
nameUnitMeasure 'Единицы' (PricelistLine prl) = name(unitMeasure(item(prl))); 

editIn (PricelistLine pl, PriceType priceType) = editIn(pricelist(pl), priceType);

price 'Цена' = DATA NUMERIC[10,2] (PricelistLine, PriceType);

pricelistLine (PriceType pt, Item i, DATETIME d) = 
    GROUP LAST PricelistLine prl IF item(prl) = i AND price(prl, pt) AND NOT startDate(pricelist(prl)) >= d AND NOT endDate(pricelist(prl)) < d
          ORDER startDate(pricelist(prl)), prl;

price 'Действующая цена' (PriceType pt, Item i, DATETIME d) = price(pricelistLine(pt, i, d), pt);

currentPrice (PricelistLine l, PriceType t) = price(t, item(l), startDate(pricelist(l)));

showCurrentPrice 'Действующие цены' = DATA BOOLEAN (Pricelist);
showMarkup 'Надбавки' = DATA BOOLEAN (Pricelist);
showCost 'Себестоимость' = DATA BOOLEAN (Pricelist);

costPrice 'Текущая себестоимость' = DATA NUMERIC[32,16] (PricelistLine);

WHEN LOCAL SETCHANGED(item(PricelistLine l)) AND l IS PricelistLine DO {
    costPrice(l) <- OVERRIDE costPrice(item(l)), salesPrice(item(l));
}

taxes (PricelistLine l, PriceType pt) = salesTaxes(item(l)) * price(l, pt) / 100;
markup 'Надбавка'  = DATA NUMERIC[10,2](PricelistLine, PriceType);

WHEN LOCAL SETCHANGED(costPrice(PricelistLine l)) OR SETCHANGED(price(l, PriceType t)) AND l IS PricelistLine DO {
    IF price(l, t) THEN 
               IF taxIncluded(t) THEN markup(l, t) <- round2((price(l, t) / (costPrice(l) * (1 (+) salesTaxes(item(l)) / 100))) * 100 - 100);
               ELSE markup(l, t) <- round2((price(l, t) / costPrice(l)) * 100 - 100);
}

changeSalesTax (PricelistLine l) {
    changeSalesTax(item(l));
}

FORM chooseTypes 'Выбор видов цен'
    OBJECTS pr = Pricelist PANEL 
    
    OBJECTS t = PriceType
    PROPERTIES(t) READONLY name 
    PROPERTIES(pr, t) editIn[Pricelist,PriceType]
;

chooseTypes (Pricelist pr) {
    SHOW chooseTypes OBJECTS pr = pr;
}

recalcPrice (PricelistLine l, PriceType t, NUMERIC[10,2] markup) {
    IF taxIncluded(t) THEN price(l, t) <- round2((markup (+) 100) / 100 * costPrice(l) * (1 (+) salesTaxes(item(l)) / 100));
            ELSE price(l, t) <- round2((markup (+) 100) / 100 * costPrice(l));
}

changeMarkup (PricelistLine l, PriceType t) {
    INPUT val = NUMERIC[10,2] DO {
        recalcPrice(l, t, val);
    }
}

readonly = ABSTRACT CASE BOOLEAN (Pricelist);

FORM pricelist 'Прайс-листы'
    OBJECTS pr = Pricelist PANEL
    PROPERTIES(pr) READONLYIF readonly(pr) note, seriesNumber, startDate, endDate, 
                priceListTypes ON CHANGE chooseTypes(pr) 
    PROPERTIES(pr) showCurrentPrice, showMarkup, showCost

    OBJECTS tc = PriceType GRID
    FILTERS editIn(pr, tc) 
   
    OBJECTS prl = PricelistLine
    PROPERTIES(prl) READONLYIF readonly(pr) nameItem, nameUnitMeasure READONLY, costPrice SHOWIF showCost(pr) READONLY
    PROPERTIES      markup(prl, tc) COLUMNS 'p' (tc) HEADER name(tc) + ' (надбавка)' SHOWIF showMarkup(pr) ON CHANGE changeMarkup(prl, tc)
    PROPERTIES      price(prl, tc) COLUMNS 'p' (tc) HEADER name(tc) 
    PROPERTIES      currentPrice(prl, tc) COLUMNS 'p' (tc) HEADER name(tc) + ' (текущая)' SHOWIF showCurrentPrice(pr)
    PROPERTIES(prl) READONLYIF readonly(pr) NEW,DELETE 
    FILTERS pricelist(prl) = pr 

    EDIT Pricelist OBJECT pr
;

DESIGN pricelist {
    OBJECTS {
        NEW header {
            NEW col1 {
                type = CONTAINERH;
                NEW left {
                    NEW rek {
                        type = CONTAINERH;
                        MOVE PROPERTY(startDate(pr)) { caption = 'Период действия с '; }
                        MOVE PROPERTY(endDate(pr)) { caption = 'по '; }
                        MOVE PROPERTY(seriesNumber(pr)) { marginLeft = 10; }
                    }
                    MOVE PROPERTY(priceListTypes(pr)); 
                    MOVE PROPERTY(note(pr)); 
                }
                NEW show {
                    caption = 'Показывать';
                    type = CONTAINERV;
                    MOVE PROPERTY(showCurrentPrice(pr));     
                    MOVE PROPERTY(showMarkup(pr));
                    MOVE PROPERTY(showCost(pr));
                }     
            }
        }
        NEW details {
            fill = 1;
            type = TABBED;
            NEW container1 {
                caption = 'Спецификация';
                fill = 1;
                MOVE BOX(prl) {
                    PROPERTY(price(prl, tc)) { pattern='#,##0.00'; background = RGB(198,230,247); }
                    MOVE PROPERTY (currentPrice(prl, tc));  
                    MOVE PROPERTY (markup(prl, tc)) { background = RGB(198,230,247); }         
                };           
            }
        }
        REMOVE BOX(tc);         
        MOVE TOOLBARBOX;          
    }
}

FORM pricelistsList 'Прайс-листы'
    OBJECTS pr = Pricelist
    PROPERTIES(pr) READONLY seriesNumber, note, startDate, endDate
    LIST Pricelist OBJECT pr
;

FORM pricelists 'Прайс-листы'
    OBJECTS pr = Pricelist
    PROPERTIES(pr) READONLY seriesNumber, note, startDate, endDate
    PROPERTIES(pr) NEW NEWSESSION ,EDIT NEWSESSION ,DELETE NEWSESSION 
;

NAVIGATOR {
    sales{
        NEW pricelists AFTER orders;    
    }
}

copyPricelist 'Копировать прайслист' (Pricelist pl) {
    NEWSESSION {
        NEW p = Pricelist {
            startDate(p) <- startDate(pl);
            endDate(p) <- endDate(pl);
            note(p) <- note(pl);
            showCurrentPrice(p) <- showCurrentPrice(pl);
            showMarkup(p) <- showMarkup(pl);
            showCost(p) <- showCost(pl);
            FOR editIn(pl, PriceType t) DO {
                editIn(p, t) <- editIn(pl, t);
            }
            FOR pricelist(PricelistLine l)  = pl DO {
                NEW nl = PricelistLine {
                    pricelist(nl) <- p;
                    item(nl) <- item(l);
                    FOR price(l, PriceType t) DO {
                        price(nl, t) <- price(l, t);
                    }
                }
            }
            SHOW pricelist OBJECTS pr = p;
        }
    }
}

EXTEND FORM pricelist
    PROPERTIES(pr) copyPricelist
;

markupPriceList 'Установить надбавки из предыдущих прайсов' = DATA LOCAL BOOLEAN ();
markupPriceType 'Установить надбавки из видов цен' = DATA LOCAL BOOLEAN ();
pricePriceList 'Установить цены из предыдущих прайсов' = DATA LOCAL BOOLEAN ();
change 'Изменить на, %' = DATA LOCAL NUMERIC[10,2] ();

FORM changePrices
    PROPERTIES() markupPriceList, markupPriceType, pricePriceList, change SHOWIF pricePriceList()
;

changePrices 'Изменить цены' (Pricelist p) {
    DIALOG changePrices DO {
        CASE WHEN markupPriceList() THEN {
            FOR pricelist(PricelistLine l) = p DO {
                FOR editIn(p, PriceType t) DO {
                    markup(l, t) <- OVERRIDE markup(pricelistLine(t, item(l), startDate(p)), t), markup(category(item(l)));
                }
            }
        }
        CASE WHEN markupPriceType() THEN {  
            FOR pricelist(PricelistLine l) = p DO {
                FOR editIn(p, PriceType t) DO {
                    markup(l, t) <- markup(t);
                }
            }
        }
        CASE WHEN pricePriceList() THEN {
            FOR pricelist(PricelistLine l) = p DO {
                FOR editIn(p, PriceType t) DO {
                    price(l, t) <- price(pricelistLine(t, item(l), startDate(p)), t);
                    IF change() THEN price(l, t) <- price(l, t) (+) NUMERIC[10,2](price(l, t) * change() / 100);
                }
            }
        }
    }
}

WHEN LOCAL SETCHANGED(markup(PricelistLine l, PriceType t)) AND l IS PricelistLine DO {
    recalcPrice(l, t, markup(l, t));
} 

DESIGN changePrices {
    OBJECTS {    
        MOVE PROPERTY(markupPriceList());
        MOVE PROPERTY(markupPriceType());
        MOVE PROPERTY(pricePriceList());
        MOVE PROPERTY(change());
    }
}

EXTEND FORM pricelist
    PROPERTIES(pr) changePrices DRAW pr SHOWIF NOT readonly(pr)
;

DESIGN pricelist {
    NEW statusPane FIRST {
        caption = 'Статусы';
        type = CONTAINERH;
        alignment = STRETCH;                          
        NEW statusActions {
            type = CONTAINERH;                    
            flex = 1; 
            MOVE PROPERTY(changePrices(pr)); 
            MOVE PROPERTY(copyPricelist(pr));          
        }
        NEW status AFTER statusActions {
            type = CONTAINERH;
        }
    }
}


