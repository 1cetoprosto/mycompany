MODULE SalesPricelistPrint;

REQUIRE SalesPricelistPrintType, SalesPricelistValue;

NAMESPACE Sales;

// print
addressCompany (PrintPricelistType t) = linesAddress(company(t));
phoneCompany (PrintPricelistType t) = phone(company(t));
emailCompany (PrintPricelistType t) = email(company(t));
websiteCompany (PrintPricelistType t) = website(company(t));

price = DATA LOCAL NUMERIC[10,2] (PriceType, Item); 

FORM printPricelist 'Текущие цены'
    OBJECTS pt = PrintPricelistType PANEL
    PROPERTIES(pt) name, nameCompany, phoneCompany, emailCompany, websiteCompany
    REPORT template(pt)

    OBJECTS t = PriceType
    FILTERS set(pt, t)

    OBJECTS c = Category
    PROPERTIES(c) name
    FILTERS c IS Category AND pt IS PrintPricelistType

    OBJECTS i = Item
    PROPERTIES id(i), name(i), nameUom(i), price = price(t, i) COLUMNS (t) HEADER name(t)
    FILTERS category(i) = c, GROUP SUM 1 IF price(PriceType ppt, i)
;

print (PrintPricelistType pt) {
    CASE EXCLUSIVE
        WHEN format(pt) = TemplateFormat.pdf THEN
            PRINT printPricelist OBJECTS pt = pt PDF;
        WHEN format(pt) = TemplateFormat.docx THEN
            PRINT printPricelist OBJECTS pt = pt DOCX;
        WHEN format(pt) = TemplateFormat.xlsx THEN
            PRINT printPricelist OBJECTS pt = pt XLSX;
        WHEN format(pt) = TemplateFormat.rtf THEN
            PRINT printPricelist OBJECTS pt = pt RTF;
        WHEN format(pt) = TemplateFormat.html THEN
            PRINT printPricelist OBJECTS pt = pt HTML;
        ELSE
            PRINT printPricelist OBJECTS pt = pt;
}

printAll 'Сформировать' (PrintPricelistType t) {
    price(PriceType pt, Item i) <- priceB(pt, i, currentDateTime()) WHERE 
        set(t, pt) AND GROUP LAST set(t, Category pc) ORDER level(category(i), pc) AND canBeSold(i);
        
    print(t);
}

EXTEND FORM pricelists
    PROPERTIES(pp) printAll SHOWIF template(pp)
;

DESIGN pricelists {
    print {
        NEW actions FIRST {
            type = CONTAINERH;
            MOVE PROPERTY(printAll(pp));
        }
    }
}