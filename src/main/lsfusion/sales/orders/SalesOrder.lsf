MODULE SalesOrder;

REQUIRE Time, MetaNumerator, Individual, Company,
        MetaTax, TaxItem, BarCode,
        SalesSettings, PartnerSales, ItemSales,
        PaymentTermsSales, SalesPricelistValue, Doc;  

NAMESPACE Sales;

CLASS Order 'Заказ покупателя';

@defineStatus(order, 'заказа покупателя');

dateTime 'Дата' = DATA DATETIME (Order);
WHEN LOCAL SET(Order o IS Order) AND NOT CHANGED(dateTime(o)) DO dateTime(o) <- currentDateTime();

@defineNumber(order, 'Заказы покупателей', 'ЗР');

numberDate 'Описание' (Order o) = number(o) + ' от ' + dateTime(o);

// customer
customer 'Заказчик' = DATA Partner (Order) NONULL;
nameCustomer 'Заказчик' (Order o) = name(customer(o));

CONSTRAINT customer(Order o) AND NOT isCustomer(customer(o))
                CHECKED BY customer[Order]
                MESSAGE 'Контрагент заказа покупателя должен быть покупателем';

// Quotation
validity 'Срок действия' = DATA DATETIME (Order);

// Invoicing information
paymentTerms = DATA PaymentTerm (Order);
namePaymentTerms 'Условия оплаты' (Order o)= name(paymentTerms(o));

WHEN LOCAL CHANGED(customer(Order o)) AND NOT CHANGED(paymentTerms(o)) DO paymentTerms(o) <- customerPaymentTerms(customer(o)); 

addressCustomer 'Адрес получателя' (Order o) = csvAddress(customer(o));

// Shipping information
scheduledDateTime 'Срок поставки' = DATA DATETIME (Order);
WHEN LOCAL SET(Order o IS Order) AND NOT CHANGED(scheduledDateTime(o)) DO scheduledDateTime(o) <- currentDateTime();     

deliveryAddress 'Адрес доставки' = DATA STRING (Order);
WHEN LOCAL CHANGED(customer(Order o)) DO deliveryAddress(o) <- addressCustomer(o);

location 'Место отгрузки' = DATA Location (Order) PREREAD;
nameLocation 'Место отгрузки' (Order o) = name(location(o));

// Sales information
representative 'Наш представитель' = DATA Individual (Order);
nameRepresentative 'Наш представитель' (Order o)= name(representative(o));

CONSTRAINT representative(Order o) AND NOT type(legalEntity(representative(o))) = PartnerType.company 
    CHECKED BY representative MESSAGE 'Должен быть наш работник';

customerReference 'Входящий номер заказчика' = DATA STRING[30] (Order);

// Lines
CLASS OrderLine 'Спецификация';
order =  DATA Order (OrderLine) NONULL DELETE;

index 'Индекс' = PARTITION SUM 1 ORDER OrderLine l BY order(l) IN id MATERIALIZED;

item = DATA Item (OrderLine) NONULL;
nameItem 'Номенклатура' (OrderLine l) = name(item(l));
idBarCodeItem 'Штрихкод' (OrderLine l) = idBarCode(item(l));
idItem 'Код' (OrderLine l) = id(item(l));

CONSTRAINT item(OrderLine l) AND NOT canBeSold(item(l))
            CHECKED BY item[OrderLine] 
            MESSAGE 'Номенклатура не предназначена для продажи';

description 'Описание' = DATA ISTRING (OrderLine) CHARWIDTH 20;

uom = DATA Uom (OrderLine);
nameUom 'Ед. изм.' (OrderLine l) = name(uom(l));
WHEN LOCAL CHANGED(item(OrderLine l)) DO uom(l) <- uom(item(l));

quantity 'Количество' = DATA NUMERIC[16,3] (OrderLine);

price 'Цена' = DATA NUMERIC[10,2] (OrderLine);

@defineTaxCalc(order, o, sales);

WHEN LOCAL CHANGED(item(OrderLine ol)) DO {
    description(ol) <- nameItem(ol);
    uom(ol) <- uom(item(ol));
    in(ol, Tax t) <- salesIn(item(ol), t); 
}

// price types
priceType 'Вид цен' =  DATA PriceType (Order);
namePriceType 'Вид цен' (Order o) =  name(priceType(o));
 
WHEN LOCAL CHANGED(customer(Order o)) DO priceType(o) <- priceType(customer(o));

WHEN LOCAL (SETCHANGED(item(OrderLine ol)) OR SETCHANGED(priceType(order(ol)))) AND NOT CHANGED(price(ol)) DO {
    price(ol) <- OVERRIDE noTaxPriceA(priceType(order(ol)), item(ol), dateTime(order(ol))), salesPrice(item(ol)); 
}

// Line properties
nameStatus 'Статус' (OrderLine l) = nameStatus(order(l)); 
number 'Номер' (OrderLine l) = number(order(l));
dateTime 'Дата' (OrderLine l) = dateTime(order(l));
nameLocation 'Место доставки' (OrderLine l) = nameLocation(order(l));
nameCustomer 'Заказчик' (OrderLine l) = nameCustomer(order(l));

FORM order 'Заказ покупателя'
    OBJECTS o = Order PANEL
    PROPERTIES(o) dateTime, number, nameCustomer, namePriceType,
                  validity,
                  namePaymentTerms, addressCustomer,
                  scheduledDateTime, deliveryAddress, nameLocation, 
                  nameRepresentative, customerReference
    PROPERTIES(o) READONLY untaxedAmount, totalTax, totalAmount
                 
    OBJECTS l = OrderLine
    PROPERTIES(l) index, nameItem, description, nameUom, idBarCodeItem, idItem, quantity, price, subtotal, taxes ON CHANGE changeTax(l)
    PROPERTIES(l) NEW, DELETE
    FILTERS order(l) = o
    
    EDIT Order OBJECT o    
;      

DESIGN order {
    OBJECTS {
        NEW header {
            alignment = STRETCH;   
            type = CONTAINERH;
            NEW title {
                MOVE PROPERTY(dateTime(o));
                MOVE PROPERTY(number(o));
                MOVE PROPERTY(nameCustomer(o)) { notNull = TRUE; } 
                MOVE PROPERTY(namePriceType(o)); 
            }    
            NEW relatedDoc {
                type = TABBED;
                fill = 1;
            }                                 
        }
        NEW details {
            fill = 7;
            type = TABBED;
            MOVE BOX(l) {
                PROPERTY(nameItem(l)) { notNull = TRUE; }
            }
            NEW otherInformation {
                caption = 'Прочая информация';
                type = COLUMNS;
                columns = 2;
                NEW quotation {
                    caption = 'Запрос предложений';
                    alignment = STRETCH;
                    MOVE PROPERTY(validity(o));
                }
                NEW invoicing {
                    caption = 'Расчеты';
                    alignment = STRETCH;
                    MOVE PROPERTY(namePaymentTerms(o));                         
                    MOVE PROPERTY(addressCustomer(o));
                }
                NEW shippingInformation {
                    caption = 'Поставка';
                    alignment = STRETCH;
                    MOVE PROPERTY(scheduledDateTime(o));
                    MOVE PROPERTY(deliveryAddress(o));
                    MOVE PROPERTY(nameLocation(o));               
                }
                NEW salesInformation {
                    caption = 'Прочие';
                    alignment = STRETCH;
                    MOVE PROPERTY(nameRepresentative(o));                                       
                    MOVE PROPERTY(customerReference(o));               
                }
            }            
        }
        NEW footer {
            align = END;
            type = CONTAINERH; 
            NEW total {
                caption = 'Итого';
                type = CONTAINERH;
                MOVE PROPERTY(untaxedAmount(o));
                MOVE PROPERTY(totalTax(o));
                MOVE PROPERTY(totalAmount(o));                     
            }
        }
    }            
}

@defineBarCodeAdd(order, o, item);
@defineDocHistory(order, o, item, quantity);

FORM orders 'Заказы покупателей'
     OBJECTS o = Order
     PROPERTIES(o) READONLY number, nameCustomer,
                            validity,
                            namePaymentTerms, addressCustomer,
                            scheduledDateTime, deliveryAddress, nameLocation, 
                            nameRepresentative, customerReference,
                            untaxedAmount, totalTax, totalAmount
                            
     PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE 
;

@defineStatusForm(order, o);

NAVIGATOR {
    operations {
        NEW orders FIRST;    
    }
}