MODULE SalesOrderShipment;

REQUIRE SalesOrder, SalesOrderConfirmed, SalesOrderCanceled, SalesOrderLocked,
        ShipmentCanceled;

NAMESPACE Sales;

// options
shipmentType = DATA ShipmentType();
nameShipmentType 'Тип отгрузки на основе заказа' = name(shipmentType());
EXTEND FORM options PROPERTIES nameShipmentType();
 
// relation
orderLine = DATA OrderLine (ShipmentLine) INDEXED;

in (Order o, Shipment i) = GROUP SUM 1 IF order(orderLine(ShipmentLine l)) = o AND shipment(l) = i MATERIALIZED; 

countOrders 'Кол-во заказов' (Shipment i) = GROUP SUM 1 IF in(Order o, i) MATERIALIZED;
numberDateOrders 'Заказы' (Shipment i) = GROUP CONCAT numberDate(Order o) IF in(o, i), ',' CHARWIDTH 30; 

// form
openOrders (Shipment s) { 
    FOR in(Order o, s) DO 
        edit(o); 
}
EXTEND FORM shipment
    PROPERTIES(s) numberDateOrders ON CHANGE openOrders(s)
;
DESIGN shipment {
    footer {
        MOVE PROPERTY(numberDateOrders(s));
    }
}
EXTEND FORM shipments
    PROPERTIES(s) READONLY numberDateOrders
;

reserved 'Зарезервировано' (OrderLine ol) = 
    GROUP SUM reserved(ShipmentLine rl) IF orderLine(rl) = ol AND toReserve(shipment(rl));

done 'Отгружено' (OrderLine ol) = 
    GROUP SUM done(ShipmentLine rl) IF orderLine(rl) = ol AND active(shipment(rl));
toShip 'К отгрузке' (OrderLine ol) = 
    max(quantity(ol) (-) done(ol), 0) IF item(ol) IS Product MATERIALIZED;

toShip 'К отгрузке' (Order o) = GROUP SUM toShip(OrderLine ol) IF order(ol) = o;

CONSTRAINT (quantity(OrderLine ol) (-) done(ol)) < 0 AND confirmed(order(ol)) 
    MESSAGE 'По товару отгрузка превышает количество в заказе';

reserveShipment = DATA Shipment (Order);

WHEN ([GROUP SUM 1 IF CHANGED(toShip(OrderLine l)) BY order(l)](Order o) OR SET(confirmed(o)) OR DROPPED(locked(o)) OR  
      CHANGED(customer(o)) OR CHANGED(scheduledDateTime(o)) OR CHANGED(location(o)) OR CHANGED(number(o))) AND 
     status(o) = OrderStatus.confirmed AND location(o) AND shipmentType() DO {
     
    IF reserveShipment(o) AND NOT toReserve(reserveShipment(o)) THEN
        reserveShipment(o) <- NULL;
             
    IF NOT reserveShipment(o) AND toShip(o) > 0 THEN   
        NEW s = Shipment { 
            type(s) <- shipmentType();
            waiting(s) <- TRUE;
            
            reserveShipment(o) <- s;    
        }
        
    FOR Shipment s = reserveShipment(o) DO {
        customer(s) <- customer(o);
        scheduledDateTime(s) <- scheduledDateTime(o);

        location(s) <- location(o);
    }
    
    FOR order(OrderLine ol) = o AND toShip(ol) > 0 AND 
        NOT (GROUP SUM 1 IF shipment(ShipmentLine l) = reserveShipment(o) AND orderLine(l) = ol) 
            NEW sl = ShipmentLine DO {            
        shipment(sl) <- reserveShipment(o);
        product(sl) <- item(ol);
        orderLine(sl) <- ol;
    }
    initialDemand(ShipmentLine l) <- toShip(orderLine(l)) IF toShip(orderLine(l)) > 0 WHERE shipment(l) = reserveShipment(o);  
    DELETE ShipmentLine l WHERE shipment(l) = reserveShipment(o) AND NOT initialDemand(l);
    IF NOT countLines(reserveShipment(o)) THEN
        DELETE Shipment s WHERE s = reserveShipment(o); 

    precheckAvailability(reserveShipment(o));
}

WHEN SET(locked(Order o)) DO {
    DELETE Shipment s WHERE s = reserveShipment(o) AND toReserve(s);
}

FORM orderShipmentShow 'Расход со склада'
    OBJECTS ol = OrderLine
    
    OBJECTS sl = ShipmentLine
    PROPERTIES(sl) READONLY nameStatus, number, scheduledDateTime, initialDemand, done   
    FILTERS orderLine(sl) = ol
;

EXTEND FORM order
    PROPERTIES(l) SHOWIF confirmed(o) reserved ON CHANGE { DIALOG orderShipmentShow OBJECTS ol = l; } BACKGROUND toShip(l) AND NOT reserved(l) = toShip(l)
    PROPERTIES(l) SHOWIF confirmed(o) done ON CHANGE { DIALOG orderShipmentShow OBJECTS ol = l; } BACKGROUND NOT done(l) = quantity(l)
    
    OBJECTS sh = Shipment
    PROPERTIES(sh) READONLY nameStatus BACKGROUND colorStatus(sh), number, scheduledDateTime, executionDateTime   
    PROPERTIES(sh) NEWSESSION EDIT GRID   
    FILTERS in(o, sh)
;

DESIGN order {
    relatedDoc  {
        MOVE BOX(sh) {
            GRID(sh) { headerHeight = 24; }
        }
        REMOVE TOOLBARSYSTEM(sh);
    }
}