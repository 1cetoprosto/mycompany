MODULE SalesOrderShipment;

REQUIRE SalesOrder, SalesOrderConfirmed, SalesOrderCanceled, SalesOrderLocked,
        ShipmentCanceled;

NAMESPACE Sales;

// options
shipmentType = DATA ShipmentType();
nameShipmentType 'Тип отгрузки на основе заказа' = name(shipmentType());
EXTEND FORM options PROPERTIES nameShipmentType();
 
// relation
orderLine = DATA OrderLine (ShipmentLine);
order = DATA Order (Shipment);

reserved 'Зарезервировано' (OrderLine ol) = 
    GROUP SUM reserved(ShipmentLine rl) IF orderLine(rl) = ol AND toReserve(shipment(rl));

done 'Отгружено' (OrderLine ol) = 
    GROUP SUM done(ShipmentLine rl) IF orderLine(rl) = ol AND status(shipment(rl)) = ShipmentStatus.done;
toShip 'К отгрузке' (OrderLine ol) = 
    max(quantity(ol) (-) done(ol), 0) IF item(ol) IS Product MATERIALIZED;

toShip 'К отгрузке' (Order o) = GROUP SUM toShip(OrderLine ol) IF order(ol) = o;

CONSTRAINT (quantity(OrderLine ol) (-) done(ol)) < 0 AND confirmed(order(ol)) 
    MESSAGE 'По товару отгрузка превышает количество в заказе';

lastOpenShipment 'Последний открытый расход' (Order o)= 
    GROUP LAST Shipment s IF order(s) = o AND toReserve(s) ORDER s;

WHEN ([GROUP SUM 1 IF CHANGED(toShip(OrderLine l)) BY order(l)](Order o) OR SET(confirmed(o)) OR DROPPED(locked(o)) OR  
      CHANGED(customer(o)) OR CHANGED(scheduledDateTime(o)) OR CHANGED(location(o)) OR CHANGED(number(o))) AND 
     status(o) = OrderStatus.confirmed AND location(o) AND shipmentType() DO {
    IF NOT lastOpenShipment(o) AND toShip(o) > 0 THEN   
        NEW ns = Shipment { 
            order(ns) <- o; 
            type(ns) <- shipmentType();
            waiting(ns) <- TRUE;    
        }
        
    FOR Shipment ns = lastOpenShipment(o) DO {
        customer(ns) <- customer(o);
        scheduledDateTime(ns) <- scheduledDateTime(o);

        location(ns) <- location(o);
        sourceDocument(ns) <- number(o);
    }
    
    FOR order(OrderLine ol) = o AND toShip(ol) > 0 AND 
        NOT (GROUP SUM 1 IF shipment(ShipmentLine l) = lastOpenShipment(o) AND orderLine(l) = ol) 
            NEW sl = ShipmentLine DO {            
        shipment(sl) <- lastOpenShipment(o);
        product(sl) <- item(ol);
        orderLine(sl) <- ol;
    }
    initialDemand(ShipmentLine l) <- toShip(orderLine(l)) IF toShip(orderLine(l)) > 0 WHERE shipment(l) = lastOpenShipment(o);  
    DELETE ShipmentLine l WHERE shipment(l) = lastOpenShipment(o) AND NOT initialDemand(l);
    IF NOT countLines(lastOpenShipment(o)) THEN
        DELETE Shipment s WHERE s = lastOpenShipment(o); 

    precheckAvailability(lastOpenShipment(o));
}

WHEN SET(locked(Order o)) DO {
    DELETE Shipment s WHERE s = lastOpenShipment(o);
}

FORM orderShipmentShow 'Расход со склада'
    OBJECTS ol = OrderLine
    
    OBJECTS sl = ShipmentLine
    PROPERTIES(sl) READONLY nameStatus, number, scheduledDateTime, initialDemand, done   
    FILTERS orderLine(sl) = ol
;

EXTEND FORM order
    PROPERTIES(l) SHOWIF confirmed(o) reserved ON CHANGE { DIALOG orderShipmentShow OBJECTS ol = l; } BACKGROUND toShip(l) AND NOT reserved(l) = toShip(l)
    PROPERTIES(l) SHOWIF confirmed(o) done ON CHANGE { DIALOG orderShipmentShow OBJECTS ol = l; } BACKGROUND NOT done(l) = quantity(l)
    
    OBJECTS sh = Shipment
    PROPERTIES(sh) READONLY nameStatus BACKGROUND colorStatus(sh), number, scheduledDateTime, executionDateTime   
    PROPERTIES(sh) NEWSESSION EDIT GRID   
    FILTERS order(sh) = o
;

DESIGN order {
    relatedDoc  {
        MOVE BOX(sh) {
            GRID(sh) { headerHeight = 24; }
        }
        REMOVE TOOLBARSYSTEM(sh);
    }
}