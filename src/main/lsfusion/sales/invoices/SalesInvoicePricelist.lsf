MODULE SalesInvoicePricelist;

REQUIRE Invoice, SalesPricelistValue;

NAMESPACE Sales;

// invoice type
priceType = DATA PriceType (InvoiceType);
namePriceType 'Вид цен' (InvoiceType t) = name(priceType(t));

EXTEND FORM invoiceType
    PROPERTIES(o) namePriceType
;

taxValid (InvoiceType it, PriceType pt) = 
    (taxIncluded(it) AND taxIncluded(pt)) OR (NOT taxIncluded(pt) AND NOT taxIncluded(it));

CONSTRAINT priceType(InvoiceType i) AND priceType(i) AND NOT taxValid(i, priceType(i))
           CHECKED BY priceType[InvoiceType]
           MESSAGE 'Для типа реализации выбран недопустимый вид цены, (не)включающий налоги'; 

// price types
priceType 'Вид цен' = DATA PriceType (Invoice);
namePriceType 'Вид цен' (Invoice o) =  name(priceType(o));

priceType (InvoiceLine l) = priceType(invoice(l));

CONSTRAINT type(Invoice i) AND priceType(i) AND NOT taxValid(type(i), priceType(i))
           CHECKED BY priceType[Invoice]
           MESSAGE 'Для реализации выбран недопустимый для типа вид цены, (не)включающий налоги'; 

WHEN LOCAL CHANGED(customer(Invoice o)) DO 
    priceType(o) <- OVERRIDE priceType(customer(o)), priceType(type(o));

WHEN LOCAL (SETCHANGED(item(InvoiceLine ol)) OR SETCHANGED(priceType(invoice(ol))) OR
            (SETCHANGED(dateTime(invoice(ol))) AND status(invoice(ol)) = InvoiceStatus.draft)) 
            AND NOT CHANGED(price(ol)) DO {
    price(ol) <- OVERRIDE priceA(priceType(invoice(ol)), item(ol), dateTime(invoice(ol))), salesPrice(item(ol)); 
}

EXTEND FORM invoice
    PROPERTIES(i) namePriceType
;

DESIGN invoice {
    headerRight {
        MOVE PROPERTY(namePriceType(i)); 
    }
}

// search
listPrice 'Цена' (Invoice o, Item i) = priceA(priceType(o), i, dateTime(o));

EXTEND FORM invoice
    PROPERTIES(i, itm) READONLY listPrice

    FILTERGROUP pricelist
        FILTER 'В прайс-листе' listPrice(i, itm)
;