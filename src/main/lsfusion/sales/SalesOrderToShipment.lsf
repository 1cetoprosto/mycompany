MODULE SalesOrderToShipment;

REQUIRE SalesOrder, Shipment, ShipmentDone, ShipmentCanceled, SalesOrderStatusConfirm, SalesOrderStatusCancel;

NAMESPACE Sales;

orderLine 'ссылка на заказ' = DATA OrderLine (ShipmentLine);
order 'ссылка на заказ' = DATA Order (Shipment);

initShipment 'Запланирован отпуск со склада ' (OrderLine ol) = GROUP SUM initialDemand(ShipmentLine rl) IF orderLine(rl)=ol AND status(shipment(rl))=ShipmentStatus.ready;
doneShipment 'Отпущено со склада' (OrderLine ol) = GROUP SUM done(ShipmentLine rl) IF orderLine(rl)=ol AND status(shipment(rl))=ShipmentStatus.done;
deficitShipment 'Недоотпущено' (OrderLine ol) =  quantity(ol) (-) initShipment(ol) (-) doneShipment(ol);

deficitShipment 'Недоотпущено' (Order o) =  GROUP SUM abs(deficitShipment(OrderLine ol)) IF order(ol)=o;

CONSTRAINT (quantity(OrderLine ol) - doneShipment(ol)) < 0 AND confirmed(order(ol)) AND ol IS OrderLine MESSAGE 'По товару отгрузка превышает количество в заказе';

lastOpenReceipt 'Последний открытый расход' (Order o)= GROUP LAST Shipment s IF order(s)=o AND status(s)=ShipmentStatus.ready AND s IS Shipment ORDER s;

WHEN ([GROUP SUM 1 IF CHANGED(quantity(OrderLine l)) BY order(l)](Order o) OR SET (confirmed(o)) ) AND deficitShipment(o)>0 AND status(o)=OrderStatus.orderConfirmed DO
{
    IF NOT lastOpenReceipt(o) THEN   
        NEW ns = Shipment { 
            partner(ns) <- customer(o);
            scheduledDate(ns) <- commintmentDate(o);
            location(ns) <- location(o);
            type(ns) <- typeShipmentDefault();
            number(ns) <- curStringValue(numerator(type(ns)));
            series(ns) <- series(numerator(type(ns)));
            incrementValueSession(numerator(type(ns)));
            ready(ns) <- TRUE;           
            order(ns) <- o; 
            sourceDocument(ns) <- number(o);    
        }
    FOR order(OrderLine ol) = o AND deficitShipment(ol) AND ol IS OrderLine INLINE NEW sl = ShipmentLine DO {            
        shipment(sl) <- lastOpenReceipt(o);
        product(sl) <- item(ol);
        initialDemand(sl) <- deficitShipment(ol);
        reserved(sl) <- deficitShipment(ol);
        orderLine(sl) <- ol;
    }
}

scheduledDateShipment 'Дата расхода' (ShipmentLine rl) = scheduledDate(shipment(rl));

nameStatusShipment 'Статус' (ShipmentLine rl) = nameStatus(shipment(rl));

FORM orderShipmentShow 'Расход со склада'
    OBJECTS ol = OrderLine
    
    OBJECTS sl = ShipmentLine
    PROPERTIES(sl) scheduledDateShipment, nameStatusShipment, initialDemand, done
    
    FILTERS orderLine(sl) = ol
;

DESIGN orderShipmentShow {
    MOVE BOX(sl) FIRST { caption=''; }
}

showShipments (OrderLine l) {
    DIALOG orderShipmentShow OBJECTS ol = l; 
}

showShipment (Shipment sh) {
    SHOW shipment OBJECTS s = sh; 
}

EXTEND FORM order
    PROPERTIES(l) SHOWIF confirmed(o) initShipment ON CHANGE showShipments(l)
    PROPERTIES(l) SHOWIF confirmed(o) doneShipment ON CHANGE showShipments(l)
    
    OBJECTS sh = Shipment
    PROPERTIES(sh) seriesNumber ON CHANGE showShipment(sh)
    PROPERTIES(sh) READONLY scheduledDate, executionDate, nameStatus   
    FILTERS order(sh) = o
;

DESIGN order {
    relatedDoc  {
        MOVE BOX(sh);
        REMOVE TOOLBARSYSTEM(sh);
        PROPERTY (scheduledDate(sh)) { caption='Запланирована отгрузка'; }
        PROPERTY (executionDate(sh)) { caption='Дата отгрузки'; }
        PROPERTY (seriesNumber(sh)) { charWidth = 15; }
    }
}